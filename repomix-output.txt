This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-31T09:52:06.355Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
- Code comments have been removed.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
database/
  models/
    customer.dart
    payment.dart
    plan.dart
    sync_status.dart
  repository/
    database_repository.dart
providers/
  customer_provider.dart
  database_provider.dart
  notification_schedule_provider.dart
  payment_provider.dart
  subscription_provider.dart
screens/
  add_customer_screen.dart
  customer_detail_screen.dart
  customers_screen.dart
  edit_customer_screen.dart
  expiring_subscriptions_screen.dart
  home_screen.dart
  payments_screen.dart
services/
  notification_scheduler.dart
  receipt_service.dart
  subscription_notification_service.dart
widgets/
  add_payment_dialog.dart
  expiring_subscriptions_banner.dart
  receipt_button.dart
app_router.dart
firebase_options.dart
main.dart

================================================================
Files
================================================================

================
File: database/models/customer.dart
================
import 'dart:math';
import 'package:isar/isar.dart';
import 'plan.dart';
part 'customer.g.dart';
@Collection(inheritance: false)
class Customer {
  Id id = Isar.autoIncrement;
  @Index(type: IndexType.value)
  String name;
  String contact;
  bool isActive;
  @Index(type: IndexType.value)
  String wifiName;
  String currentPassword;
  DateTime subscriptionStart;
  DateTime subscriptionEnd;
  @Index(type: IndexType.value)
  DateTime lastModified;
  @Enumerated(EnumType.name)
  PlanType planType;
  Customer({
    required this.name,
    required this.contact,
    required this.isActive,
    required this.wifiName,
    required this.currentPassword,
    required this.subscriptionStart,
    required this.subscriptionEnd,
    required this.planType,
  }) : lastModified = DateTime.now();
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'contact': contact,
      'isActive': isActive,
      'wifiName': wifiName,
      'currentPassword': currentPassword,
      'subscriptionStart': subscriptionStart.toIso8601String(),
      'subscriptionEnd': subscriptionEnd.toIso8601String(),
      'lastModified': lastModified.toIso8601String(),
      'planType': planType.name,
    };
  }
  static Customer fromJson(Map<String, dynamic> json) {
    return Customer(
        name: json['name'] as String,
        contact: json['contact'] as String,
        isActive: json['isActive'] as bool,
        wifiName: json['wifiName'] as String,
        currentPassword: json['currentPassword'] as String,
        subscriptionStart: DateTime.parse(json['subscriptionStart'] as String),
        subscriptionEnd: DateTime.parse(json['subscriptionEnd'] as String),
        planType: PlanType.values.firstWhere(
          (e) => e.name == json['planType'],
          orElse: () => PlanType.daily,
        ),
      )
      ..id = json['id'] as int
      ..lastModified = DateTime.parse(json['lastModified'] as String);
  }
  Customer copyWith({
    String? name,
    String? contact,
    bool? isActive,
    String? wifiName,
    String? currentPassword,
    DateTime? subscriptionStart,
    DateTime? subscriptionEnd,
    PlanType? planType,
  }) {
    return Customer(
      name: name ?? this.name,
      contact: contact ?? this.contact,
      isActive: isActive ?? this.isActive,
      wifiName: wifiName ?? this.wifiName,
      currentPassword: currentPassword ?? this.currentPassword,
      subscriptionStart: subscriptionStart ?? this.subscriptionStart,
      subscriptionEnd: subscriptionEnd ?? this.subscriptionEnd,
      planType: planType ?? this.planType,
    )..id = id;
  }
  static const int _minLength = 4;
  static const int _maxSingleWordLength = 6;
  static const int _minRandomSuffix = 100;
  static const int _maxRandomSuffix = 999;
  static String generateWifiName(String? customerName) {
    if (customerName == null || customerName.trim().isEmpty) {
      throw ArgumentError('Customer name cannot be null or empty');
    }
    final cleanName = customerName
        .trim()
        .replaceAll(RegExp(r'[^\w\s]'), '')
        .replaceAll(RegExp(r'\s+'), ' ');
    // Split into words and filter out empty strings
    final words =
        cleanName.split(' ').where((word) => word.isNotEmpty).toList();
    if (words.isEmpty) {
      throw ArgumentError('Customer name contains no valid characters');
    }
    String wifiName;
    if (words.length == 1) {
      wifiName = _generateSingleWordName(words[0]);
    } else {
      wifiName = _generateMultiWordName(words);
    }
    if (wifiName.length < _minLength) {
      wifiName += _generateRandomSuffix();
    }
    return wifiName.toUpperCase();
  }
  static String _generateSingleWordName(String word) {
    if (word.length <= _maxSingleWordLength) {
      return word;
    }
    return word.substring(0, _maxSingleWordLength);
  }
  static String _generateMultiWordName(List<String> words) {
    return words.where((word) => word.isNotEmpty).map((word) => word[0]).join();
  }
  static String _generateRandomSuffix() {
    final random =
        DateTime.now().millisecondsSinceEpoch %
            (_maxRandomSuffix - _minRandomSuffix) +
        _minRandomSuffix;
    return random.toString();
  }
  static const String _upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  static const String _lowerCaseLetters = 'abcdefghijklmnopqrstuvwxyz';
  static const String _numbers = '0123456789';
  static const String _specialCharacters = '!@#\$%^&*()-_=+';
  static const int _defaultLength = 12;
  static const int _minLengthx = 8;
  static const int _maxLength = 128;
  static String generate({
    int length = _defaultLength,
    bool useSpecialChars = false,
    bool useLowerCase = true,
    bool useNumbers = true,
  }) {
    if (length < _minLengthx || length > _maxLength) {
      throw ArgumentError(
        'Password length must be between $_minLengthx and $_maxLength characters',
      );
    }
    final charPool = StringBuffer(_upperCaseLetters);
    if (useLowerCase) charPool.write(_lowerCaseLetters);
    if (useNumbers) charPool.write(_numbers);
    if (useSpecialChars) charPool.write(_specialCharacters);
    final String chars = charPool.toString();
    if (chars.isEmpty) {
      throw ArgumentError('At least one character set must be enabled');
    }
    final random = Random.secure();
    final password = StringBuffer();
    if (useSpecialChars) {
      password.write(
        _specialCharacters[random.nextInt(_specialCharacters.length)],
      );
    }
    if (useLowerCase) {
      password.write(
        _lowerCaseLetters[random.nextInt(_lowerCaseLetters.length)],
      );
    }
    if (useNumbers) {
      password.write(_numbers[random.nextInt(_numbers.length)]);
    }
    password.write(_upperCaseLetters[random.nextInt(_upperCaseLetters.length)]);
    final remainingLength = length - password.length;
    for (var i = 0; i < remainingLength; i++) {
      password.write(chars[random.nextInt(chars.length)]);
    }
    final passwordChars = password.toString().split('');
    passwordChars.shuffle(random);
    return passwordChars.join();
  }
  /// Checks if a password meets minimum strength requirements.
  ///
  /// Returns:
  ///   true if password meets all requirements, false otherwise
  static bool isStrong(String password) {
    if (password.length < _minLengthx) return false;
    final hasUpperCase = password.contains(RegExp(r'[A-Z]'));
    final hasLowerCase = password.contains(RegExp(r'[a-z]'));
    final hasNumbers = password.contains(RegExp(r'[0-9]'));
    final hasSpecialChars = password.contains(RegExp(r'[!@#\$%^&*()-_=+]'));
    return hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChars;
  }
}

================
File: database/models/payment.dart
================
import 'package:isar/isar.dart';
import 'plan.dart';
part 'payment.g.dart';
@Collection(inheritance: false)
class Payment {
  Id id = Isar.autoIncrement;
  @Index(type: IndexType.value)
  DateTime paymentDate;
  double amount;
  String customerId;
  @Enumerated(EnumType.name)
  PlanType planType;
  bool isConfirmed;
  @Index(type: IndexType.value)
  DateTime lastModified;
  Payment({
    required this.paymentDate,
    required this.amount,
    required this.customerId,
    required this.planType,
    this.isConfirmed = false,
  }) : lastModified = DateTime.now();
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'paymentDate': paymentDate.toIso8601String(),
      'amount': amount,
      'customerId': customerId,
      'planType': planType.name,
      'isConfirmed': isConfirmed,
      'lastModified': lastModified.toIso8601String(),
    };
  }
  static Payment fromJson(Map<String, dynamic> json) {
    return Payment(
      paymentDate: DateTime.parse(json['paymentDate'] as String),
      amount: json['amount'] as double,
      customerId: json['customerId'] as String,
      planType: PlanType.values.firstWhere(
        (e) => e.name == json['planType'],
        orElse: () => PlanType.daily,
      ),
      isConfirmed: json['isConfirmed'] as bool,
    )
      ..id = json['id'] as int
      ..lastModified = DateTime.parse(json['lastModified'] as String);
  }
  Payment copyWith({
    DateTime? paymentDate,
    double? amount,
    String? customerId,
    PlanType? planType,
    bool? isConfirmed,
  }) {
    return Payment(
      paymentDate: paymentDate ?? this.paymentDate,
      amount: amount ?? this.amount,
      customerId: customerId ?? this.customerId,
      planType: planType ?? this.planType,
      isConfirmed: isConfirmed ?? this.isConfirmed,
    )..id = id;
  }
}

================
File: database/models/plan.dart
================
import 'package:isar/isar.dart';
part 'plan.g.dart';
@Enumerated(EnumType.name)
enum PlanType {
  daily,
  weekly,
  monthly
}
@Collection()
class Plan {
  Id id = Isar.autoIncrement;
  @Enumerated(EnumType.name)
  PlanType type;
  double price;
  int durationInDays;
  Plan({
    required this.type,
    required this.price,
    required this.durationInDays,
  });
}

================
File: database/models/sync_status.dart
================
import 'package:isar/isar.dart';
part 'sync_status.g.dart';
@collection
class SyncStatus {
  Id id = Isar.autoIncrement;
  @Index(type: IndexType.value)
  final int entityId;
  @Index(type: IndexType.value)
  final String entityType;
  @Index(type: IndexType.value)
  final String operation;
  final DateTime timestamp;
  SyncStatus({
    required this.entityId,
    required this.entityType,
    required this.operation,
    required this.timestamp,
  });
}

================
File: database/repository/database_repository.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:isar/isar.dart';
import 'package:path_provider/path_provider.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import '../../services/subscription_notification_service.dart';
import '../models/customer.dart';
import '../models/payment.dart';
import '../models/plan.dart';
import '../models/sync_status.dart';
class DatabaseRepository {
  late Future<Isar> db;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final Connectivity _connectivity = Connectivity();
  static const String _customersCollection = 'customers';
  static const String _paymentsCollection = 'payments';
  DatabaseRepository() {
    db = openDB();
    _initializeSync();
  }
  Future<void> _initializeSync() async {
    _connectivity.onConnectivityChanged.listen((result) {
      if (result.contains(ConnectivityResult.mobile) ||
          result.contains(ConnectivityResult.wifi)) {
        syncPendingChanges();
      }
    });
  }
Future<Isar> openDB() async {
  if (Isar.instanceNames.isEmpty) {
    final dir = await getApplicationDocumentsDirectory();
    return await Isar.open(
      [CustomerSchema, PlanSchema, PaymentSchema, SyncStatusSchema],
      directory: dir.path,
      name: 'wifi_manager',
    );
  }
  final isar = Isar.getInstance('wifi_manager');
  if (isar != null) {
    return isar;
  }
  final dir = await getApplicationDocumentsDirectory();
  return await Isar.open(
    [CustomerSchema, PlanSchema, PaymentSchema, SyncStatusSchema],
    directory: dir.path,
    name: 'wifi_manager',
  );
}
  Future<void> saveCustomer(Customer customer) async {
    final isar = await db;
    await isar.writeTxn(() async {
      await isar.customers.put(customer);
      await isar.syncStatus.put(
        SyncStatus(
          entityId: customer.id,
          entityType: 'customer',
          operation: 'save',
          timestamp: DateTime.now(),
        ),
      );
    });
    if (await _isOnline()) {
      await _syncCustomerToFirestore(customer);
    }
  }
  Future<void> deleteCustomer(Id customerId) async {
    final isar = await db;
    await isar.writeTxn(() async {
      await isar.customers.delete(customerId);
      await isar.syncStatus.put(
        SyncStatus(
          entityId: customerId,
          entityType: 'customer',
          operation: 'delete',
          timestamp: DateTime.now(),
        ),
      );
    });
    if (await _isOnline()) {
      await _firestore
          .collection(_customersCollection)
          .doc(customerId.toString())
          .delete();
    }
  }
  Future<List<Customer>> getActiveCustomers() async {
    final isar = await db;
    final customers =
        await isar.customers.filter().isActiveEqualTo(true).findAll();
    if (await _isOnline()) {
      await _mergeCloudCustomers();
    }
    return customers;
  }
  Future<void> savePayment(Payment payment) async {
    final isar = await db;
    await isar.writeTxn(() async {
      await isar.payments.put(payment);
      await isar.syncStatus.put(
        SyncStatus(
          entityId: payment.id,
          entityType: 'payment',
          operation: 'save',
          timestamp: DateTime.now(),
        ),
      );
    });
    if (await _isOnline()) {
      await _syncPaymentToFirestore(payment);
    }
  }
  Future<void> syncPendingChanges() async {
    if (!await _isOnline()) return;
    final isar = await db;
    final pendingSync = await isar.syncStatus.where().findAll();
    for (final status in pendingSync) {
      try {
        if (status.entityType == 'customer') {
          final customer = await isar.customers.get(status.entityId);
          if (customer != null) {
            await _syncCustomerToFirestore(customer);
          }
        } else if (status.entityType == 'payment') {
          final payment = await isar.payments.get(status.entityId);
          if (payment != null) {
            await _syncPaymentToFirestore(payment);
          }
        }
        await isar.writeTxn(() async {
          await isar.syncStatus.delete(status.id);
        });
      } catch (e) {
        print('Error syncing ${status.entityType} ${status.entityId}: $e');
      }
    }
  }
  Future<void> _mergeCloudCustomers() async {
    final isar = await db;
    final snapshot = await _firestore.collection(_customersCollection).get();
    await isar.writeTxn(() async {
      for (final doc in snapshot.docs) {
        final cloudCustomer = Customer.fromJson(doc.data());
        final localCustomer = await isar.customers.get(cloudCustomer.id);
        if (localCustomer == null ||
            cloudCustomer.lastModified.isAfter(localCustomer.lastModified)) {
          await isar.customers.put(cloudCustomer);
        }
      }
    });
  }
  Future<void> _syncCustomerToFirestore(Customer customer) async {
    await _firestore
        .collection(_customersCollection)
        .doc(customer.id.toString())
        .set(customer.toJson());
  }
  Future<void> _syncPaymentToFirestore(Payment payment) async {
    await _firestore
        .collection(_paymentsCollection)
        .doc(payment.id.toString())
        .set(payment.toJson());
  }
  Future<bool> _isOnline() async {
    final result = await _connectivity.checkConnectivity();
    return result.contains(ConnectivityResult.wifi) ||
        result.contains(ConnectivityResult.mobile);
  }
  Future<List<Customer>> getExpiringCustomers() async {
    final tomorrow = DateTime.now().add(const Duration(days: 1));
    final isar = await db;
    return await isar.customers
        .filter()
        .isActiveEqualTo(true)
        .subscriptionEndLessThan(tomorrow)
        .findAll();
  }
  Future<List<Customer>> getCustomersExpiringBefore(DateTime date) async {
    final isar = await db;
    return await isar.customers
        .filter()
        .isActiveEqualTo(true)
        .subscriptionEndLessThan(date)
        .findAll();
  }
  Future<List<Payment>> getRecentPayments() async {
    final isar = await db;
    return await isar.payments
        .filter()
        .paymentDateGreaterThan(
          DateTime.now().subtract(const Duration(days: 30)),
        )
        .findAll();
  }
  Future<void> deleteAllRecords() async {
    final isar = await db;
    await isar.writeTxn(() async {
      await isar.customers.where().deleteAll();
      await isar.payments.where().deleteAll();
      await isar.syncStatus.where().deleteAll();
    });
    if (await _isOnline()) {
      final customerBatch = _firestore.batch();
      final paymentBatch = _firestore.batch();
      final customerDocs =
          await _firestore.collection(_customersCollection).get();
      final paymentDocs =
          await _firestore.collection(_paymentsCollection).get();
      for (final doc in customerDocs.docs) {
        customerBatch.delete(doc.reference);
      }
      for (final doc in paymentDocs.docs) {
        paymentBatch.delete(doc.reference);
      }
      await customerBatch.commit();
      await paymentBatch.commit();
    }
  }
}
extension NotificationExtension on DatabaseRepository {
  Future<void> scheduleNotifications() async {
    await Future.wait([
      scheduleExpirationNotifications(),
    ]);
  }
  Future<void> scheduleExpirationNotifications() async {
    final customers = await getActiveCustomers();
    for (final customer in customers) {
      await SubscriptionNotificationService.scheduleExpirationNotification(
        customer,
      );
    }
  }
}

================
File: providers/customer_provider.dart
================
import 'package:riverpod/riverpod.dart';
import '../database/models/customer.dart';
import 'database_provider.dart';
final customerProvider = FutureProvider.family<Customer?, String>((
  ref,
  customerId,
) async {
  final database = ref.watch(databaseProvider);
  final isar = await database.db;
  return await isar.customers.get(int.parse(customerId));
});

================
File: providers/database_provider.dart
================
import 'package:riverpod/riverpod.dart';
import '../database/models/customer.dart';
import '../database/models/payment.dart';
import '../database/repository/database_repository.dart';
final databaseProvider = Provider<DatabaseRepository>((ref) {
  return DatabaseRepository();
});
final activeCustomersProvider = FutureProvider<List<Customer>>((ref) async {
  final database = ref.watch(databaseProvider);
  return database.getActiveCustomers();
});
final expiringCustomersProvider = FutureProvider<List<Customer>>((ref) async {
  final database = ref.watch(databaseProvider);
  return database.getExpiringCustomers();
});
final recentPaymentsProvider = FutureProvider<List<Payment>>((ref) async {
  final database = ref.watch(databaseProvider);
  return database.getRecentPayments();
});

================
File: providers/notification_schedule_provider.dart
================
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../services/notification_scheduler.dart';
import 'database_provider.dart';
final notificationSchedulerProvider = Provider<NotificationScheduler>((ref) {
  return NotificationScheduler(ref.watch(databaseProvider));
});

================
File: providers/payment_provider.dart
================
import 'package:flutter/material.dart';
import 'package:isar/isar.dart';
import 'package:riverpod/riverpod.dart';
import '../database/models/payment.dart';
import '../database/models/plan.dart';
import 'database_provider.dart';
final selectedDateRangeProvider = StateProvider<DateTimeRange?>((ref) => null);
final filteredPaymentsProvider = FutureProvider<List<Payment>>((ref) async {
  final database = ref.watch(databaseProvider);
  final dateRange = ref.watch(selectedDateRangeProvider);
  if (dateRange == null) {
    return database.getRecentPayments();
  }
  final isar = await database.db;
  return isar.payments
      .filter()
      .paymentDateBetween(dateRange.start, dateRange.end)
      .findAll();
});
final paymentSummaryProvider = FutureProvider<Map<String, double>>((ref) async {
  final payments = await ref.watch(filteredPaymentsProvider.future);
  return {
    'daily': payments
        .where((p) => p.planType == PlanType.daily)
        .fold(0, (sum, p) => sum + p.amount),
    'weekly': payments
        .where((p) => p.planType == PlanType.weekly)
        .fold(0, (sum, p) => sum + p.amount),
    'monthly': payments
        .where((p) => p.planType == PlanType.monthly)
        .fold(0, (sum, p) => sum + p.amount),
    'total': payments.fold(0, (sum, p) => sum + p.amount),
  };
});

================
File: providers/subscription_provider.dart
================
import 'package:riverpod/riverpod.dart';
import '../database/models/customer.dart';
import 'database_provider.dart';
final expiringSubscriptionsProvider = StreamProvider<List<Customer>>((ref) async* {
  final database = ref.watch(databaseProvider);
  while (true) {
    final threeDaysFromNow = DateTime.now().add(const Duration(days: 3));
    final expiringCustomers = await database.getCustomersExpiringBefore(threeDaysFromNow);
    yield expiringCustomers;
    await Future.delayed(const Duration(minutes: 15));
  }
});

================
File: screens/add_customer_screen.dart
================
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../database/models/customer.dart';
import '../database/models/plan.dart';
import '../providers/database_provider.dart';
class AddCustomerScreen extends ConsumerStatefulWidget {
  const AddCustomerScreen({super.key});
  @override
  ConsumerState<AddCustomerScreen> createState() => _AddCustomerScreenState();
}
class _AddCustomerScreenState extends ConsumerState<AddCustomerScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _contactController = TextEditingController();
  PlanType _selectedPlan = PlanType.monthly;
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Add Customer')),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            TextFormField(
              controller: _nameController,
              decoration: const InputDecoration(
                labelText: 'Name',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter a name';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _contactController,
              decoration: const InputDecoration(
                labelText: 'Contact',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter contact info';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            DropdownButtonFormField<PlanType>(
              value: _selectedPlan,
              decoration: const InputDecoration(
                labelText: 'Plan',
                border: OutlineInputBorder(),
              ),
              items:
                  PlanType.values.map((plan) {
                    return DropdownMenuItem(
                      value: plan,
                      child: Text(plan.name),
                    );
                  }).toList(),
              onChanged: (PlanType? value) {
                if (value != null) {
                  setState(() {
                    _selectedPlan = value;
                  });
                }
              },
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _saveCustomer,
              child: const Text('Save Customer'),
            ),
          ],
        ),
      ),
    );
  }
  void _saveCustomer() async {
    if (_formKey.currentState?.validate() ?? false) {
      final customer = Customer(
        wifiName: '',
        name: _nameController.text,
        contact: _contactController.text,
        isActive: true,
        currentPassword: _generatePassword(),
        subscriptionStart: DateTime.now(),
        subscriptionEnd: _calculateEndDate(),
        planType: _selectedPlan,
      );
      try {
        await ref.read(databaseProvider).saveCustomer(customer);
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Customer saved successfully')),
          );
          Navigator.pop(context);
          ref.invalidate(activeCustomersProvider);
        }
      } catch (e, stackTrace) {
        if (mounted) {
          ScaffoldMessenger.of(
            context,
          ).showSnackBar(SnackBar(content: SelectableText('Error saving customer: $e | $stackTrace'),duration: Duration(minutes: 2),));
        }
      }
    }
  }
  String _generatePassword() {
    return 'temp-pass-${Random().nextInt(9999)}';
  }
  DateTime _calculateEndDate() {
    switch (_selectedPlan) {
      case PlanType.daily:
        return DateTime.now().add(const Duration(days: 1));
      case PlanType.weekly:
        return DateTime.now().add(const Duration(days: 7));
      case PlanType.monthly:
        return DateTime.now().add(const Duration(days: 30));
    }
  }
}

================
File: screens/customer_detail_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../database/models/customer.dart';
import '../widgets/add_payment_dialog.dart';
import 'edit_customer_screen.dart';
class CustomerDetailScreen extends ConsumerWidget {
  final Customer customer;
  const CustomerDetailScreen({
    super.key,
    required this.customer,
  });
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final daysUntilExpiry = customer.subscriptionEnd.difference(DateTime.now()).inDays;
    final isExpiring = daysUntilExpiry <= 3;
    return Scaffold(
      appBar: AppBar(
        title: Text(customer.name),
        actions: [
          IconButton(
            icon: const Icon(Icons.edit),
            onPressed: () => Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => EditCustomerScreen(customer: customer),
              ),
            ),
          ),
        ],
      ),
      body: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          if (isExpiring)
            Card(
              color: Colors.orange.shade100,
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Row(
                  children: [
                    const Icon(Icons.warning_amber_rounded, color: Colors.orange),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'Subscription expires in $daysUntilExpiry days',
                        style: const TextStyle(color: Colors.orange),
                      ),
                    ),
                    TextButton(
                      onPressed: () => showDialog(
                        context: context,
                        builder: (context) => const AddPaymentDialog(),
                      ),
                      child: const Text('RENEW'),
                    ),
                  ],
                ),
              ),
            ),
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildDetailRow('Contact', customer.contact),
                  const Divider(),
                  _buildDetailRow('WiFi Name', customer.wifiName),
                  const Divider(),
                  _buildDetailRow('Password', customer.currentPassword),
                  const Divider(),
                  _buildDetailRow('Status', customer.isActive ? 'Active' : 'Inactive'),
                  const Divider(),
                  _buildDetailRow('Plan', customer.planType.name),
                  const Divider(),
                  _buildDetailRow(
                    'Subscription Start',
                    DateFormat('MMM d, y').format(customer.subscriptionStart),
                  ),
                  const Divider(),
                  _buildDetailRow(
                    'Subscription End',
                    DateFormat('MMM d, y').format(customer.subscriptionEnd),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () => showDialog(
          context: context,
          builder: (context) => const AddPaymentDialog(),
        ),
        icon: const Icon(Icons.payment),
        label: const Text('Add Payment'),
      ),
    );
  }
  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: const TextStyle(
              fontWeight: FontWeight.bold,
              color: Colors.grey,
            ),
          ),
          Text(
            value,
            style: const TextStyle(fontSize: 16),
          ),
        ],
      ),
    );
  }
}

================
File: screens/customers_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../database/models/customer.dart';
import '../providers/database_provider.dart';
class CustomersScreen extends ConsumerWidget {
  const CustomersScreen({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final customersAsync = ref.watch(activeCustomersProvider);
    return Scaffold(
      appBar: AppBar(title: const Text('Active Customers')),
      body: customersAsync.when(
        data:
            (customers) => ListView.builder(
              itemCount: customers.length,
              itemBuilder: (context, index) {
                final customer = customers[index];
                return CustomerListTile(customer: customer);
              },
            ),
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text('Error: $error')),
      ),
    );
  }
}
class CustomerListTile extends ConsumerWidget {
  final Customer customer;
  const CustomerListTile({super.key, required this.customer});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return ListTile(
      onTap:
          () => Navigator.pushNamed(
            context,
            '/customer/${customer.id}',
            arguments: customer,
          ),
      title: Text(customer.name),
      subtitle: Text(
        'Expires: ${DateFormat('MMM dd, yyyy').format(customer.subscriptionEnd)}',
      ),
      trailing: IconButton(
        icon: const Icon(Icons.edit),
        onPressed:
            () => Navigator.pushNamed(
              context,
              '/edit-customer/${customer.id}',
              arguments: customer,
            ),
      ),
    );
  }
}

================
File: screens/edit_customer_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../database/models/customer.dart';
import '../database/models/plan.dart';
import '../providers/database_provider.dart';
class EditCustomerScreen extends ConsumerStatefulWidget {
  final Customer customer;
  const EditCustomerScreen({super.key, required this.customer});
  @override
  ConsumerState<EditCustomerScreen> createState() => _EditCustomerScreenState();
}
class _EditCustomerScreenState extends ConsumerState<EditCustomerScreen> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameController;
  late TextEditingController _contactController;
  late TextEditingController _wifiNameController;
  late TextEditingController _passwordController;
  late bool _isActive;
  late PlanType _selectedPlan;
  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.customer.name);
    _contactController = TextEditingController(text: widget.customer.contact);
    _wifiNameController = TextEditingController(text: widget.customer.wifiName);
    _passwordController = TextEditingController(
      text: widget.customer.currentPassword,
    );
    _isActive = widget.customer.isActive;
    _selectedPlan = widget.customer.planType;
  }
  @override
  void dispose() {
    _nameController.dispose();
    _contactController.dispose();
    _wifiNameController.dispose();
    _passwordController.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Edit Customer'),
        actions: [
          IconButton(icon: const Icon(Icons.save), onPressed: _saveCustomer),
        ],
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            TextFormField(
              controller: _nameController,
              decoration: const InputDecoration(
                labelText: 'Name',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter a name';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _contactController,
              decoration: const InputDecoration(
                labelText: 'Contact',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter contact info';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _wifiNameController,
              decoration: const InputDecoration(
                labelText: 'WiFi Name',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter WiFi name';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _passwordController,
              decoration: const InputDecoration(
                labelText: 'Password',
                border: OutlineInputBorder(),
                suffixIcon: Icon(Icons.wifi_password),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter password';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            SwitchListTile(
              title: const Text('Active Customer'),
              value: _isActive,
              onChanged: (value) => setState(() => _isActive = value),
            ),
            const SizedBox(height: 16),
            DropdownButtonFormField<PlanType>(
              value: _selectedPlan,
              decoration: const InputDecoration(
                labelText: 'Plan',
                border: OutlineInputBorder(),
              ),
              items:
                  PlanType.values.map((plan) {
                    return DropdownMenuItem(
                      value: plan,
                      child: Text(plan.name),
                    );
                  }).toList(),
              onChanged: (PlanType? value) {
                if (value != null) {
                  setState(() => _selectedPlan = value);
                }
              },
            ),
          ],
        ),
      ),
    );
  }
  void _saveCustomer() async {
    if (_formKey.currentState?.validate() ?? false) {
      final updatedCustomer = Customer(
        name: _nameController.text,
        contact: _contactController.text,
        isActive: _isActive,
        wifiName: _wifiNameController.text,
        currentPassword: _passwordController.text,
        subscriptionStart: widget.customer.subscriptionStart,
        subscriptionEnd: widget.customer.subscriptionEnd,
        planType: _selectedPlan,
      )..id = widget.customer.id;
      try {
        await ref.read(databaseProvider).saveCustomer(updatedCustomer);
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Customer updated successfully')),
          );
          Navigator.pop(context);
          ref.invalidate(activeCustomersProvider);
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error updating customer: $e')),
          );
        }
      }
    }
  }
}

================
File: screens/expiring_subscriptions_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:url_launcher/url_launcher.dart';
import '../database/models/customer.dart';
import '../providers/subscription_provider.dart';
class ExpiringSubscriptionsScreen extends ConsumerWidget {
  const ExpiringSubscriptionsScreen({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final expiringSubscriptions = ref.watch(expiringSubscriptionsProvider);
    return Scaffold(
      appBar: AppBar(title: const Text('Expiring Subscriptions')),
      body: expiringSubscriptions.when(
        data:
            (customers) =>
                customers.isEmpty
                    ? const Center(child: Text('No expiring subscriptions'))
                    : ListView.builder(
                      itemCount: customers.length,
                      itemBuilder: (context, index) {
                        final customer = customers[index];
                        final daysUntilExpiry =
                            customer.subscriptionEnd
                                .difference(DateTime.now())
                                .inDays;
                        return ListTile(
                          leading: CircleAvatar(
                            backgroundColor: _getExpiryColor(daysUntilExpiry),
                            child: Text(
                              daysUntilExpiry.toString(),
                              style: const TextStyle(color: Colors.white),
                            ),
                          ),
                          title: Text(customer.name),
                          subtitle: Text(
                            'Expires: ${DateFormat('MMM d, y').format(customer.subscriptionEnd)}\n'
                            'Plan: ${customer.planType.name}',
                          ),
                          isThreeLine: true,
                          trailing: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              IconButton(
                                icon: const Icon(Icons.phone),
                                onPressed: () => _makeCall(customer.contact),
                              ),
                              IconButton(
                                icon: const Icon(Icons.message),
                                onPressed:
                                    () => _sendMessage(
                                      customer.contact,
                                      context,
                                      daysUntilExpiry,
                                    ),
                              ),
                            ],
                          ),
                          onTap:
                              () => _showRenewalDialog(context, ref, customer),
                        );
                      },
                    ),
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text('Error: $error')),
      ),
    );
  }
  Color _getExpiryColor(int days) {
    if (days <= 1) return Colors.red;
    if (days <= 2) return Colors.orange;
    return Colors.yellow.shade700;
  }
  Future<void> _makeCall(String contact) async {
    final url = Uri.parse('tel:$contact');
    if (await canLaunchUrl(url)) {
      await launchUrl(url);
    }
  }
  Future<void> _sendMessage(
    String contact,
    BuildContext context,
    int daysUntilExpiry,
  ) async {
    final messageOptions = await showDialog<String>(
      context: context,
      builder:
          (context) => AlertDialog(
            title: const Text('Send Message'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                ListTile(
                  leading: const Icon(Icons.message),
                  title: const Text('SMS'),
                  onTap: () => Navigator.pop(context, 'sms'),
                ),
                ListTile(
                  leading: const Icon(Icons.whatshot),
                  title: const Text('WhatsApp Business'),
                  onTap: () => Navigator.pop(context, 'whatsapp'),
                ),
              ],
            ),
          ),
    );
    if (messageOptions == null) return;
    String daysleftString =
        daysUntilExpiry <= 0 ? 'TODAY ' : 'in $daysUntilExpiry days';
    final message = Uri.encodeComponent(
      'Dear valued customer, this is a reminder that your WiFi subscription '
      'is due for renewal. Please renew to avoid service interruption. '
      'Your subscription will expire $daysleftString'
      'Thank you for your continued support.',
    );
    final url =
        messageOptions == 'whatsapp'
            ? Uri.parse(
              'https://wa.me/${contact.replaceAll(RegExp(r'[^0-9]'), '')}?text=$message',
            )
            : Uri.parse('sms:$contact?body=$message');
    if (await canLaunchUrl(url)) {
      await launchUrl(url);
    }
  }
  Future<void> _showRenewalDialog(
    BuildContext context,
    WidgetRef ref,
    Customer customer,
  ) async {
    return showDialog(
      context: context,
      builder:
          (context) => AlertDialog(
            title: const Text('Renew Subscription'),
            content: Text(
              'Renew ${customer.name}\'s ${customer.planType.name} plan?',
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('CANCEL'),
              ),
              ElevatedButton(
                onPressed: () {
                  Navigator.pop(context);
                  Navigator.pushNamed(
                    context,
                    '/payments',
                    arguments: customer,
                  );
                },
                child: const Text('RENEW'),
              ),
            ],
          ),
    );
  }
}

================
File: screens/home_screen.dart
================
import 'dart:math';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../providers/database_provider.dart';
import '../providers/notification_schedule_provider.dart';
import '../providers/subscription_provider.dart';
import '../widgets/expiring_subscriptions_banner.dart';
class HomeScreen extends ConsumerStatefulWidget {
  const HomeScreen({super.key});
  @override
  ConsumerState<HomeScreen> createState() => _HomeScreenState();
}
class _HomeScreenState extends ConsumerState<HomeScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1200),
    );
    _fadeAnimation = CurvedAnimation(
      parent: _controller,
      curve: Curves.easeOut,
    );
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 0.2),
      end: Offset.zero,
    ).animate(CurvedAnimation(parent: _controller, curve: Curves.easeOutCubic));
    _controller.forward();
  }
  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    ref.watch(notificationSchedulerProvider);
    return Scaffold(
      backgroundColor: const Color(0xFF1A1A1A),
      extendBodyBehindAppBar: true,
      appBar: _GlassmorphicAppBar(
        title: 'Truthy WiFi Manager',
        onNotificationTap: () {
        },
      ),
      body: Stack(
        children: [
          _AnimatedBackground(),
          SafeArea(
            child: FadeTransition(
              opacity: _fadeAnimation,
              child: SlideTransition(
                position: _slideAnimation,
                child: _buildMainContent(),
              ),
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildMainContent() {
    return SingleChildScrollView(
      physics: const BouncingScrollPhysics(),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const ExpiringSubscriptionsBanner(),
            const SizedBox(height: 24),
            _AnimatedStatsSection(ref: ref),
            const SizedBox(height: 24),
            _buildSectionHeader('Quick Actions'),
            const SizedBox(height: 16),
            _AnimatedActionsGrid(),
          ],
        ),
      ),
    );
  }
  Widget _buildSectionHeader(String title) {
    return TweenAnimationBuilder<double>(
      tween: Tween(begin: 0, end: 1),
      duration: const Duration(milliseconds: 800),
      curve: Curves.easeOut,
      builder: (context, value, child) {
        return Opacity(
          opacity: value,
          child: Transform.translate(
            offset: Offset(0, 20 * (1 - value)),
            child: Text(
              title,
              style: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ),
        );
      },
    );
  }
}
class _AnimatedBackground extends StatefulWidget {
  @override
  State<_AnimatedBackground> createState() => _AnimatedBackgroundState();
}
class _AnimatedBackgroundState extends State<_AnimatedBackground>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 10),
    )..repeat(reverse: true);
  }
  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _controller,
      builder: (context, child) {
        return CustomPaint(
          size: Size.infinite,
          painter: _GradientPainter(animation: _controller),
        );
      },
    );
  }
}
class _GradientPainter extends CustomPainter {
  final Animation<double> animation;
  _GradientPainter({required this.animation}) : super(repaint: animation);
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint();
    final rect = Offset.zero & size;
    final gradient = RadialGradient(
      center: Alignment(
        0.7 * sin(animation.value * pi * 2),
        0.7 * cos(animation.value * pi * 2),
      ),
      colors: const [Color(0xFF1A237E), Color(0xFF0D47A1), Color(0xFF1A1A1A)],
      stops: const [0.0, 0.5, 1.0],
      radius: 1.5,
    );
    paint.shader = gradient.createShader(rect);
    canvas.drawRect(rect, paint);
  }
  @override
  bool shouldRepaint(_GradientPainter oldDelegate) => true;
}
class _GlassmorphicAppBar extends ConsumerWidget implements PreferredSizeWidget {
  final String title;
  final VoidCallback onNotificationTap;
  const _GlassmorphicAppBar({
    required this.title,
    required this.onNotificationTap,
  });
  @override
  Size get preferredSize => const Size.fromHeight(kToolbarHeight);
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final expiringSubscriptions = ref.watch(expiringSubscriptionsProvider);
    return ClipRRect(
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
        child: Container(
          height: preferredSize.height + MediaQuery.of(context).padding.top,
          decoration: BoxDecoration(
            color: Colors.black.withOpacity(0.2),
            border: const Border(
              bottom: BorderSide(color: Colors.white10, width: 0.5),
            ),
          ),
          child: SafeArea(
            child: Row(
              children: [
                const SizedBox(width: 16),
                Text(
                  title,
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const Spacer(),
                Stack(
                  children: [
                    IconButton(
                      icon: const Icon(CupertinoIcons.bell, color: Colors.white),
                      onPressed: onNotificationTap,
                    ),
                    expiringSubscriptions.when(
                      data: (customers) {
                        if (customers.isEmpty) return const SizedBox.shrink();
                        return Positioned(
                          right: 8,
                          top: 8,
                          child: TweenAnimationBuilder<double>(
                            tween: Tween(begin: 0.0, end: 1.0),
                            duration: const Duration(milliseconds: 300),
                            builder: (context, value, child) {
                              return Transform.scale(
                                scale: value,
                                child: Container(
                                  padding: const EdgeInsets.all(6),
                                  decoration: BoxDecoration(
                                    color: Colors.orange.withOpacity(0.9),
                                    shape: BoxShape.circle,
                                    boxShadow: [
                                      BoxShadow(
                                        color: Colors.orange.withOpacity(0.3),
                                        blurRadius: 4,
                                        spreadRadius: 1,
                                      ),
                                    ],
                                  ),
                                  child: Text(
                                    customers.length.toString(),
                                    style: const TextStyle(
                                      color: Colors.white,
                                      fontSize: 10,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ),
                              );
                            },
                          ),
                        );
                      },
                      loading: () => const SizedBox.shrink(),
                      error: (_, __) => const SizedBox.shrink(),
                    ),
                  ],
                ),
                const SizedBox(width: 8),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
class _AnimatedStatsSection extends StatelessWidget {
  final WidgetRef ref;
  const _AnimatedStatsSection({required this.ref});
  @override
  Widget build(BuildContext context) {
    return TweenAnimationBuilder<double>(
      tween: Tween(begin: 0, end: 1),
      duration: const Duration(milliseconds: 1000),
      curve: Curves.easeOutCubic,
      builder: (context, value, child) {
        return Opacity(
          opacity: value,
          child: Transform.translate(
            offset: Offset(0, 30 * (1 - value)),
            child: Row(
              children: [
                Expanded(
                  child: _GlassmorphicStatsCard(
                    title: 'Active Customers',
                    icon: CupertinoIcons.person_2_fill,
                    iconColor: Colors.blue,
                    content: Consumer(
                      builder: (context, ref, child) {
                        final customersAsync = ref.watch(
                          activeCustomersProvider,
                        );
                        return customersAsync.when(
                          data:
                              (customers) => _AnimatedStatContent(
                                value: customers.length.toString(),
                                trend: '+5% this month',
                              ),
                          loading: () => const CircularProgressIndicator(),
                          error: (_, __) => const Icon(Icons.error),
                        );
                      },
                    ),
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: _GlassmorphicStatsCard(
                    title: 'Expiring Soon',
                    icon: CupertinoIcons.exclamationmark_triangle_fill,
                    iconColor: Colors.orange,
                    content: Consumer(
                      builder: (context, ref, child) {
                        final expiringAsync = ref.watch(
                          expiringCustomersProvider,
                        );
                        return expiringAsync.when(
                          data:
                              (customers) => _AnimatedStatContent(
                                value: customers.length.toString(),
                                trend: 'Next 3 days',
                              ),
                          loading: () => const CircularProgressIndicator(),
                          error: (_, __) => const Icon(Icons.error),
                        );
                      },
                    ),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}
class _GlassmorphicStatsCard extends StatelessWidget {
  final String title;
  final IconData icon;
  final Color iconColor;
  final Widget content;
  const _GlassmorphicStatsCard({
    required this.title,
    required this.icon,
    required this.iconColor,
    required this.content,
  });
  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(16),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
        child: Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.1),
            borderRadius: BorderRadius.circular(16),
            border: Border.all(color: Colors.white.withOpacity(0.2)),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: iconColor.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Icon(icon, color: iconColor),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Text(
                      title,
                      style: const TextStyle(
                        color: Colors.white70,
                        fontSize: 14,
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              content,
            ],
          ),
        ),
      ),
    );
  }
}
class _AnimatedStatContent extends StatelessWidget {
  final String value;
  final String trend;
  const _AnimatedStatContent({required this.value, required this.trend});
  @override
  Widget build(BuildContext context) {
    return TweenAnimationBuilder<double>(
      tween: Tween(begin: 0, end: 1),
      duration: const Duration(milliseconds: 1500),
      curve: Curves.easeOutCubic,
      builder: (context, value, child) {
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              this.value,
              style: TextStyle(
                color: Colors.white,
                fontSize: 24 * value,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 4),
            Text(
              trend,
              style: TextStyle(color: Colors.white54, fontSize: 12 * value),
            ),
          ],
        );
      },
    );
  }
}
class _AnimatedActionsGrid extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return GridView.count(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      crossAxisCount: 2,
      mainAxisSpacing: 16,
      crossAxisSpacing: 16,
      childAspectRatio: 1.5,
      children: [
        _buildAnimatedActionCard(
          index: 0,
          title: 'Add Customer',
          icon: CupertinoIcons.person_add_solid,
          gradient: const [Color(0xFF4CAF50), Color(0xFF2E7D32)],
          onTap: () => Navigator.pushNamed(context, '/add-customer'),
        ),
        _buildAnimatedActionCard(
          index: 1,
          title: 'Recent Payments',
          icon: CupertinoIcons.money_dollar_circle_fill,
          gradient: const [Color(0xFF1E88E5), Color(0xFF1565C0)],
          onTap: () => Navigator.pushNamed(context, '/payments'),
        ),
        _buildAnimatedActionCard(
          index: 2,
          title: 'View Customers',
          icon: CupertinoIcons.person_2_fill,
          gradient: const [Color(0xFF7E57C2), Color(0xFF4527A0)],
          onTap: () => Navigator.pushNamed(context, '/customers'),
        ),
        _buildAnimatedActionCard(
          index: 3,
          title: 'Expiring',
          icon: CupertinoIcons.exclamationmark_triangle_fill,
          gradient: const [Color(0xFFFF7043), Color(0xFFE64A19)],
          onTap: () => Navigator.pushNamed(context, '/expiring-subscriptions'),
        ),
      ],
    );
  }
  Widget _buildAnimatedActionCard({
    required int index,
    required String title,
    required IconData icon,
    required List<Color> gradient,
    required VoidCallback onTap,
  }) {
    return TweenAnimationBuilder<double>(
      tween: Tween(begin: 0, end: 1),
      duration: Duration(milliseconds: 800 + (index * 100)),
      curve: Curves.easeOutCubic,
      builder: (context, value, child) {
        return Transform.translate(
          offset: Offset(0, 50 * (1 - value)),
          child: Opacity(
            opacity: value,
            child: _GlassmorphicActionCard(
              title: title,
              icon: icon,
              gradient: gradient,
              onTap: onTap,
            ),
          ),
        );
      },
    );
  }
}
class _GlassmorphicActionCard extends StatefulWidget {
  final String title;
  final IconData icon;
  final List<Color> gradient;
  final VoidCallback onTap;
  const _GlassmorphicActionCard({
    required this.title,
    required this.icon,
    required this.gradient,
    required this.onTap,
  });
  @override
  State<_GlassmorphicActionCard> createState() =>
      _GlassmorphicActionCardState();
}
class _GlassmorphicActionCardState extends State<_GlassmorphicActionCard>
    with SingleTickerProviderStateMixin {
  late AnimationController _hoverController;
  late Animation<double> _scaleAnimation;
  bool _isHovered = false;
  @override
  void initState() {
    super.initState();
    _hoverController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 200),
    );
    _scaleAnimation = Tween<double>(begin: 1.0, end: 1.05).animate(
      CurvedAnimation(parent: _hoverController, curve: Curves.easeOutCubic),
    );
  }
  @override
  void dispose() {
    _hoverController.dispose();
    super.dispose();
  }
  void _onHoverChanged(bool isHovered) {
    setState(() {
      _isHovered = isHovered;
      if (isHovered) {
        _hoverController.forward();
      } else {
        _hoverController.reverse();
      }
    });
  }
  @override
  Widget build(BuildContext context) {
    return MouseRegion(
      onEnter: (_) => _onHoverChanged(true),
      onExit: (_) => _onHoverChanged(false),
      child: GestureDetector(
        onTapDown: (_) => _onHoverChanged(true),
        onTapUp: (_) => _onHoverChanged(false),
        onTapCancel: () => _onHoverChanged(false),
        onTap: widget.onTap,
        child: AnimatedBuilder(
          animation: _scaleAnimation,
          builder: (context, child) {
            return Transform.scale(scale: _scaleAnimation.value, child: child);
          },
          child: ClipRRect(
            borderRadius: BorderRadius.circular(16),
            child: BackdropFilter(
              filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
              child: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [
                      widget.gradient[0].withOpacity(0.7),
                      widget.gradient[1].withOpacity(0.7),
                    ],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(
                    color: Colors.white.withOpacity(_isHovered ? 0.3 : 0.1),
                    width: 0.5,
                  ),
                  boxShadow: [
                    BoxShadow(
                      color: widget.gradient[0].withOpacity(0.3),
                      blurRadius: _isHovered ? 12 : 8,
                      spreadRadius: _isHovered ? 2 : 0,
                    ),
                  ],
                ),
                child: Stack(
                  children: [
                    if (_isHovered)
                      AnimatedPositioned(
                        duration: const Duration(milliseconds: 1500),
                        curve: Curves.easeInOut,
                        left: _isHovered ? -100 : 0,
                        top: _isHovered ? -100 : 0,
                        child: Container(
                          width: 200,
                          height: 200,
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            gradient: RadialGradient(
                              colors: [
                                widget.gradient[0].withOpacity(0.3),
                                Colors.transparent,
                              ],
                            ),
                          ),
                        ),
                      ),
                    Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(
                            widget.icon,
                            size: 32,
                            color: Colors.white.withOpacity(0.9),
                          ),
                          const SizedBox(height: 12),
                          Text(
                            widget.title,
                            style: TextStyle(
                              color: Colors.white.withOpacity(0.9),
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}

================
File: screens/payments_screen.dart
================
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../database/models/payment.dart';
import '../providers/customer_provider.dart';
import '../providers/payment_provider.dart';
import '../widgets/add_payment_dialog.dart';
import '../widgets/receipt_button.dart';
class PaymentsScreen extends ConsumerWidget {
  const PaymentsScreen({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final paymentsAsync = ref.watch(filteredPaymentsProvider);
    final summaryAsync = ref.watch(paymentSummaryProvider);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Payment History'),
        actions: [
          IconButton(
            icon: const Icon(CupertinoIcons.calendar),
            onPressed: () => _showDateRangePicker(context, ref),
          ),
          IconButton(
            icon: const Icon(CupertinoIcons.add),
            onPressed: () => _showAddPaymentDialog(context, ref),
          ),
        ],
      ),
      body: Column(
        children: [
          Consumer(
            builder: (context, ref, child) {
              final dateRange = ref.watch(selectedDateRangeProvider);
              if (dateRange == null) return const SizedBox.shrink();
              return Padding(
                padding: const EdgeInsets.all(8.0),
                child: Chip(
                  label: Text(
                    '${DateFormat('MMM d').format(dateRange.start)} - '
                    '${DateFormat('MMM d').format(dateRange.end)}',
                  ),
                  onDeleted:
                      () =>
                          ref.read(selectedDateRangeProvider.notifier).state =
                              null,
                ),
              );
            },
          ),
          _PaymentSummaryCard(summaryAsync: summaryAsync),
          Expanded(
            child: paymentsAsync.when(
              data:
                  (payments) =>
                      payments.isEmpty
                          ? const Center(child: Text('No payments found'))
                          : ListView.builder(
                            itemCount: payments.length,
                            itemBuilder:
                                (context, index) =>
                                    _PaymentListTile(payment: payments[index]),
                          ),
              loading: () => const Center(child: CircularProgressIndicator()),
              error: (error, stack) => Center(child: Text('Error: $error')),
            ),
          ),
        ],
      ),
    );
  }
  Future<void> _showDateRangePicker(BuildContext context, WidgetRef ref) async {
    final dateRange = await showDateRangePicker(
      context: context,
      firstDate: DateTime.now().subtract(const Duration(days: 365)),
      lastDate: DateTime.now(),
      currentDate: DateTime.now(),
    );
    if (dateRange != null) {
      ref.read(selectedDateRangeProvider.notifier).state = dateRange;
    }
  }
  Future<void> _showAddPaymentDialog(BuildContext context, WidgetRef ref) {
    return showDialog(
      context: context,
      builder: (context) => const AddPaymentDialog(),
    );
  }
}
class _PaymentSummaryCard extends StatelessWidget {
  final AsyncValue<Map<String, double>> summaryAsync;
  const _PaymentSummaryCard({required this.summaryAsync});
  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.all(8),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: summaryAsync.when(
          data:
              (summary) => Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Total Revenue: UGX ${summary['total']?.toStringAsFixed(0)}',
                    style: Theme.of(context).textTheme.titleLarge,
                  ),
                  const Divider(),
                  _SummaryRow(
                    title: 'Daily Plans:',
                    amount: summary['daily'] ?? 0,
                  ),
                  _SummaryRow(
                    title: 'Weekly Plans:',
                    amount: summary['weekly'] ?? 0,
                  ),
                  _SummaryRow(
                    title: 'Monthly Plans:',
                    amount: summary['monthly'] ?? 0,
                  ),
                ],
              ),
          loading: () => const Center(child: CircularProgressIndicator()),
          error: (error, stack) => Center(child: Text('Error: $error')),
        ),
      ),
    );
  }
}
class _SummaryRow extends StatelessWidget {
  final String title;
  final double amount;
  const _SummaryRow({required this.title, required this.amount});
  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [Text(title), Text('UGX ${amount.toStringAsFixed(0)}')],
      ),
    );
  }
}
class _PaymentListTile extends ConsumerWidget {
  final Payment payment;
  const _PaymentListTile({required this.payment});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final customerAsync = ref.watch(customerProvider(payment.customerId));
    return ListTile(
      leading: Icon(
        payment.isConfirmed ? Icons.check_circle : Icons.pending,
        color: payment.isConfirmed ? Colors.green : Colors.orange,
      ),
      title: customerAsync.when(
        data: (customer) => Text(customer!.name),
        loading: () => const Text('Loading...'),
        error: (_, __) => const Text('Unknown Customer'),
      ),
      subtitle: Text(
        '${payment.planType.name} - ${DateFormat('MMM d, y').format(payment.paymentDate)}',
      ),
      trailing: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            'UGX ${payment.amount.toStringAsFixed(0)}',
            style: Theme.of(context).textTheme.titleMedium,
          ),
          ReceiptButton(payment: payment),
        ],
      ),
    );
  }
}

================
File: services/notification_scheduler.dart
================
import 'dart:async';
import '../database/repository/database_repository.dart';
class NotificationScheduler {
  final DatabaseRepository _repository;
  Timer? _schedulingTimer;
  NotificationScheduler(this._repository) {
    _scheduleNotificationCheck();
    _schedulingTimer = Timer.periodic(
      const Duration(hours: 12),
      (_) => _scheduleNotificationCheck(),
    );
  }
  Future<void> _scheduleNotificationCheck() async {
    try {
      await _repository.scheduleNotifications();
    } catch (e) {
      print('Error scheduling notifications: $e');
    }
  }
  void dispose() {
    _schedulingTimer?.cancel();
  }
}

================
File: services/receipt_service.dart
================
import 'dart:io';
import 'package:intl/intl.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:share_plus/share_plus.dart';
import '../database/models/customer.dart';
import '../database/models/payment.dart';
class ReceiptService {
  static final _currency = NumberFormat.currency(
    symbol: 'UGX ',
    decimalDigits: 0,
  );
  static Future<void> generateAndShareReceipt({
    required Payment payment,
    required Customer customer,
  }) async {
    final pdf = pw.Document();
    final titleStyle = pw.TextStyle(
      font: pw.Font.helveticaBold(),
      fontSize: 24,
      color: PdfColors.blue900,
    );
    final headerStyle = pw.TextStyle(
      font: pw.Font.helveticaBold(),
      fontSize: 14,
      color: PdfColors.blue900,
    );
    final subtitleStyle = pw.TextStyle(
      font: pw.Font.helvetica(),
      fontSize: 12,
      color: PdfColors.grey800,
    );
    final labelStyle = pw.TextStyle(
      font: pw.Font.helveticaBold(),
      fontSize: 10,
      color: PdfColors.grey700,
    );
    final valueStyle = pw.TextStyle(
      font: pw.Font.helvetica(),
      fontSize: 10,
      color: PdfColors.black,
    );
    final noteStyle = pw.TextStyle(
      font: pw.Font.helvetica(),
      fontSize: 10,
      color: PdfColors.grey700,
      fontStyle: pw.FontStyle.italic,
    );
    pdf.addPage(
      pw.Page(
        pageFormat: PdfPageFormat.a4,
        build:
            (context) => pw.Container(
              padding: const pw.EdgeInsets.all(40),
              decoration: pw.BoxDecoration(
                border: pw.Border.all(color: PdfColors.grey300, width: 1),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Row(
                    mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                    children: [
                      pw.Column(
                        crossAxisAlignment: pw.CrossAxisAlignment.start,
                        children: [
                          pw.Text('TRUTHY SYSTEMS', style: titleStyle),
                          pw.SizedBox(height: 4),
                          pw.Text(
                            'Internet Service Provider',
                            style: subtitleStyle,
                          ),
                        ],
                      ),
                      pw.Container(
                        padding: const pw.EdgeInsets.all(10),
                        decoration: pw.BoxDecoration(
                          color: PdfColors.blue50,
                          borderRadius: const pw.BorderRadius.all(
                            pw.Radius.circular(4),
                          ),
                        ),
                        child: pw.Text('RECEIPT', style: headerStyle),
                      ),
                    ],
                  ),
                  pw.SizedBox(height: 20),
                  pw.Container(
                    padding: const pw.EdgeInsets.all(10),
                    color: PdfColors.grey100,
                    child: pw.Row(
                      mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                      children: [
                        pw.Column(
                          crossAxisAlignment: pw.CrossAxisAlignment.start,
                          children: [
                            pw.Text('Receipt No:', style: labelStyle),
                            pw.SizedBox(height: 4),
                            pw.Text('${payment.id}', style: valueStyle),
                          ],
                        ),
                        pw.Column(
                          crossAxisAlignment: pw.CrossAxisAlignment.end,
                          children: [
                            pw.Text('Date:', style: labelStyle),
                            pw.SizedBox(height: 4),
                            pw.Text(
                              DateFormat(
                                'MMMM d, y',
                              ).format(payment.paymentDate),
                              style: valueStyle,
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                  pw.SizedBox(height: 20),
                  pw.Container(
                    width: double.infinity,
                    padding: const pw.EdgeInsets.all(10),
                    child: pw.Column(
                      crossAxisAlignment: pw.CrossAxisAlignment.start,
                      children: [
                        pw.Text('CUSTOMER DETAILS', style: headerStyle),
                        pw.SizedBox(height: 10),
                        _buildInfoRow(
                          'Customer Name',
                          customer.name,
                          labelStyle,
                          valueStyle,
                        ),
                        _buildInfoRow(
                          'Contact',
                          customer.contact,
                          labelStyle,
                          valueStyle,
                        ),
                        _buildInfoRow(
                          'Subscription Period',
                          '${DateFormat('MMM d, y').format(customer.subscriptionStart)} - ${DateFormat('MMM d, y').format(customer.subscriptionEnd)}',
                          labelStyle,
                          valueStyle,
                        ),
                      ],
                    ),
                  ),
                  pw.SizedBox(height: 20),
                  // Payment Details
                  pw.Container(
                    padding: const pw.EdgeInsets.all(10),
                    color: PdfColors.grey100,
                    child: pw.Column(
                      crossAxisAlignment: pw.CrossAxisAlignment.start,
                      children: [
                        pw.Text('PAYMENT DETAILS', style: headerStyle),
                        pw.SizedBox(height: 10),
                        _buildInfoRow(
                          'Plan Type',
                          payment.planType.name.toUpperCase(),
                          labelStyle,
                          valueStyle,
                        ),
                        _buildInfoRow(
                          'Amount Paid',
                          _currency.format(payment.amount),
                          labelStyle,
                          valueStyle,
                        ),
                        _buildInfoRow(
                          'Payment Status',
                          payment.isConfirmed ? 'Confirmed' : 'Pending',
                          labelStyle,
                          valueStyle,
                        ),
                      ],
                    ),
                  ),
                  pw.SizedBox(height: 20),
                  pw.Container(
                    padding: const pw.EdgeInsets.all(10),
                    decoration: pw.BoxDecoration(
                      border: pw.Border.all(color: PdfColors.blue200),
                      borderRadius: const pw.BorderRadius.all(
                        pw.Radius.circular(4),
                      ),
                    ),
                    child: pw.Column(
                      crossAxisAlignment: pw.CrossAxisAlignment.start,
                      children: [
                        pw.Text('WIFI CREDENTIALS', style: headerStyle),
                        pw.SizedBox(height: 10),
                        _buildInfoRow(
                          'WiFi Name',
                          customer.wifiName,
                          labelStyle,
                          valueStyle,
                        ),
                        _buildInfoRow(
                          'Password',
                          customer.currentPassword,
                          labelStyle,
                          valueStyle,
                        ),
                        pw.SizedBox(height: 10),
                        pw.Text(
                          'Note: Connection is limited to 2 devices at a time with speeds up to 60Mbps',
                          style: noteStyle,
                        ),
                      ],
                    ),
                  ),
                  pw.Spacer(),
                  pw.Container(
                    padding: const pw.EdgeInsets.symmetric(vertical: 20),
                    decoration: const pw.BoxDecoration(
                      border: pw.Border(
                        top: pw.BorderSide(color: PdfColors.grey300),
                      ),
                    ),
                    child: pw.Column(
                      children: [
                        pw.Text(
                          'Thank you for choosing Truthy Systems!',
                          style: headerStyle.copyWith(color: PdfColors.blue700),
                          textAlign: pw.TextAlign.center,
                        ),
                        pw.SizedBox(height: 10),
                        pw.Text(
                          'For support, please contact: 0783009649',
                          style: valueStyle,
                          textAlign: pw.TextAlign.center,
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
      ),
    );
    final output = await getTemporaryDirectory();
    final file = File(
      '${output.path}/truthy_systems_receipt_${payment.id}.pdf',
    );
    await file.writeAsBytes(await pdf.save());
    await Share.shareXFiles(
      [XFile(file.path)],
      text: 'Payment Receipt - ${customer.name}',
      subject: 'Truthy Systems - Internet Service Receipt',
    );
  }
  static pw.Row _buildInfoRow(
    String label,
    String value,
    pw.TextStyle labelStyle,
    pw.TextStyle valueStyle,
  ) {
    return pw.Row(
      mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
      children: [
        pw.Text(label, style: labelStyle),
        pw.Text(value, style: valueStyle),
      ],
    );
  }
}

================
File: services/subscription_notification_service.dart
================
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:permission_handler/permission_handler.dart';
import '../database/models/customer.dart';
import '../database/models/plan.dart';
import 'package:shared_preferences/shared_preferences.dart';
class SubscriptionNotificationService {
  static final FlutterLocalNotificationsPlugin _notifications =
      FlutterLocalNotificationsPlugin();
  static const String channelId = 'subscription_notifications';
  static const String channelName = 'Subscription Notifications';
  static const String channelDescription =
      'Notifications for expiring subscriptions';
  static const _scheduledNotificationsKey = 'scheduled_notifications';
  static Future<void> initialize() async {
    await _requestPermissions();
    await _initializeNotifications();
  }
  static Future<void> _requestPermissions() async {
    await Permission.notification.request();
    final platform =
        _notifications
            .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin
            >();
    await platform?.requestNotificationsPermission();
    await platform?.requestExactAlarmsPermission();
  }
  static Future<void> _initializeNotifications() async {
    const androidChannel = AndroidNotificationChannel(
      channelId,
      channelName,
      description: channelDescription,
      importance: Importance.max,
    );
    final platform =
        _notifications
            .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin
            >();
    await platform?.createNotificationChannel(androidChannel);
    const initializationSettings = InitializationSettings(
      android: AndroidInitializationSettings('@mipmap/ic_launcher'),
      iOS: DarwinInitializationSettings(),
    );
    await _notifications.initialize(initializationSettings);
  }
  static Future<void> scheduleExpirationNotification(Customer customer) async {
    if (await _isNotificationScheduled(customer.id)) {
      debugPrint('Notification already scheduled for ${customer.name}');
      return;
    }
    final notificationTime = _calculateNotificationTime(customer);
    if (notificationTime.isBefore(tz.TZDateTime.now(tz.local))) {
      debugPrint('Notification time is in the past for ${customer.name}');
      return;
    }
    final notificationDetails = _createNotificationDetails();
    try {
      await _notifications.zonedSchedule(
        customer.id.hashCode,
        'Subscription Expiring',
        _generateMessage(customer),
        notificationTime,
        notificationDetails,
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
      );
      await _markNotificationScheduled(customer.id, notificationTime);
      debugPrint('Scheduled notification for ${customer.name}');
    } catch (e) {
      debugPrint('Failed to schedule notification: $e');
    }
  }
  static Future<bool> _isNotificationScheduled(int customerId) async {
    final prefs = await SharedPreferences.getInstance();
    final scheduledNotifications = prefs.getString(_scheduledNotificationsKey);
    if (scheduledNotifications == null) return false;
    final notifications =
        json.decode(scheduledNotifications) as Map<String, dynamic>;
    final scheduledTime = notifications[customerId.toString()];
    if (scheduledTime == null) return false;
    final notificationTime = DateTime.parse(scheduledTime);
    return notificationTime.isAfter(DateTime.now());
  }
  static Future<void> _markNotificationScheduled(
    int customerId,
    tz.TZDateTime notificationTime,
  ) async {
    final prefs = await SharedPreferences.getInstance();
    final scheduledNotifications = prefs.getString(_scheduledNotificationsKey);
    final notifications =
        scheduledNotifications != null
            ? json.decode(scheduledNotifications) as Map<String, dynamic>
            : <String, dynamic>{};
    notifications[customerId.toString()] = notificationTime.toString();
    await prefs.setString(
      _scheduledNotificationsKey,
      json.encode(notifications),
    );
  }
  static Future<void> clearExpiredNotifications() async {
    final prefs = await SharedPreferences.getInstance();
    final scheduledNotifications = prefs.getString(_scheduledNotificationsKey);
    if (scheduledNotifications == null) return;
    final notifications =
        json.decode(scheduledNotifications) as Map<String, dynamic>;
    notifications.removeWhere((_, timeStr) {
      final time = DateTime.parse(timeStr);
      return time.isBefore(DateTime.now());
    });
    await prefs.setString(
      _scheduledNotificationsKey,
      json.encode(notifications),
    );
  }
  static String _generateMessage(Customer customer) {
    final daysLeft = customer.subscriptionEnd.difference(DateTime.now()).inDays;
    return '${customer.name}\'s ${customer.planType.name} plan expires in $daysLeft days';
  }
  static tz.TZDateTime _calculateNotificationTime(Customer customer) {
    final now = tz.TZDateTime.now(tz.local);
    final end = tz.TZDateTime.from(customer.subscriptionEnd, tz.local);
    switch (customer.planType) {
      case PlanType.daily:
        return end.subtract(const Duration(hours: 2));
      case PlanType.weekly:
        return end.subtract(const Duration(days: 1));
      case PlanType.monthly:
        return end.subtract(const Duration(days: 3));
    }
  }
  static NotificationDetails _createNotificationDetails() {
    return const NotificationDetails(
      android: AndroidNotificationDetails(
        channelId,
        'Subscription Notifications',
        channelDescription: 'Notifications for expiring subscriptions',
        importance: Importance.max,
        priority: Priority.high,
        fullScreenIntent: true,
      ),
    );
  }
}
class TestNotificationWidget extends StatelessWidget {
  const TestNotificationWidget({super.key});
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Test Notifications')),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            final testCustomer = Customer(
              contact: '1234567890',
              wifiName: 'TestWiFi',
              currentPassword: 'testpassword',
              subscriptionStart: DateTime.now(),
              isActive: true,
              planType: PlanType.monthly,
              name: 'John Doe',
              subscriptionEnd: DateTime.now().add(Duration(seconds: 5)),
            );
            try {
              await SubscriptionNotificationService.scheduleExpirationNotification(
                testCustomer,
              );
              print('Notification scheduled successfully');
            } catch (e) {
              print('Failed to schedule notification: $e');
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('Failed to schedule notification: $e')),
              );
            }
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Test notification scheduled!')),
            );
          },
          child: const Text('Schedule Test Notification'),
        ),
      ),
    );
  }
}

================
File: widgets/add_payment_dialog.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:isar/isar.dart';
import '../database/models/payment.dart';
import '../database/models/plan.dart';
import '../database/models/customer.dart';
import '../providers/database_provider.dart';
import '../providers/payment_provider.dart';
class AddPaymentDialog extends ConsumerStatefulWidget {
  const AddPaymentDialog({super.key});
  @override
  ConsumerState<AddPaymentDialog> createState() => _AddPaymentDialogState();
}
class _AddPaymentDialogState extends ConsumerState<AddPaymentDialog> {
  final _formKey = GlobalKey<FormState>();
  String? _selectedCustomerId;
  PlanType _selectedPlan = PlanType.monthly;
  final _amountController = TextEditingController();
  DateTime _startDate = DateTime.now();
  @override
  Widget build(BuildContext context) {
    final customersAsync = ref.watch(activeCustomersProvider);
    return AlertDialog(
      title: const Text('Record Payment'),
      content: SingleChildScrollView(
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              customersAsync.when(
                data:
                    (customers) => DropdownButtonFormField<String>(
                      value: _selectedCustomerId,
                      decoration: const InputDecoration(
                        labelText: 'Customer',
                        border: OutlineInputBorder(),
                      ),
                      items:
                          customers.map((customer) {
                            return DropdownMenuItem(
                              value: customer.id.toString(),
                              child: Text(customer.name),
                            );
                          }).toList(),
                      onChanged:
                          (value) =>
                              setState(() => _selectedCustomerId = value),
                      validator:
                          (value) =>
                              value == null ? 'Please select a customer' : null,
                    ),
                loading: () => const CircularProgressIndicator(),
                error: (_, __) => const Text('Error loading customers'),
              ),
              const SizedBox(height: 16),
              InkWell(
                onTap: () => _selectStartDate(context),
                child: InputDecorator(
                  decoration: const InputDecoration(
                    labelText: 'Start Date',
                    border: OutlineInputBorder(),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        '${_startDate.year}-${_startDate.month.toString().padLeft(2, '0')}-${_startDate.day.toString().padLeft(2, '0')}',
                      ),
                      const Icon(Icons.calendar_today),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),
              DropdownButtonFormField<PlanType>(
                value: _selectedPlan,
                decoration: const InputDecoration(
                  labelText: 'Plan Type',
                  border: OutlineInputBorder(),
                ),
                items:
                    PlanType.values.map((plan) {
                      return DropdownMenuItem(
                        value: plan,
                        child: Text(plan.name),
                      );
                    }).toList(),
                onChanged: (value) {
                  if (value != null) {
                    setState(() => _selectedPlan = value);
                    _updateAmount();
                  }
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _amountController,
                decoration: const InputDecoration(
                  labelText: 'Amount',
                  border: OutlineInputBorder(),
                  prefixText: 'UGX',
                ),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter an amount';
                  }
                  if (double.tryParse(value) == null) {
                    return 'Please enter a valid number';
                  }
                  return null;
                },
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('Cancel'),
        ),
        ElevatedButton(onPressed: _savePayment, child: const Text('Save')),
      ],
    );
  }
  Future<void> _selectStartDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _startDate,
      firstDate: DateTime.now().subtract(const Duration(days: 7)),
      lastDate: DateTime.now().add(const Duration(days: 7)),
    );
    if (picked != null && picked != _startDate) {
      setState(() {
        _startDate = picked;
      });
    }
  }
  void _updateAmount() {
    switch (_selectedPlan) {
      case PlanType.daily:
        _amountController.text = '2000';
        break;
      case PlanType.weekly:
        _amountController.text = '10000';
        break;
      case PlanType.monthly:
        _amountController.text = '35000';
        break;
    }
  }
  DateTime _calculateEndDate(DateTime startDate, PlanType planType) {
    switch (planType) {
      case PlanType.daily:
        return startDate.add(const Duration(days: 1));
      case PlanType.weekly:
        return startDate.add(const Duration(days: 7));
      case PlanType.monthly:
        return startDate.add(const Duration(days: 30));
    }
  }
  void _savePayment() async {
    if (_formKey.currentState?.validate() ?? false) {
      try {
        final isar = await ref.read(databaseProvider).db;
        await isar.writeTxn(() async {
          final customer = await isar.customers.get(
            int.parse(_selectedCustomerId!),
          );
          if (customer == null) throw Exception('Customer not found');
          final payment = Payment(
            paymentDate: DateTime.now(),
            amount: double.parse(_amountController.text),
            customerId: _selectedCustomerId!,
            planType: _selectedPlan,
            isConfirmed: true,
          );
          await isar.payments.put(payment);
          customer.subscriptionStart = _startDate;
          customer.subscriptionEnd = _calculateEndDate(
            _startDate,
            _selectedPlan,
          );
          customer.planType = _selectedPlan;
          final previousPayments =
              await isar.payments
                  .filter()
                  .customerIdEqualTo(_selectedCustomerId!)
                  .findAll();
          if (previousPayments.length <= 1) {
            customer.wifiName = Customer.generateWifiName(customer.name);
            customer.currentPassword = Customer.generate();
          }
          await isar.customers.put(customer);
        });
        if (mounted) {
          Navigator.pop(context);
          ref.invalidate(recentPaymentsProvider);
          ref.invalidate(paymentSummaryProvider);
          ref.invalidate(filteredPaymentsProvider);
          ref.invalidate(activeCustomersProvider);
          ref.invalidate(expiringCustomersProvider);
          final customer = await isar.customers.get(
            int.parse(_selectedCustomerId!),
          );
          if (customer != null) {
            showDialog(
              context: context,
              builder:
                  (context) => AlertDialog(
                    title: const Text('WiFi Credentials'),
                    content: Column(
                      mainAxisSize: MainAxisSize.min,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        SelectableText('WiFi Name: ${customer.wifiName}'),
                        const SizedBox(height: 8),
                        SelectableText('Password: ${customer.currentPassword}'),
                      ],
                    ),
                    actions: [
                      TextButton(
                        onPressed: () => Navigator.pop(context),
                        child: const Text('OK'),
                      ),
                    ],
                  ),
            );
          }
        }
      } catch (e, stackTrace) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: SelectableText(
                'Error recording payment: $e | $stackTrace',
              ),
              duration: Duration(minutes: 3),
            ),
          );
        }
      }
    }
  }
}

================
File: widgets/expiring_subscriptions_banner.dart
================
import 'dart:ui';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../providers/subscription_provider.dart';
class ExpiringSubscriptionsBanner extends ConsumerStatefulWidget {
  const ExpiringSubscriptionsBanner({super.key});
  @override
  ConsumerState<ExpiringSubscriptionsBanner> createState() =>
      _ExpiringSubscriptionsBannerState();
}
class _ExpiringSubscriptionsBannerState
    extends ConsumerState<ExpiringSubscriptionsBanner>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _slideAnimation;
  late Animation<double> _fadeAnimation;
  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 800),
    );
    _slideAnimation = Tween<double>(
      begin: -50,
      end: 0,
    ).animate(CurvedAnimation(parent: _controller, curve: Curves.easeOutCubic));
    _fadeAnimation = Tween<double>(
      begin: 0,
      end: 1,
    ).animate(CurvedAnimation(parent: _controller, curve: Curves.easeOut));
    _controller.forward();
  }
  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    final expiringSubscriptions = ref.watch(expiringSubscriptionsProvider);
    return expiringSubscriptions.when(
      data: (customers) {
        if (customers.isEmpty) return const SizedBox.shrink();
        return AnimatedBuilder(
          animation: _controller,
          builder: (context, child) {
            return Transform.translate(
              offset: Offset(0, _slideAnimation.value),
              child: Opacity(
                opacity: _fadeAnimation.value,
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(16),
                  child: BackdropFilter(
                    filter: ImageFilter.blur(sigmaX: 8, sigmaY: 8),
                    child: Container(
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          colors: [
                            Colors.orange.withOpacity(0.1),
                            Colors.deepOrange.withOpacity(0.05),
                          ],
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                        ),
                        borderRadius: BorderRadius.circular(16),
                        border: Border.all(
                          color: Colors.orange.withOpacity(0.2),
                          width: 0.5,
                        ),
                      ),
                      child: MaterialBanner(
                        backgroundColor: Colors.transparent,
                        content: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Expiring Subscriptions',
                              style: Theme.of(
                                context,
                              ).textTheme.titleMedium?.copyWith(
                                color: Colors.white,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text(
                              '${customers.length} subscriptions expiring soon',
                              style: TextStyle(
                                color: Colors.white.withOpacity(0.7),
                              ),
                            ),
                          ],
                        ),
                        leading: ShaderMask(
                          shaderCallback:
                              (bounds) => LinearGradient(
                                colors: [Colors.orange, Colors.deepOrange],
                              ).createShader(bounds),
                          child: const Icon(
                            CupertinoIcons.exclamationmark_circle,
                            color: Colors.white,
                            size: 28,
                          ),
                        ),
                        actions: [
                          TextButton(
                            onPressed:
                                () => Navigator.pushNamed(
                                  context,
                                  '/expiring-subscriptions',
                                ),
                            style: TextButton.styleFrom(
                              foregroundColor: Colors.white,
                              backgroundColor: Colors.orange.withOpacity(0.1),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(8),
                              ),
                            ),
                            child: const Text('VIEW ALL'),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
            );
          },
        );
      },
      loading: () => const SizedBox.shrink(),
      error: (_, __) => const SizedBox.shrink(),
    );
  }
}

================
File: widgets/receipt_button.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../database/models/payment.dart';
import '../providers/customer_provider.dart';
import '../services/receipt_service.dart';
class ReceiptButton extends ConsumerWidget {
  final Payment payment;
  const ReceiptButton({super.key, required this.payment});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return IconButton(
      icon: const Icon(Icons.receipt_long),
      onPressed: () async {
        try {
          final customerAsync = await ref.read(
            customerProvider(payment.customerId).future,
          );
          if (customerAsync != null) {
            await ReceiptService.generateAndShareReceipt(
              payment: payment,
              customer: customerAsync,
            );
          }
        } catch (e) {
          if (context.mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Error generating receipt: $e')),
            );
          }
        }
      },
    );
  }
}

================
File: app_router.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:wifi_manager/database/models/customer.dart';
import 'package:wifi_manager/providers/database_provider.dart';
import 'package:wifi_manager/screens/add_customer_screen.dart';
import 'package:wifi_manager/screens/customer_detail_screen.dart';
import 'package:wifi_manager/screens/customers_screen.dart';
import 'package:wifi_manager/screens/edit_customer_screen.dart';
import 'package:wifi_manager/screens/expiring_subscriptions_screen.dart';
import 'package:wifi_manager/screens/home_screen.dart';
import 'package:wifi_manager/screens/payments_screen.dart';
class AppRouter {
  static Route<dynamic>? onGenerateRoute(
    RouteSettings settings,
    WidgetRef ref,
  ) {
    return switch (settings.name) {
      final name when name?.startsWith('/customer/') ?? false =>
        MaterialPageRoute(
          builder: (context) => _buildCustomerDetailScreen(
            settings.name!.split('/').last,
            ref,
          ),
        ),
      final name when name?.startsWith('/edit-customer/') ?? false =>
        MaterialPageRoute(
          builder: (context) => _buildEditCustomerScreen(
            settings.name!.split('/').last,
            ref,
          ),
        ),
      _ => null,
    };
  }
  static Widget _buildCustomerDetailScreen(String customerId, WidgetRef ref) {
    return FutureBuilder<Customer?>(
      future: _getCustomerById(customerId, ref),
      builder: (context, snapshot) {
        return _buildLoadingOrError(
          snapshot,
          (data) => CustomerDetailScreen(customer: data),
        );
      },
    );
  }
  static Widget _buildEditCustomerScreen(String customerId, WidgetRef ref) {
    return FutureBuilder<Customer?>(
      future: _getCustomerById(customerId, ref),
      builder: (context, snapshot) {
        return _buildLoadingOrError(
          snapshot,
          (data) => EditCustomerScreen(customer: data),
        );
      },
    );
  }
  static Widget _buildLoadingOrError(
    AsyncSnapshot<Customer?> snapshot,
    Widget Function(Customer) onData,
  ) {
    if (snapshot.connectionState == ConnectionState.waiting) {
      return const Scaffold(
        body: Center(child: CircularProgressIndicator()),
      );
    }
    if (!snapshot.hasData || snapshot.data == null) {
      return const Scaffold(
        body: Center(child: Text('Customer not found')),
      );
    }
    return onData(snapshot.data!);
  }
  static Future<Customer?> _getCustomerById(
    String customerId,
    WidgetRef ref,
  ) async {
    final isar = await ref.read(databaseProvider).db;
    return isar.customers.get(int.parse(customerId));
  }
  static final routes = {
    '/': (context) => const HomeScreen(),
    '/customers': (context) => const CustomersScreen(),
    '/add-customer': (context) => const AddCustomerScreen(),
    '/payments': (context) => const PaymentsScreen(),
    '/expiring-subscriptions': (context) => const ExpiringSubscriptionsScreen(),
  };
}

================
File: firebase_options.dart
================
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }
  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyA73mJ5ztnDoIX7qRy8wI0QfLLtgbAFouY',
    appId: '1:391437135862:android:19b72a576bafd2228f61d7',
    messagingSenderId: '391437135862',
    projectId: 'truthy-wifi-manager',
    storageBucket: 'truthy-wifi-manager.firebasestorage.app',
  );
}

================
File: main.dart
================
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_core/firebase_core.dart';
import 'database/repository/database_repository.dart';
import 'firebase_options.dart';
import 'package:flutter_timezone/flutter_timezone.dart';
import 'app_router.dart';
import 'package:timezone/data/latest_all.dart' as tz;
import 'package:timezone/timezone.dart' as tz;
import 'services/subscription_notification_service.dart';
class MyApp extends ConsumerWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return MaterialApp(
      onGenerateRoute: (settings) => AppRouter.onGenerateRoute(settings, ref),
      routes: AppRouter.routes,
      title: 'Truthy WiFi Manager',
      theme: ThemeData(
        useMaterial3: true,
        brightness: Brightness.dark,
        scaffoldBackgroundColor: const Color(0xFF1A1A1A),
        colorScheme: const ColorScheme.dark(
          primary: Color(0xFF1E88E5),
          secondary: Color(0xFF4CAF50),
          surface: Colors.black87,
          background: Color(0xFF1A1A1A),
        ),
        cardTheme: CardTheme(
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          color: Colors.white.withOpacity(0.1),
        ),
        appBarTheme: AppBarTheme(
          backgroundColor: Colors.black.withOpacity(0.2),
          elevation: 0,
          centerTitle: false,
        ),
        textTheme: const TextTheme(
          headlineMedium: TextStyle(
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
          titleLarge: TextStyle(
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
          bodyLarge: TextStyle(color: Colors.white70),
          bodyMedium: TextStyle(color: Colors.white70),
        ),
      ),
      darkTheme: ThemeData(
        useMaterial3: true,
        brightness: Brightness.dark,
        scaffoldBackgroundColor: const Color(0xFF1A1A1A),
        colorScheme: const ColorScheme.dark(
          primary: Color(0xFF1E88E5),
          secondary: Color(0xFF4CAF50),
          surface: Colors.black87,
          background: Color(0xFF1A1A1A),
        ),
        cardTheme: CardTheme(
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          color: Colors.white.withOpacity(0.1),
        ),
        appBarTheme: AppBarTheme(
          backgroundColor: Colors.black.withOpacity(0.2),
          elevation: 0,
          centerTitle: false,
        ),
        textTheme: const TextTheme(
          headlineMedium: TextStyle(
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
          titleLarge: TextStyle(
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
          bodyLarge: TextStyle(color: Colors.white70),
          bodyMedium: TextStyle(color: Colors.white70),
        ),
      ),
      themeMode: ThemeMode.dark,
    );
  }
}
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  await _configureLocalTimeZone();
  await Future.wait([SubscriptionNotificationService.initialize()]);
  await SubscriptionNotificationService.clearExpiredNotifications();
  final dbRepo = DatabaseRepository();
  await dbRepo.scheduleNotifications();
  runApp(const ProviderScope(child: MyApp()));
}
Future<void> _configureLocalTimeZone() async {
  if (kIsWeb || Platform.isLinux) {
    return;
  }
  tz.initializeTimeZones();
  if (Platform.isWindows) {
    return;
  }
  final String timeZoneName = await FlutterTimezone.getLocalTimezone();
  tz.setLocalLocation(tz.getLocation(timeZoneName));
}
