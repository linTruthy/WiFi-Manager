This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-28T22:58:46.905Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
- Code comments have been removed.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
database/
  models/
    customer.dart
    payment.dart
    plan.dart
  repository/
    database_repository.dart
providers/
  customer_provider.dart
  database_provider.dart
  notification_provider.dart
  payment_provider.dart
  subscription_provider.dart
screens/
  add_customer_screen.dart
  customer_detail_screen.dart
  customers_screen.dart
  edit_customer_screen.dart
  expiring_subscriptions_screen.dart
  home_screen.dart
  payments_screen.dart
services/
  notification_service.dart
  receipt_service.dart
  subscription_notification_service.dart
widgets/
  add_payment_dialog.dart
  expiring_subscriptions_banner.dart
  receipt_button.dart
main.dart

================================================================
Files
================================================================

================
File: database/models/customer.dart
================
import 'package:isar/isar.dart';
import 'package:myapp/database/models/plan.dart';
part 'customer.g.dart';
@Collection(inheritance: false)
class Customer {
  Id id = Isar.autoIncrement;
  @Index(type: IndexType.value)
  String name;
  String contact;
  bool isActive;
  @Index(type: IndexType.value)
  String wifiName;
  String currentPassword;
  DateTime subscriptionStart;
  DateTime subscriptionEnd;
  @Enumerated(EnumType.name)
  PlanType planType;
  Customer({
    required this.name,
    required this.contact,
    required this.isActive,
    required this.wifiName,
    required this.currentPassword,
    required this.subscriptionStart,
    required this.subscriptionEnd,
    required this.planType,
  });
  static String generateWifiName(String customerName) {
    final cleanName = customerName.replaceAll(RegExp(r'[^\w\s]'), '');
    // Split into words
    final words = cleanName.split(' ');
    if (words.length == 1) {
      return words[0].substring(0, words[0].length.clamp(3, 6)).toUpperCase();
    } else {
      String wifiName = words.map((word) => word[0]).join();
      if (wifiName.length < 4) {
        wifiName += (100 + DateTime.now().millisecondsSinceEpoch % 900).toString();
      }
      return wifiName.toUpperCase();
    }
  }
}

================
File: database/models/payment.dart
================
import 'package:isar/isar.dart';
import 'package:myapp/database/models/plan.dart';
part 'payment.g.dart';
@Collection(inheritance: false)
class Payment {
 Id id = Isar.autoIncrement;
  @Index(type: IndexType.value)
  DateTime paymentDate;
  double amount;
  String customerId;
  @Enumerated(EnumType.name)
  PlanType planType;
  bool isConfirmed;
  Payment({
    required this.paymentDate,
    required this.amount,
    required this.customerId,
    required this.planType,
    this.isConfirmed = false,
  });
}

================
File: database/models/plan.dart
================
import 'package:isar/isar.dart';
part 'plan.g.dart';
@Enumerated(EnumType.name)
enum PlanType {
  daily,
  weekly,
  monthly
}
@Collection()
class Plan {
  Id id = Isar.autoIncrement;
  @Enumerated(EnumType.name)
  PlanType type;
  double price;
  int durationInDays;
  Plan({
    required this.type,
    required this.price,
    required this.durationInDays,
  });
}

================
File: database/repository/database_repository.dart
================
import 'package:isar/isar.dart';
import 'package:myapp/database/models/customer.dart';
import 'package:myapp/database/models/payment.dart';
import 'package:path_provider/path_provider.dart';
import '../../services/notification_service.dart';
import '../models/plan.dart';
class DatabaseRepository {
  late Future<Isar> db;
  DatabaseRepository() {
    db = openDB();
  }
  Future<Isar> openDB() async {
    if (Isar.instanceNames.isEmpty) {
      final dir = await getApplicationDocumentsDirectory();
      return await Isar.open(
        [CustomerSchema, PlanSchema, PaymentSchema],
        directory: dir.path,
        name: 'wifi_manager',
      );
    }
    return Future.value(Isar.getInstance());
  }
  Future<void> saveCustomer(Customer customer) async {
    final isar = await db;
    await isar.writeTxn(() async {
      await isar.customers.put(customer);
    });
  }
  Future<List<Customer>> getCustomersExpiringBefore(DateTime date) async {
    final isar = await db;
    return await isar.customers
        .filter()
        .isActiveEqualTo(true)
        .subscriptionEndLessThan(date)
        .findAll();
  }
  Future<List<Customer>> getActiveCustomers() async {
    final isar = await db;
    return await isar.customers.filter().isActiveEqualTo(true).findAll();
  }
  Future<List<Customer>> getExpiringCustomers() async {
    final tomorrow = DateTime.now().add(const Duration(days: 1));
    final isar = await db;
    return await isar.customers
        .filter()
        .isActiveEqualTo(true)
        .subscriptionEndLessThan(tomorrow)
        .findAll();
  }
  Future<void> savePayment(Payment payment) async {
    final isar = await db;
    await isar.writeTxn(() async {
      await isar.payments.put(payment);
    });
  }
  Future<List<Payment>> getRecentPayments() async {
    final isar = await db;
    return await isar.payments
        .filter()
        .paymentDateGreaterThan(
          DateTime.now().subtract(const Duration(days: 30)),
        )
        .findAll();
  }
}
extension NotificationExtension on DatabaseRepository {
  Future<void> schedulePaymentReminders() async {
    final customers = await getActiveCustomers();
    for (final customer in customers) {
      final daysUntilExpiry =
          customer.subscriptionEnd.difference(DateTime.now()).inDays;
      if (daysUntilExpiry <= 3 && daysUntilExpiry > 0) {
        final amount = _getPlanAmount(customer.planType);
        await NotificationService.schedulePaymentReminder(
          customerId: customer.id,
          customerName: customer.name,
          dueDate: customer.subscriptionEnd,
          amount: amount,
        );
      }
    }
  }
  double _getPlanAmount(PlanType planType) {
    switch (planType) {
      case PlanType.daily:
        return 2000.0;
      case PlanType.weekly:
        return 10000.0;
      case PlanType.monthly:
        return 35000.0;
    }
  }
}

================
File: providers/customer_provider.dart
================
import 'package:riverpod/riverpod.dart';
import '../database/models/customer.dart';
import 'database_provider.dart';
final customerProvider = FutureProvider.family<Customer?, String>((
  ref,
  customerId,
) async {
  final database = ref.watch(databaseProvider);
  final isar = await database.db;
  return await isar.customers.get(int.parse(customerId));
});

================
File: providers/database_provider.dart
================
import 'package:riverpod/riverpod.dart';
import '../database/models/customer.dart';
import '../database/models/payment.dart';
import '../database/repository/database_repository.dart';
final databaseProvider = Provider<DatabaseRepository>((ref) {
  return DatabaseRepository();
});
final activeCustomersProvider = FutureProvider<List<Customer>>((ref) async {
  final database = ref.watch(databaseProvider);
  return database.getActiveCustomers();
});
final expiringCustomersProvider = FutureProvider<List<Customer>>((ref) async {
  final database = ref.watch(databaseProvider);
  return database.getExpiringCustomers();
});
final recentPaymentsProvider = FutureProvider<List<Payment>>((ref) async {
  final database = ref.watch(databaseProvider);
  return database.getRecentPayments();
});

================
File: providers/notification_provider.dart
================
import 'package:riverpod/riverpod.dart';
import '../services/notification_service.dart';
final notificationProvider = Provider<NotificationService>((ref) {
  return NotificationService();
});

================
File: providers/payment_provider.dart
================
import 'package:flutter/material.dart';
import 'package:isar/isar.dart';
import 'package:riverpod/riverpod.dart';
import '../database/models/payment.dart';
import '../database/models/plan.dart';
import 'database_provider.dart';
final selectedDateRangeProvider = StateProvider<DateTimeRange?>((ref) => null);
final filteredPaymentsProvider = FutureProvider<List<Payment>>((ref) async {
  final database = ref.watch(databaseProvider);
  final dateRange = ref.watch(selectedDateRangeProvider);
  if (dateRange == null) {
    return database.getRecentPayments();
  }
  final isar = await database.db;
  return isar.payments
      .filter()
      .paymentDateBetween(dateRange.start, dateRange.end)
      .findAll();
});
final paymentSummaryProvider = FutureProvider<Map<String, double>>((ref) async {
  final payments = await ref.watch(filteredPaymentsProvider.future);
  return {
    'daily': payments
        .where((p) => p.planType == PlanType.daily)
        .fold(0, (sum, p) => sum + p.amount),
    'weekly': payments
        .where((p) => p.planType == PlanType.weekly)
        .fold(0, (sum, p) => sum + p.amount),
    'monthly': payments
        .where((p) => p.planType == PlanType.monthly)
        .fold(0, (sum, p) => sum + p.amount),
    'total': payments.fold(0, (sum, p) => sum + p.amount),
  };
});

================
File: providers/subscription_provider.dart
================
import 'package:riverpod/riverpod.dart';
import '../database/models/customer.dart';
import 'database_provider.dart';
final expiringSubscriptionsProvider = StreamProvider<List<Customer>>((ref) async* {
  final database = ref.watch(databaseProvider);
  while (true) {
    final threeDaysFromNow = DateTime.now().add(const Duration(days: 3));
    final expiringCustomers = await database.getCustomersExpiringBefore(threeDaysFromNow);
    yield expiringCustomers;
    await Future.delayed(const Duration(minutes: 15));
  }
});

================
File: screens/add_customer_screen.dart
================
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../database/models/customer.dart';
import '../database/models/plan.dart';
import '../providers/database_provider.dart';
class AddCustomerScreen extends ConsumerStatefulWidget {
  const AddCustomerScreen({super.key});
  @override
  ConsumerState<AddCustomerScreen> createState() => _AddCustomerScreenState();
}
class _AddCustomerScreenState extends ConsumerState<AddCustomerScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _contactController = TextEditingController();
  PlanType _selectedPlan = PlanType.monthly;
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Add Customer')),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            TextFormField(
              controller: _nameController,
              decoration: const InputDecoration(
                labelText: 'Name',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter a name';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _contactController,
              decoration: const InputDecoration(
                labelText: 'Contact',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter contact info';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            DropdownButtonFormField<PlanType>(
              value: _selectedPlan,
              decoration: const InputDecoration(
                labelText: 'Plan',
                border: OutlineInputBorder(),
              ),
              items:
                  PlanType.values.map((plan) {
                    return DropdownMenuItem(
                      value: plan,
                      child: Text(plan.name),
                    );
                  }).toList(),
              onChanged: (PlanType? value) {
                if (value != null) {
                  setState(() {
                    _selectedPlan = value;
                  });
                }
              },
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _saveCustomer,
              child: const Text('Save Customer'),
            ),
          ],
        ),
      ),
    );
  }
  void _saveCustomer() async {
    if (_formKey.currentState?.validate() ?? false) {
      final customer = Customer(
        wifiName: '',
        name: _nameController.text,
        contact: _contactController.text,
        isActive: true,
        currentPassword: _generatePassword(),
        subscriptionStart: DateTime.now(),
        subscriptionEnd: _calculateEndDate(),
        planType: _selectedPlan,
      );
      try {
        await ref.read(databaseProvider).saveCustomer(customer);
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Customer saved successfully')),
          );
          Navigator.pop(context);
          ref.invalidate(activeCustomersProvider);
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(
            context,
          ).showSnackBar(SnackBar(content: Text('Error saving customer: $e')));
        }
      }
    }
  }
  String _generatePassword() {
    return 'temp-pass-${Random().nextInt(9999)}';
  }
  DateTime _calculateEndDate() {
    switch (_selectedPlan) {
      case PlanType.daily:
        return DateTime.now().add(const Duration(days: 1));
      case PlanType.weekly:
        return DateTime.now().add(const Duration(days: 7));
      case PlanType.monthly:
        return DateTime.now().add(const Duration(days: 30));
    }
  }
}

================
File: screens/customer_detail_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:myapp/database/models/customer.dart';
import 'package:myapp/screens/edit_customer_screen.dart';
import 'package:myapp/widgets/add_payment_dialog.dart';
class CustomerDetailScreen extends ConsumerWidget {
  final Customer customer;
  const CustomerDetailScreen({
    super.key,
    required this.customer,
  });
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final daysUntilExpiry = customer.subscriptionEnd.difference(DateTime.now()).inDays;
    final isExpiring = daysUntilExpiry <= 3;
    return Scaffold(
      appBar: AppBar(
        title: Text(customer.name),
        actions: [
          IconButton(
            icon: const Icon(Icons.edit),
            onPressed: () => Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => EditCustomerScreen(customer: customer),
              ),
            ),
          ),
        ],
      ),
      body: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          if (isExpiring)
            Card(
              color: Colors.orange.shade100,
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Row(
                  children: [
                    const Icon(Icons.warning_amber_rounded, color: Colors.orange),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'Subscription expires in $daysUntilExpiry days',
                        style: const TextStyle(color: Colors.orange),
                      ),
                    ),
                    TextButton(
                      onPressed: () => showDialog(
                        context: context,
                        builder: (context) => const AddPaymentDialog(),
                      ),
                      child: const Text('RENEW'),
                    ),
                  ],
                ),
              ),
            ),
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildDetailRow('Contact', customer.contact),
                  const Divider(),
                  _buildDetailRow('WiFi Name', customer.wifiName),
                  const Divider(),
                  _buildDetailRow('Password', customer.currentPassword),
                  const Divider(),
                  _buildDetailRow('Status', customer.isActive ? 'Active' : 'Inactive'),
                  const Divider(),
                  _buildDetailRow('Plan', customer.planType.name),
                  const Divider(),
                  _buildDetailRow(
                    'Subscription Start',
                    DateFormat('MMM d, y').format(customer.subscriptionStart),
                  ),
                  const Divider(),
                  _buildDetailRow(
                    'Subscription End',
                    DateFormat('MMM d, y').format(customer.subscriptionEnd),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () => showDialog(
          context: context,
          builder: (context) => const AddPaymentDialog(),
        ),
        icon: const Icon(Icons.payment),
        label: const Text('Add Payment'),
      ),
    );
  }
  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: const TextStyle(
              fontWeight: FontWeight.bold,
              color: Colors.grey,
            ),
          ),
          Text(
            value,
            style: const TextStyle(fontSize: 16),
          ),
        ],
      ),
    );
  }
}

================
File: screens/customers_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../database/models/customer.dart';
import '../providers/database_provider.dart';
class CustomersScreen extends ConsumerWidget {
  const CustomersScreen({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final customersAsync = ref.watch(activeCustomersProvider);
    return Scaffold(
      appBar: AppBar(title: const Text('Active Customers')),
      body: customersAsync.when(
        data:
            (customers) => ListView.builder(
              itemCount: customers.length,
              itemBuilder: (context, index) {
                final customer = customers[index];
                return CustomerListTile(customer: customer);
              },
            ),
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text('Error: $error')),
      ),
    );
  }
}
class CustomerListTile extends ConsumerWidget {
  final Customer customer;
  const CustomerListTile({super.key, required this.customer});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return ListTile(
      onTap:
          () => Navigator.pushNamed(
            context,
            '/customer/${customer.id}',
            arguments: customer,
          ),
      title: Text(customer.name),
      subtitle: Text(
        'Expires: ${DateFormat('MMM dd, yyyy').format(customer.subscriptionEnd)}',
      ),
      trailing: IconButton(
        icon: const Icon(Icons.edit),
        onPressed:
            () => Navigator.pushNamed(
              context,
              '/edit-customer',
              arguments: customer,
            ),
      ),
    );
  }
}

================
File: screens/edit_customer_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:myapp/database/models/customer.dart';
import '../database/models/plan.dart';
import '../providers/database_provider.dart';
class EditCustomerScreen extends ConsumerStatefulWidget {
  final Customer customer;
  const EditCustomerScreen({
    super.key,
    required this.customer,
  });
  @override
  ConsumerState<EditCustomerScreen> createState() => _EditCustomerScreenState();
}
class _EditCustomerScreenState extends ConsumerState<EditCustomerScreen> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameController;
  late TextEditingController _contactController;
  late TextEditingController _wifiNameController;
  late TextEditingController _passwordController;
  late bool _isActive;
  late PlanType _selectedPlan;
  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.customer.name);
    _contactController = TextEditingController(text: widget.customer.contact);
    _wifiNameController = TextEditingController(text: widget.customer.wifiName);
    _passwordController = TextEditingController(text: widget.customer.currentPassword);
    _isActive = widget.customer.isActive;
    _selectedPlan = widget.customer.planType;
  }
  @override
  void dispose() {
    _nameController.dispose();
    _contactController.dispose();
    _wifiNameController.dispose();
    _passwordController.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Edit Customer'),
        actions: [
          IconButton(
            icon: const Icon(Icons.save),
            onPressed: _saveCustomer,
          ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            TextFormField(
              controller: _nameController,
              decoration: const InputDecoration(
                labelText: 'Name',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter a name';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _contactController,
              decoration: const InputDecoration(
                labelText: 'Contact',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter contact info';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _wifiNameController,
              decoration: const InputDecoration(
                labelText: 'WiFi Name',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter WiFi name';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _passwordController,
              decoration: const InputDecoration(
                labelText: 'Password',
                border: OutlineInputBorder(),
                suffixIcon: Icon(Icons.wifi_password),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter password';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            SwitchListTile(
              title: const Text('Active Customer'),
              value: _isActive,
              onChanged: (value) => setState(() => _isActive = value),
            ),
            const SizedBox(height: 16),
            DropdownButtonFormField<PlanType>(
              value: _selectedPlan,
              decoration: const InputDecoration(
                labelText: 'Plan',
                border: OutlineInputBorder(),
              ),
              items: PlanType.values.map((plan) {
                return DropdownMenuItem(
                  value: plan,
                  child: Text(plan.name),
                );
              }).toList(),
              onChanged: (PlanType? value) {
                if (value != null) {
                  setState(() => _selectedPlan = value);
                }
              },
            ),
          ],
        ),
      ),
    );
  }
  void _saveCustomer() async {
    if (_formKey.currentState?.validate() ?? false) {
      final updatedCustomer = Customer(
        name: _nameController.text,
        contact: _contactController.text,
        isActive: _isActive,
        wifiName: _wifiNameController.text,
        currentPassword: _passwordController.text,
        subscriptionStart: widget.customer.subscriptionStart,
        subscriptionEnd: widget.customer.subscriptionEnd,
        planType: _selectedPlan,
      )..id = widget.customer.id;
      try {
        await ref.read(databaseProvider).saveCustomer(updatedCustomer);
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Customer updated successfully')),
          );
          Navigator.pop(context);
          ref.invalidate(activeCustomersProvider);
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error updating customer: $e')),
          );
        }
      }
    }
  }
}

================
File: screens/expiring_subscriptions_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:myapp/providers/subscription_provider.dart';
import 'package:url_launcher/url_launcher.dart';
import '../database/models/customer.dart';
class ExpiringSubscriptionsScreen extends ConsumerWidget {
  const ExpiringSubscriptionsScreen({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final expiringSubscriptions = ref.watch(expiringSubscriptionsProvider);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Expiring Subscriptions'),
      ),
      body: expiringSubscriptions.when(
        data: (customers) => customers.isEmpty
            ? const Center(child: Text('No expiring subscriptions'))
            : ListView.builder(
                itemCount: customers.length,
                itemBuilder: (context, index) {
                  final customer = customers[index];
                  final daysUntilExpiry = customer.subscriptionEnd
                      .difference(DateTime.now())
                      .inDays;
                  return ListTile(
                    leading: CircleAvatar(
                      backgroundColor: _getExpiryColor(daysUntilExpiry),
                      child: Text(
                        daysUntilExpiry.toString(),
                        style: const TextStyle(color: Colors.white),
                      ),
                    ),
                    title: Text(customer.name),
                    subtitle: Text(
                      'Expires: ${DateFormat('MMM d, y').format(customer.subscriptionEnd)}\n'
                      'Plan: ${customer.planType.name}',
                    ),
                    isThreeLine: true,
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        IconButton(
                          icon: const Icon(Icons.phone),
                          onPressed: () => _makeCall(customer.contact),
                        ),
                        IconButton(
                          icon: const Icon(Icons.message),
                          onPressed: () => _sendMessage(customer.contact),
                        ),
                      ],
                    ),
                    onTap: () => _showRenewalDialog(context, ref, customer),
                  );
                },
              ),
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text('Error: $error')),
      ),
    );
  }
  Color _getExpiryColor(int days) {
    if (days <= 1) return Colors.red;
    if (days <= 2) return Colors.orange;
    return Colors.yellow.shade700;
  }
  Future<void> _makeCall(String contact) async {
    final url = Uri.parse('tel:$contact');
    if (await canLaunchUrl(url)) {
      await launchUrl(url);
    }
  }
  Future<void> _sendMessage(String contact) async {
    final url = Uri.parse('sms:$contact');
    if (await canLaunchUrl(url)) {
      await launchUrl(url);
    }
  }
  Future<void> _showRenewalDialog(
    BuildContext context,
    WidgetRef ref,
    Customer customer,
  ) async {
    return showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Renew Subscription'),
        content: Text('Renew ${customer.name}\'s ${customer.planType.name} plan?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('CANCEL'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              Navigator.pushNamed(
                context,
                '/add-payment',
                arguments: customer,
              );
            },
            child: const Text('RENEW'),
          ),
        ],
      ),
    );
  }
}

================
File: screens/home_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../providers/database_provider.dart';
import '../widgets/expiring_subscriptions_banner.dart';
class HomeScreen extends ConsumerWidget {
  const HomeScreen({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      appBar: AppBar(title: const Text('WiFi Manager')),
      body: Column(
        children: [
          const ExpiringSubscriptionsBanner(),
          Expanded(
            child: GridView.count(
              padding: const EdgeInsets.all(8),
              crossAxisCount: 2,
              mainAxisSpacing: 16,
              crossAxisSpacing: 16,
              children: [
                _DashboardCard(
                  title: 'Active Customers',
                  icon: Icons.people,
                  onTap: () => Navigator.pushNamed(context, '/customers'),
                  content: Consumer(
                    builder: (context, ref, child) {
                      final customersAsync = ref.watch(activeCustomersProvider);
                      return customersAsync.when(
                        data:
                            (customers) => Text(
                              customers.length.toString(),
                              style: Theme.of(context).textTheme.headlineMedium,
                            ),
                        loading: () => const CircularProgressIndicator(),
                        error: (_, __) => const Icon(Icons.error),
                      );
                    },
                  ),
                ),
                _DashboardCard(
                  title: 'Expiring Soon',
                  icon: Icons.warning,
                  onTap:
                      () => Navigator.pushNamed(
                        context,
                        '/expiring-subscriptions',
                      ),
                  content: Consumer(
                    builder: (context, ref, child) {
                      final expiringAsync = ref.watch(
                        expiringCustomersProvider,
                      );
                      return expiringAsync.when(
                        data:
                            (customers) => Text(
                              customers.length.toString(),
                              style: Theme.of(context).textTheme.headlineMedium,
                            ),
                        loading: () => const CircularProgressIndicator(),
                        error: (_, __) => const Icon(Icons.error),
                      );
                    },
                  ),
                ),
                _DashboardCard(
                  title: 'Add Customer',
                  icon: Icons.person_add,
                  onTap: () => Navigator.pushNamed(context, '/add-customer'),
                ),
                _DashboardCard(
                  title: 'Recent Payments',
                  icon: Icons.payments,
                  onTap: () => Navigator.pushNamed(context, '/payments'),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
class _DashboardCard extends StatelessWidget {
  final String title;
  final IconData icon;
  final VoidCallback onTap;
  final Widget? content;
  const _DashboardCard({
    required this.title,
    required this.icon,
    required this.onTap,
    this.content,
  });
  @override
  Widget build(BuildContext context) {
    return Card(
      child: InkWell(
        onTap: onTap,
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(icon, size: 32),
              const SizedBox(height: 8),
              Text(title),
              if (content != null) ...[const SizedBox(height: 8), content!],
            ],
          ),
        ),
      ),
    );
  }
}

================
File: screens/payments_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:myapp/providers/payment_provider.dart';
import '../database/models/payment.dart';
import '../providers/customer_provider.dart';
import '../widgets/add_payment_dialog.dart';
import '../widgets/receipt_button.dart';
class PaymentsScreen extends ConsumerWidget {
  const PaymentsScreen({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final paymentsAsync = ref.watch(filteredPaymentsProvider);
    final summaryAsync = ref.watch(paymentSummaryProvider);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Payment History'),
        actions: [
          IconButton(
            icon: const Icon(Icons.date_range),
            onPressed: () => _showDateRangePicker(context, ref),
          ),
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: () => _showAddPaymentDialog(context, ref),
          ),
        ],
      ),
      body: Column(
        children: [
          Consumer(
            builder: (context, ref, child) {
              final dateRange = ref.watch(selectedDateRangeProvider);
              if (dateRange == null) return const SizedBox.shrink();
              return Padding(
                padding: const EdgeInsets.all(8.0),
                child: Chip(
                  label: Text(
                    '${DateFormat('MMM d').format(dateRange.start)} - '
                    '${DateFormat('MMM d').format(dateRange.end)}',
                  ),
                  onDeleted:
                      () =>
                          ref.read(selectedDateRangeProvider.notifier).state =
                              null,
                ),
              );
            },
          ),
          _PaymentSummaryCard(summaryAsync: summaryAsync),
          Expanded(
            child: paymentsAsync.when(
              data:
                  (payments) =>
                      payments.isEmpty
                          ? const Center(child: Text('No payments found'))
                          : ListView.builder(
                            itemCount: payments.length,
                            itemBuilder:
                                (context, index) =>
                                    _PaymentListTile(payment: payments[index]),
                          ),
              loading: () => const Center(child: CircularProgressIndicator()),
              error: (error, stack) => Center(child: Text('Error: $error')),
            ),
          ),
        ],
      ),
    );
  }
  Future<void> _showDateRangePicker(BuildContext context, WidgetRef ref) async {
    final dateRange = await showDateRangePicker(
      context: context,
      firstDate: DateTime.now().subtract(const Duration(days: 365)),
      lastDate: DateTime.now(),
      currentDate: DateTime.now(),
    );
    if (dateRange != null) {
      ref.read(selectedDateRangeProvider.notifier).state = dateRange;
    }
  }
  Future<void> _showAddPaymentDialog(BuildContext context, WidgetRef ref) {
    return showDialog(
      context: context,
      builder: (context) => const AddPaymentDialog(),
    );
  }
}
class _PaymentSummaryCard extends StatelessWidget {
  final AsyncValue<Map<String, double>> summaryAsync;
  const _PaymentSummaryCard({required this.summaryAsync});
  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.all(8),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: summaryAsync.when(
          data:
              (summary) => Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Total Revenue: UGX ${summary['total']?.toStringAsFixed(0)}',
                    style: Theme.of(context).textTheme.titleLarge,
                  ),
                  const Divider(),
                  _SummaryRow(
                    title: 'Daily Plans:',
                    amount: summary['daily'] ?? 0,
                  ),
                  _SummaryRow(
                    title: 'Weekly Plans:',
                    amount: summary['weekly'] ?? 0,
                  ),
                  _SummaryRow(
                    title: 'Monthly Plans:',
                    amount: summary['monthly'] ?? 0,
                  ),
                ],
              ),
          loading: () => const Center(child: CircularProgressIndicator()),
          error: (error, stack) => Center(child: Text('Error: $error')),
        ),
      ),
    );
  }
}
class _SummaryRow extends StatelessWidget {
  final String title;
  final double amount;
  const _SummaryRow({required this.title, required this.amount});
  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [Text(title), Text('UGX ${amount.toStringAsFixed(0)}')],
      ),
    );
  }
}
class _PaymentListTile extends ConsumerWidget {
  final Payment payment;
  const _PaymentListTile({required this.payment});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final customerAsync = ref.watch(customerProvider(payment.customerId));
    return ListTile(
      leading: Icon(
        payment.isConfirmed ? Icons.check_circle : Icons.pending,
        color: payment.isConfirmed ? Colors.green : Colors.orange,
      ),
      title: customerAsync.when(
        data: (customer) => Text(customer!.name),
        loading: () => const Text('Loading...'),
        error: (_, __) => const Text('Unknown Customer'),
      ),
      subtitle: Text(
        '${payment.planType.name} - ${DateFormat('MMM d, y').format(payment.paymentDate)}',
      ),
      trailing: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            'UGX ${payment.amount.toStringAsFixed(0)}',
            style: Theme.of(context).textTheme.titleMedium,
          ),
          ReceiptButton(payment: payment),
        ],
      ),
    );
  }
}

================
File: services/notification_service.dart
================
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
class NotificationService {
  static final FlutterLocalNotificationsPlugin _notifications =
      FlutterLocalNotificationsPlugin();
  static Future<void> initialize() async {
    const initializationSettings = InitializationSettings(
      android: AndroidInitializationSettings('@mipmap/ic_launcher'),
      iOS: DarwinInitializationSettings(),
    );
    await _notifications.initialize(initializationSettings);
  }
  static Future<void> schedulePaymentReminder({
    required int customerId,
    required String customerName,
    required DateTime dueDate,
    required double amount,
  }) async {
    final id = customerId.hashCode;
    final androidDetails = AndroidNotificationDetails(
      'payment_reminders',
      'Payment Reminders',
      channelDescription: 'Notifications for upcoming payment due dates',
      importance: Importance.high,
      priority: Priority.high,
    );
    final notificationDetails = NotificationDetails(
      android: androidDetails,
      iOS: const DarwinNotificationDetails(),
    );
    await _notifications.zonedSchedule(
      androidScheduleMode: AndroidScheduleMode.inexactAllowWhileIdle,
      id,
      'Payment Due Tomorrow',
      'Reminder: $customerName\'s payment of \$${amount.toStringAsFixed(2)} is due tomorrow',
      tz.TZDateTime.from(dueDate, tz.local).subtract(const Duration(days: 1)),
      notificationDetails,
      uiLocalNotificationDateInterpretation:
          UILocalNotificationDateInterpretation.absoluteTime,
    );
  }
}

================
File: services/receipt_service.dart
================
import 'dart:io';
import 'package:intl/intl.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:share_plus/share_plus.dart';
import '../database/models/customer.dart';
import '../database/models/payment.dart';
class ReceiptService {
  static final _currency = NumberFormat.currency(
    symbol: 'UGX ',
    decimalDigits: 0,
  );
  static Future<void> generateAndShareReceipt({
    required Payment payment,
    required Customer customer,
  }) async {
    final pdf = pw.Document();
    final titleStyle = pw.TextStyle(
      font: pw.Font.helveticaBold(),
      fontSize: 24,
      color: PdfColors.blue900,
    );
    final headerStyle = pw.TextStyle(
      font: pw.Font.helveticaBold(),
      fontSize: 14,
      color: PdfColors.blue900,
    );
    final subtitleStyle = pw.TextStyle(
      font: pw.Font.helvetica(),
      fontSize: 12,
      color: PdfColors.grey800,
    );
    final labelStyle = pw.TextStyle(
      font: pw.Font.helveticaBold(),
      fontSize: 10,
      color: PdfColors.grey700,
    );
    final valueStyle = pw.TextStyle(
      font: pw.Font.helvetica(),
      fontSize: 10,
      color: PdfColors.black,
    );
    final noteStyle = pw.TextStyle(
      font: pw.Font.helvetica(),
      fontSize: 10,
      color: PdfColors.grey700,
      fontStyle: pw.FontStyle.italic,
    );
    pdf.addPage(
      pw.Page(
        pageFormat: PdfPageFormat.a4,
        build:
            (context) => pw.Container(
              padding: const pw.EdgeInsets.all(40),
              decoration: pw.BoxDecoration(
                border: pw.Border.all(color: PdfColors.grey300, width: 1),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Row(
                    mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                    children: [
                      pw.Column(
                        crossAxisAlignment: pw.CrossAxisAlignment.start,
                        children: [
                          pw.Text('TRUTHY SYSTEMS', style: titleStyle),
                          pw.SizedBox(height: 4),
                          pw.Text(
                            'Internet Service Provider',
                            style: subtitleStyle,
                          ),
                        ],
                      ),
                      pw.Container(
                        padding: const pw.EdgeInsets.all(10),
                        decoration: pw.BoxDecoration(
                          color: PdfColors.blue50,
                          borderRadius: const pw.BorderRadius.all(
                            pw.Radius.circular(4),
                          ),
                        ),
                        child: pw.Text('RECEIPT', style: headerStyle),
                      ),
                    ],
                  ),
                  pw.SizedBox(height: 20),
                  pw.Container(
                    padding: const pw.EdgeInsets.all(10),
                    color: PdfColors.grey100,
                    child: pw.Row(
                      mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                      children: [
                        pw.Column(
                          crossAxisAlignment: pw.CrossAxisAlignment.start,
                          children: [
                            pw.Text('Receipt No:', style: labelStyle),
                            pw.SizedBox(height: 4),
                            pw.Text('${payment.id}', style: valueStyle),
                          ],
                        ),
                        pw.Column(
                          crossAxisAlignment: pw.CrossAxisAlignment.end,
                          children: [
                            pw.Text('Date:', style: labelStyle),
                            pw.SizedBox(height: 4),
                            pw.Text(
                              DateFormat(
                                'MMMM d, y',
                              ).format(payment.paymentDate),
                              style: valueStyle,
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                  pw.SizedBox(height: 20),
                  pw.Container(
                    width: double.infinity,
                    padding: const pw.EdgeInsets.all(10),
                    child: pw.Column(
                      crossAxisAlignment: pw.CrossAxisAlignment.start,
                      children: [
                        pw.Text('CUSTOMER DETAILS', style: headerStyle),
                        pw.SizedBox(height: 10),
                        _buildInfoRow(
                          'Customer Name',
                          customer.name,
                          labelStyle,
                          valueStyle,
                        ),
                        _buildInfoRow(
                          'Contact',
                          customer.contact,
                          labelStyle,
                          valueStyle,
                        ),
                        _buildInfoRow(
                          'Subscription Period',
                          '${DateFormat('MMM d, y').format(customer.subscriptionStart)} - ${DateFormat('MMM d, y').format(customer.subscriptionEnd)}',
                          labelStyle,
                          valueStyle,
                        ),
                      ],
                    ),
                  ),
                  pw.SizedBox(height: 20),
                  // Payment Details
                  pw.Container(
                    padding: const pw.EdgeInsets.all(10),
                    color: PdfColors.grey100,
                    child: pw.Column(
                      crossAxisAlignment: pw.CrossAxisAlignment.start,
                      children: [
                        pw.Text('PAYMENT DETAILS', style: headerStyle),
                        pw.SizedBox(height: 10),
                        _buildInfoRow(
                          'Plan Type',
                          payment.planType.name.toUpperCase(),
                          labelStyle,
                          valueStyle,
                        ),
                        _buildInfoRow(
                          'Amount Paid',
                          _currency.format(payment.amount),
                          labelStyle,
                          valueStyle,
                        ),
                        _buildInfoRow(
                          'Payment Status',
                          payment.isConfirmed ? 'Confirmed' : 'Pending',
                          labelStyle,
                          valueStyle,
                        ),
                      ],
                    ),
                  ),
                  pw.SizedBox(height: 20),
                  pw.Container(
                    padding: const pw.EdgeInsets.all(10),
                    decoration: pw.BoxDecoration(
                      border: pw.Border.all(color: PdfColors.blue200),
                      borderRadius: const pw.BorderRadius.all(
                        pw.Radius.circular(4),
                      ),
                    ),
                    child: pw.Column(
                      crossAxisAlignment: pw.CrossAxisAlignment.start,
                      children: [
                        pw.Text('WIFI CREDENTIALS', style: headerStyle),
                        pw.SizedBox(height: 10),
                        _buildInfoRow(
                          'WiFi Name',
                          customer.wifiName,
                          labelStyle,
                          valueStyle,
                        ),
                        _buildInfoRow(
                          'Password',
                          customer.currentPassword,
                          labelStyle,
                          valueStyle,
                        ),
                        pw.SizedBox(height: 10),
                        pw.Text(
                          'Note: Connection is limited to 2 devices at a time with speeds up to 60Mbps',
                          style: noteStyle,
                        ),
                      ],
                    ),
                  ),
                  pw.Spacer(),
                  pw.Container(
                    padding: const pw.EdgeInsets.symmetric(vertical: 20),
                    decoration: const pw.BoxDecoration(
                      border: pw.Border(
                        top: pw.BorderSide(color: PdfColors.grey300),
                      ),
                    ),
                    child: pw.Column(
                      children: [
                        pw.Text(
                          'Thank you for choosing Truthy Systems!',
                          style: headerStyle.copyWith(color: PdfColors.blue700),
                          textAlign: pw.TextAlign.center,
                        ),
                        pw.SizedBox(height: 10),
                        pw.Text(
                          'For support, please contact: 0783009649',
                          style: valueStyle,
                          textAlign: pw.TextAlign.center,
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
      ),
    );
    final output = await getTemporaryDirectory();
    final file = File(
      '${output.path}/truthy_systems_receipt_${payment.id}.pdf',
    );
    await file.writeAsBytes(await pdf.save());
    await Share.shareXFiles(
      [XFile(file.path)],
      text: 'Payment Receipt - ${customer.name}',
      subject: 'Truthy Systems - Internet Service Receipt',
    );
  }
  static pw.Row _buildInfoRow(
    String label,
    String value,
    pw.TextStyle labelStyle,
    pw.TextStyle valueStyle,
  ) {
    return pw.Row(
      mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
      children: [
        pw.Text(label, style: labelStyle),
        pw.Text(value, style: valueStyle),
      ],
    );
  }
}

================
File: services/subscription_notification_service.dart
================
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:myapp/database/models/customer.dart';
import 'package:timezone/timezone.dart' as tz;
class SubscriptionNotificationService {
  static final FlutterLocalNotificationsPlugin _notifications =
      FlutterLocalNotificationsPlugin();
  static const String channelId = 'subscription_notifications';
  static const String channelName = 'Subscription Notifications';
  static const String channelDescription = 'Notifications for expiring subscriptions';
  static Future<void> initialize() async {
    const initializationSettings = InitializationSettings(
      android: AndroidInitializationSettings('@mipmap/ic_launcher'),
      iOS: DarwinInitializationSettings(
        requestAlertPermission: true,
        requestBadgePermission: true,
        requestSoundPermission: true,
      ),
    );
    await _notifications.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: (details) async {
        if (details.payload != null) {
        }
      },
    );
  }
  static Future<void> scheduleExpirationNotification(Customer customer) async {
    final daysUntilExpiry = customer.subscriptionEnd.difference(DateTime.now()).inDays;
    if (daysUntilExpiry <= 3 && daysUntilExpiry > 0) {
      final androidDetails = AndroidNotificationDetails(
        channelId,
        channelName,
        channelDescription: channelDescription,
        importance: Importance.high,
        priority: Priority.high,
        category: AndroidNotificationCategory.reminder,
      );
      final notificationDetails = NotificationDetails(
        android: androidDetails,
        iOS: const DarwinNotificationDetails(
          presentAlert: true,
          presentBadge: true,
          presentSound: true,
        ),
      );
      if (daysUntilExpiry == 3) {
        await _scheduleNotification(
          customer,
          'Subscription Expiring Soon',
          '${customer.name}\'s subscription expires in 3 days',
          notificationDetails,
        );
      } else if (daysUntilExpiry == 1) {
        await _scheduleNotification(
          customer,
          'Subscription Expires Tomorrow',
          '${customer.name}\'s subscription expires tomorrow',
          notificationDetails,
        );
      }
    }
  }
  static Future<void> _scheduleNotification(
    Customer customer,
    String title,
    String body,
    NotificationDetails details,
  ) async {
    await _notifications.zonedSchedule(
      customer.id.hashCode,
      title,
      body,
      tz.TZDateTime.now(tz.local).add(const Duration(minutes: 1)),
      details,
      androidScheduleMode: AndroidScheduleMode.inexactAllowWhileIdle,
      uiLocalNotificationDateInterpretation:
          UILocalNotificationDateInterpretation.absoluteTime,
      payload: customer.id.toString(),
    );
  }
}

================
File: widgets/add_payment_dialog.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:isar/isar.dart';
import '../database/models/payment.dart';
import '../database/models/plan.dart';
import '../database/models/customer.dart';
import '../providers/database_provider.dart';
import '../providers/payment_provider.dart';
class AddPaymentDialog extends ConsumerStatefulWidget {
  const AddPaymentDialog({super.key});
  @override
  ConsumerState<AddPaymentDialog> createState() => _AddPaymentDialogState();
}
class _AddPaymentDialogState extends ConsumerState<AddPaymentDialog> {
  final _formKey = GlobalKey<FormState>();
  String? _selectedCustomerId;
  PlanType _selectedPlan = PlanType.monthly;
  final _amountController = TextEditingController();
  DateTime _startDate = DateTime.now();
  @override
  Widget build(BuildContext context) {
    final customersAsync = ref.watch(activeCustomersProvider);
    return AlertDialog(
      title: const Text('Record Payment'),
      content: SingleChildScrollView(
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              customersAsync.when(
                data:
                    (customers) => DropdownButtonFormField<String>(
                      value: _selectedCustomerId,
                      decoration: const InputDecoration(
                        labelText: 'Customer',
                        border: OutlineInputBorder(),
                      ),
                      items:
                          customers.map((customer) {
                            return DropdownMenuItem(
                              value: customer.id.toString(),
                              child: Text(customer.name),
                            );
                          }).toList(),
                      onChanged:
                          (value) =>
                              setState(() => _selectedCustomerId = value),
                      validator:
                          (value) =>
                              value == null ? 'Please select a customer' : null,
                    ),
                loading: () => const CircularProgressIndicator(),
                error: (_, __) => const Text('Error loading customers'),
              ),
              const SizedBox(height: 16),
              InkWell(
                onTap: () => _selectStartDate(context),
                child: InputDecorator(
                  decoration: const InputDecoration(
                    labelText: 'Start Date',
                    border: OutlineInputBorder(),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        '${_startDate.year}-${_startDate.month.toString().padLeft(2, '0')}-${_startDate.day.toString().padLeft(2, '0')}',
                      ),
                      const Icon(Icons.calendar_today),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),
              DropdownButtonFormField<PlanType>(
                value: _selectedPlan,
                decoration: const InputDecoration(
                  labelText: 'Plan Type',
                  border: OutlineInputBorder(),
                ),
                items:
                    PlanType.values.map((plan) {
                      return DropdownMenuItem(
                        value: plan,
                        child: Text(plan.name),
                      );
                    }).toList(),
                onChanged: (value) {
                  if (value != null) {
                    setState(() => _selectedPlan = value);
                    _updateAmount();
                  }
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _amountController,
                decoration: const InputDecoration(
                  labelText: 'Amount',
                  border: OutlineInputBorder(),
                  prefixText: 'UGX',
                ),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter an amount';
                  }
                  if (double.tryParse(value) == null) {
                    return 'Please enter a valid number';
                  }
                  return null;
                },
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('Cancel'),
        ),
        ElevatedButton(onPressed: _savePayment, child: const Text('Save')),
      ],
    );
  }
  Future<void> _selectStartDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _startDate,
      firstDate: DateTime.now().subtract(const Duration(days: 7)),
      lastDate: DateTime.now().add(const Duration(days: 7)),
    );
    if (picked != null && picked != _startDate) {
      setState(() {
        _startDate = picked;
      });
    }
  }
  String _generatePassword() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    final random = DateTime.now().millisecondsSinceEpoch;
    final password =
        List.generate(6, (index) {
          return chars[random % chars.length];
        }).join();
    return password;
  }
  void _updateAmount() {
    switch (_selectedPlan) {
      case PlanType.daily:
        _amountController.text = '2000';
        break;
      case PlanType.weekly:
        _amountController.text = '10000';
        break;
      case PlanType.monthly:
        _amountController.text = '35000';
        break;
    }
  }
  DateTime _calculateEndDate(DateTime startDate, PlanType planType) {
    switch (planType) {
      case PlanType.daily:
        return startDate.add(const Duration(days: 1));
      case PlanType.weekly:
        return startDate.add(const Duration(days: 7));
      case PlanType.monthly:
        return startDate.add(const Duration(days: 30));
    }
  }
  void _savePayment() async {
    if (_formKey.currentState?.validate() ?? false) {
      try {
        final isar = await ref.read(databaseProvider).db;
        await isar.writeTxn(() async {
          final customer = await isar.customers.get(
            int.parse(_selectedCustomerId!),
          );
          if (customer == null) throw Exception('Customer not found');
          final payment = Payment(
            paymentDate: DateTime.now(),
            amount: double.parse(_amountController.text),
            customerId: _selectedCustomerId!,
            planType: _selectedPlan,
            isConfirmed: true,
          );
          await isar.payments.put(payment);
          customer.subscriptionStart = _startDate;
          customer.subscriptionEnd = _calculateEndDate(
            _startDate,
            _selectedPlan,
          );
          customer.planType = _selectedPlan;
          final previousPayments =
              await isar.payments
                  .filter()
                  .customerIdEqualTo(_selectedCustomerId!)
                  .findAll();
          if (previousPayments.length <= 1) {
            customer.wifiName = Customer.generateWifiName(customer.name);
            customer.currentPassword = _generatePassword();
          }
          await isar.customers.put(customer);
        });
        if (mounted) {
          Navigator.pop(context);
          ref.invalidate(recentPaymentsProvider);
          ref.invalidate(paymentSummaryProvider);
          ref.invalidate(filteredPaymentsProvider);
          ref.invalidate(activeCustomersProvider);
          ref.invalidate(expiringCustomersProvider);
          final customer = await isar.customers.get(
            int.parse(_selectedCustomerId!),
          );
          if (customer != null) {
            showDialog(
              context: context,
              builder:
                  (context) => AlertDialog(
                    title: const Text('WiFi Credentials'),
                    content: Column(
                      mainAxisSize: MainAxisSize.min,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('WiFi Name: ${customer.wifiName}'),
                        const SizedBox(height: 8),
                        Text('Password: ${customer.currentPassword}'),
                      ],
                    ),
                    actions: [
                      TextButton(
                        onPressed: () => Navigator.pop(context),
                        child: const Text('OK'),
                      ),
                    ],
                  ),
            );
          }
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error recording payment: $e')),
          );
        }
      }
    }
  }
}

================
File: widgets/expiring_subscriptions_banner.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:myapp/providers/subscription_provider.dart';
class ExpiringSubscriptionsBanner extends ConsumerWidget {
  const ExpiringSubscriptionsBanner({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final expiringSubscriptions = ref.watch(expiringSubscriptionsProvider);
    return expiringSubscriptions.when(
      data: (customers) {
        if (customers.isEmpty) return const SizedBox.shrink();
        return MaterialBanner(
          content: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Expiring Subscriptions',
                style: Theme.of(context).textTheme.titleMedium,
              ),
              const SizedBox(height: 4),
              Text('${customers.length} subscriptions expiring soon'),
            ],
          ),
          leading: const Icon(
            Icons.warning_amber_rounded,
            color: Colors.orange,
          ),
          actions: [
            TextButton(
              onPressed:
                  () => Navigator.pushNamed(context, '/expiring-subscriptions'),
              child: const Text('VIEW ALL'),
            ),
          ],
        );
      },
      loading: () => const SizedBox.shrink(),
      error: (_, __) => const SizedBox.shrink(),
    );
  }
}

================
File: widgets/receipt_button.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:myapp/services/receipt_service.dart';
import '../database/models/payment.dart';
import '../providers/customer_provider.dart';
class ReceiptButton extends ConsumerWidget {
  final Payment payment;
  const ReceiptButton({
    super.key,
    required this.payment,
  });
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return IconButton(
      icon: const Icon(Icons.receipt_long),
      onPressed: () async {
        try {
          final customerAsync = await ref.read(customerProvider(payment.customerId).future);
          if (customerAsync != null) {
            await ReceiptService.generateAndShareReceipt(
              payment: payment,
              customer: customerAsync,
            );
          }
        } catch (e) {
          if (context.mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Error generating receipt: $e')),
            );
          }
        }
      },
    );
  }
}

================
File: main.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'screens/add_customer_screen.dart';
import 'screens/customer_detail_screen.dart';
import 'screens/customers_screen.dart';
import 'screens/edit_customer_screen.dart';
import 'screens/expiring_subscriptions_screen.dart';
import 'screens/home_screen.dart';
import 'screens/payments_screen.dart';
import 'services/notification_service.dart';
import 'services/subscription_notification_service.dart';
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await NotificationService.initialize();
  await SubscriptionNotificationService.initialize();
  runApp(const ProviderScope(child: MyApp()));
}
class MyApp extends StatelessWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      routes: {
        '/': (context) => const HomeScreen(),
        '/customers': (context) => const CustomersScreen(),
        '/add-customer': (context) => const AddCustomerScreen(),
        '/payments': (context) => const PaymentsScreen(),
        '/expiring-subscriptions': (context) => const ExpiringSubscriptionsScreen(),
        '/customer/:id': (context) {
  final customer =
  return CustomerDetailScreen(customer: customer);
},
'/edit-customer/:id': (context) {
  final customer =
  return EditCustomerScreen(customer: customer);
},
      },
      title: 'Flutter Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
    );
  }
}
