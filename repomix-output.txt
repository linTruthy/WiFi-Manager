This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-28T19:38:34.609Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
add_customer_screen.dart
customers_screen.dart
expiring_subscriptions_screen.dart
home_screen.dart
payments_screen.dart

================================================================
Files
================================================================

================
File: add_customer_screen.dart
================
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../database/models/customer.dart';
import '../database/models/plan.dart';
import '../providers/database_provider.dart';

class AddCustomerScreen extends ConsumerStatefulWidget {
  const AddCustomerScreen({super.key});

  @override
  ConsumerState<AddCustomerScreen> createState() => _AddCustomerScreenState();
}

class _AddCustomerScreenState extends ConsumerState<AddCustomerScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _contactController = TextEditingController();
  PlanType _selectedPlan = PlanType.monthly;
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add Customer'),
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            TextFormField(
              controller: _nameController,
              decoration: const InputDecoration(
                labelText: 'Name',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter a name';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _contactController,
              decoration: const InputDecoration(
                labelText: 'Contact',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter contact info';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            DropdownButtonFormField<PlanType>(
              value: _selectedPlan,
              decoration: const InputDecoration(
                labelText: 'Plan',
                border: OutlineInputBorder(),
              ),
              items: PlanType.values.map((plan) {
                return DropdownMenuItem(
                  value: plan,
                  child: Text(plan.name),
                );
              }).toList(),
              onChanged: (PlanType? value) {
                if (value != null) {
                  setState(() {
                    _selectedPlan = value;
                  });
                }
              },
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _saveCustomer,
              child: const Text('Save Customer'),
            ),
          ],
        ),
      ),
    );
  }

  void _saveCustomer() async {
    if (_formKey.currentState?.validate() ?? false) {
      final customer = Customer(
        name: _nameController.text,
        contact: _contactController.text,
        isActive: true,
        currentPassword: _generatePassword(),
        subscriptionStart: DateTime.now(),
        subscriptionEnd: _calculateEndDate(),
        planType: _selectedPlan,
      );

      try {
        await ref.read(databaseProvider).saveCustomer(customer);
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Customer saved successfully')),
          );
          Navigator.pop(context);
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error saving customer: $e')),
          );
        }
      }
    }
  }

  String _generatePassword() {
    // Implement your password generation logic here
    return 'temp-pass-${Random().nextInt(9999)}';
  }

  DateTime _calculateEndDate() {
    switch (_selectedPlan) {
      case PlanType.daily:
        return DateTime.now().add(const Duration(days: 1));
      case PlanType.weekly:
        return DateTime.now().add(const Duration(days: 7));
      case PlanType.monthly:
        return DateTime.now().add(const Duration(days: 30));
    }
  }
}

================
File: customers_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';

import '../database/models/customer.dart';
import '../providers/database_provider.dart';

class CustomersScreen extends ConsumerWidget {
  const CustomersScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final customersAsync = ref.watch(activeCustomersProvider);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Active Customers'),
      ),
      body: customersAsync.when(
        data: (customers) => ListView.builder(
          itemCount: customers.length,
          itemBuilder: (context, index) {
            final customer = customers[index];
            return CustomerListTile(customer: customer);
          },
        ),
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text('Error: $error')),
      ),
    );
  }
}

class CustomerListTile extends ConsumerWidget {
  final Customer customer;

  const CustomerListTile({
    super.key,
    required this.customer,
  });

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return ListTile(
      title: Text(customer.name),
      subtitle: Text(
        'Expires: ${DateFormat('MMM dd, yyyy').format(customer.subscriptionEnd)}',
      ),
      trailing: IconButton(
        icon: const Icon(Icons.edit),
        onPressed: () => Navigator.pushNamed(
          context,
          '/edit-customer',
          arguments: customer,
        ),
      ),
    );
  }
}

================
File: expiring_subscriptions_screen.dart
================
// providers/subscription_provider.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:myapp/providers/subscription_provider.dart';
import 'package:url_launcher/url_launcher.dart';

import '../database/models/customer.dart';

class ExpiringSubscriptionsScreen extends ConsumerWidget {
  const ExpiringSubscriptionsScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final expiringSubscriptions = ref.watch(expiringSubscriptionsProvider);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Expiring Subscriptions'),
      ),
      body: expiringSubscriptions.when(
        data: (customers) => customers.isEmpty
            ? const Center(child: Text('No expiring subscriptions'))
            : ListView.builder(
                itemCount: customers.length,
                itemBuilder: (context, index) {
                  final customer = customers[index];
                  final daysUntilExpiry = customer.subscriptionEnd
                      .difference(DateTime.now())
                      .inDays;

                  return ListTile(
                    leading: CircleAvatar(
                      backgroundColor: _getExpiryColor(daysUntilExpiry),
                      child: Text(
                        daysUntilExpiry.toString(),
                        style: const TextStyle(color: Colors.white),
                      ),
                    ),
                    title: Text(customer.name),
                    subtitle: Text(
                      'Expires: ${DateFormat('MMM d, y').format(customer.subscriptionEnd)}\n'
                      'Plan: ${customer.planType.name}',
                    ),
                    isThreeLine: true,
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        IconButton(
                          icon: const Icon(Icons.phone),
                          onPressed: () => _makeCall(customer.contact),
                        ),
                        IconButton(
                          icon: const Icon(Icons.message),
                          onPressed: () => _sendMessage(customer.contact),
                        ),
                      ],
                    ),
                    onTap: () => _showRenewalDialog(context, ref, customer),
                  );
                },
              ),
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text('Error: $error')),
      ),
    );
  }

  Color _getExpiryColor(int days) {
    if (days <= 1) return Colors.red;
    if (days <= 2) return Colors.orange;
    return Colors.yellow.shade700;
  }

  Future<void> _makeCall(String contact) async {
    final url = Uri.parse('tel:$contact');
    if (await canLaunchUrl(url)) {
      await launchUrl(url);
    }
  }

  Future<void> _sendMessage(String contact) async {
    final url = Uri.parse('sms:$contact');
    if (await canLaunchUrl(url)) {
      await launchUrl(url);
    }
  }

  Future<void> _showRenewalDialog(
    BuildContext context,
    WidgetRef ref,
    Customer customer,
  ) async {
    return showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Renew Subscription'),
        content: Text('Renew ${customer.name}\'s ${customer.planType.name} plan?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('CANCEL'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              Navigator.pushNamed(
                context,
                '/add-payment',
                arguments: customer,
              );
            },
            child: const Text('RENEW'),
          ),
        ],
      ),
    );
  }
}

================
File: home_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../providers/database_provider.dart';
import '../widgets/expiring_subscriptions_banner.dart';

class HomeScreen extends ConsumerWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('WiFi Manager'),
      ),
      body: GridView.count(
        padding: const EdgeInsets.all(16),
        crossAxisCount: 2,
        mainAxisSpacing: 16,
        crossAxisSpacing: 16,
        children: [
            const ExpiringSubscriptionsBanner(),
          _DashboardCard(
            title: 'Active Customers',
            icon: Icons.people,
            onTap: () => Navigator.pushNamed(context, '/customers'),
            content: Consumer(
              builder: (context, ref, child) {
                final customersAsync = ref.watch(activeCustomersProvider);
                return customersAsync.when(
                  data: (customers) => Text(
                    customers.length.toString(),
                    style: Theme.of(context).textTheme.headlineMedium,
                  ),
                  loading: () => const CircularProgressIndicator(),
                  error: (_, __) => const Icon(Icons.error),
                );
              },
            ),
          ),
          _DashboardCard(
            title: 'Expiring Soon',
            icon: Icons.warning,
            onTap: () => Navigator.pushNamed(context, '/expiring'),
            content: Consumer(
              builder: (context, ref, child) {
                final expiringAsync = ref.watch(expiringCustomersProvider);
                return expiringAsync.when(
                  data: (customers) => Text(
                    customers.length.toString(),
                    style: Theme.of(context).textTheme.headlineMedium,
                  ),
                  loading: () => const CircularProgressIndicator(),
                  error: (_, __) => const Icon(Icons.error),
                );
              },
            ),
          ),
          _DashboardCard(
            title: 'Add Customer',
            icon: Icons.person_add,
            onTap: () => Navigator.pushNamed(context, '/add-customer'),
          ),
          _DashboardCard(
            title: 'Recent Payments',
            icon: Icons.payments,
            onTap: () => Navigator.pushNamed(context, '/payments'),
          ),
        ],
      ),
    );
  }
}

class _DashboardCard extends StatelessWidget {
  final String title;
  final IconData icon;
  final VoidCallback onTap;
  final Widget? content;

  const _DashboardCard({
    required this.title,
    required this.icon,
    required this.onTap,
    this.content,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      child: InkWell(
        onTap: onTap,
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(icon, size: 32),
              const SizedBox(height: 8),
              Text(title),
              if (content != null) ...[
                const SizedBox(height: 8),
                content!,
              ],
            ],
          ),
        ),
      ),
    );
  }
}

================
File: payments_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:myapp/providers/payment_provider.dart';

import '../database/models/payment.dart';
import '../providers/customer_provider.dart';
import '../widgets/add_payment_dialog.dart';
import '../widgets/receipt_button.dart';

class PaymentsScreen extends ConsumerWidget {
  const PaymentsScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final paymentsAsync = ref.watch(filteredPaymentsProvider);
    final summaryAsync = ref.watch(paymentSummaryProvider);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Payment History'),
        actions: [
          IconButton(
            icon: const Icon(Icons.date_range),
            onPressed: () => _showDateRangePicker(context, ref),
          ),
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: () => _showAddPaymentDialog(context, ref),
          ),
        ],
      ),
      body: Column(
        children: [
          Consumer(
            builder: (context, ref, child) {
              final dateRange = ref.watch(selectedDateRangeProvider);
              if (dateRange == null) return const SizedBox.shrink();

              return Padding(
                padding: const EdgeInsets.all(8.0),
                child: Chip(
                  label: Text(
                    '${DateFormat('MMM d').format(dateRange.start)} - '
                    '${DateFormat('MMM d').format(dateRange.end)}',
                  ),
                  onDeleted:
                      () =>
                          ref.read(selectedDateRangeProvider.notifier).state =
                              null,
                ),
              );
            },
          ),
          _PaymentSummaryCard(summaryAsync: summaryAsync),
          Expanded(
            child: paymentsAsync.when(
              data:
                  (payments) =>
                      payments.isEmpty
                          ? const Center(child: Text('No payments found'))
                          : ListView.builder(
                            itemCount: payments.length,
                            itemBuilder:
                                (context, index) =>
                                    _PaymentListTile(payment: payments[index]),
                          ),
              loading: () => const Center(child: CircularProgressIndicator()),
              error: (error, stack) => Center(child: Text('Error: $error')),
            ),
          ),
        ],
      ),
    );
  }

  Future<void> _showDateRangePicker(BuildContext context, WidgetRef ref) async {
    final dateRange = await showDateRangePicker(
      context: context,
      firstDate: DateTime.now().subtract(const Duration(days: 365)),
      lastDate: DateTime.now(),
      currentDate: DateTime.now(),
    );

    if (dateRange != null) {
      ref.read(selectedDateRangeProvider.notifier).state = dateRange;
    }
  }

  Future<void> _showAddPaymentDialog(BuildContext context, WidgetRef ref) {
    return showDialog(
      context: context,
      builder: (context) => const AddPaymentDialog(),
    );
  }
}

class _PaymentSummaryCard extends StatelessWidget {
  final AsyncValue<Map<String, double>> summaryAsync;

  const _PaymentSummaryCard({required this.summaryAsync});

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.all(8),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: summaryAsync.when(
          data:
              (summary) => Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Total Revenue: \$${summary['total']?.toStringAsFixed(2)}',
                    style: Theme.of(context).textTheme.titleLarge,
                  ),
                  const Divider(),
                  _SummaryRow(
                    title: 'Daily Plans:',
                    amount: summary['daily'] ?? 0,
                  ),
                  _SummaryRow(
                    title: 'Weekly Plans:',
                    amount: summary['weekly'] ?? 0,
                  ),
                  _SummaryRow(
                    title: 'Monthly Plans:',
                    amount: summary['monthly'] ?? 0,
                  ),
                ],
              ),
          loading: () => const Center(child: CircularProgressIndicator()),
          error: (error, stack) => Center(child: Text('Error: $error')),
        ),
      ),
    );
  }
}

class _SummaryRow extends StatelessWidget {
  final String title;
  final double amount;

  const _SummaryRow({required this.title, required this.amount});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [Text(title), Text('\$${amount.toStringAsFixed(2)}')],
      ),
    );
  }
}
class _PaymentListTile extends ConsumerWidget {
  final Payment payment;

  const _PaymentListTile({required this.payment});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final customerAsync = ref.watch(customerProvider(payment.customerId));

    return ListTile(
      leading: Icon(
        payment.isConfirmed ? Icons.check_circle : Icons.pending,
        color: payment.isConfirmed ? Colors.green : Colors.orange,
      ),
      title: customerAsync.when(
        data: (customer) => Text(customer!.name),
        loading: () => const Text('Loading...'),
        error: (_, __) => const Text('Unknown Customer'),
      ),
      subtitle: Text(
        '${payment.planType.name} - ${DateFormat('MMM d, y').format(payment.paymentDate)}',
      ),
      trailing: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            '\$${payment.amount.toStringAsFixed(2)}',
            style: Theme.of(context).textTheme.titleMedium,
          ),
          ReceiptButton(payment: payment),
        ],
      ),
    );
  }
}
