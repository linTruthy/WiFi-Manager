This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where comments have been removed, empty lines have been removed, content has been compressed (code blocks are separated by ⋮---- delimiter).

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: **.g.dart, **/widgets, **.png, **.mp3
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Empty lines have been removed from all files
- Content has been compressed - code blocks are separated by ⋮---- delimiter

Additional Info:
----------------

================================================================
Directory Structure
================================================================
database/
  models/
    billing_cycle.dart
    customer.dart
    payment.dart
    plan.dart
    referral_stats.dart
    sync_status.dart
  repository/
    database_repository.dart
providers/
  active_customer_trend_provider.dart
  customer_provider.dart
  database_provider.dart
  notification_schedule_provider.dart
  payment_provider.dart
  referral_stats_provider.dart
  retention_provider.dart
  subscription_provider.dart
  syncing_provider.dart
screens/
  about_screen.dart
  add_customer_screen.dart
  billing_cycle_screen.dart
  customer_detail_screen.dart
  customer_share_view.dart
  customers_screen.dart
  downtime_input_screen.dart
  edit_customer_screen.dart
  expiring_subscriptions_screen.dart
  home_screen.dart
  how_to_screen.dart
  inactive_customers_screen.dart
  login_screen.dart
  payments_screen.dart
  referral_stats_screen.dart
  retention_screen.dart
  scheduled_reminders_screen.dart
  settings_screen.dart
services/
  ad_manager.dart
  app_preferences.dart
  auth_service.dart
  notification_scheduler.dart
  receipt_service.dart
  subscription_notification_service.dart
  subscription_widget_service.dart
app_router.dart
firebase_options.dart
main.dart
utils.dart

================================================================
Files
================================================================

================
File: database/models/billing_cycle.dart
================
class BillingCycle {
  String id;
  DateTime startDate;
  DateTime endDate;
  double wifiExpense;
  Map<String, double> customerPayments;
  BillingCycle({
    required this.startDate,
    required this.endDate,
    required this.wifiExpense,
    required this.customerPayments,
  }) : id = '';
  Map<String, dynamic> toJson() => {
    'startDate': startDate.toIso8601String(),
    'endDate': endDate.toIso8601String(),
    'wifiExpense': wifiExpense,
    'customerPayments': customerPayments,
  };
  static BillingCycle fromJson(String id, Map<String, dynamic> json) {
    return BillingCycle(
      startDate: DateTime.parse(json['startDate']),
      endDate: DateTime.parse(json['endDate']),
      wifiExpense: json['wifiExpense'] as double,
      customerPayments: Map<String, double>.from(json['customerPayments']),
    )..id = id;
  }
}

================
File: database/models/customer.dart
================
import 'dart:math';
import 'plan.dart';
class Customer {
  String id;
  String name;
  String contact;
  bool isActive;
  String wifiName;
  String currentPassword;
  DateTime subscriptionStart;
  DateTime subscriptionEnd;
  DateTime lastModified;
  PlanType planType;
  String? referredBy;
  DateTime? referralRewardApplied;
  String referralCode;
  Customer({
    required this.name,
    required this.contact,
    required this.isActive,
    required this.wifiName,
    required this.currentPassword,
    required this.subscriptionStart,
    required this.subscriptionEnd,
    required this.planType,
    this.referredBy,
    this.referralRewardApplied,
  })  : id = '', // Initialize as empty; will be set when saving
        referralCode = _generateReferralCode(),
        lastModified = DateTime.now();
  Map<String, dynamic> toJson() {
    return {
      'name': name,
      'contact': contact,
      'isActive': isActive,
      'wifiName': wifiName,
      'currentPassword': currentPassword,
      'subscriptionStart': subscriptionStart.toIso8601String(),
      'subscriptionEnd': subscriptionEnd.toIso8601String(),
      'lastModified': lastModified.toIso8601String(),
      'planType': planType.name,
      'referredBy': referredBy,
      'referralRewardApplied': referralRewardApplied?.toIso8601String(),
      'referralCode': referralCode,
    };
  }
  static Customer fromJson(String id, Map<String, dynamic> json) {
    return Customer(
      name: json['name'] as String,
      contact: json['contact'] as String,
      isActive: json['isActive'] as bool,
      wifiName: json['wifiName'] as String,
      currentPassword: json['currentPassword'] as String,
      subscriptionStart: DateTime.parse(json['subscriptionStart'] as String),
      subscriptionEnd: DateTime.parse(json['subscriptionEnd'] as String),
      planType: PlanType.values.firstWhere(
        (e) => e.name == json['planType'],
        orElse: () => PlanType.daily,
      ),
      referredBy: json['referredBy'] as String?,
      referralRewardApplied: json['referralRewardApplied'] != null
          ? DateTime.parse(json['referralRewardApplied'] as String)
          : null,
    )
      ..id = id
      ..lastModified = DateTime.parse(json['lastModified'] as String);
  }
  Customer copyWith({
    String? name,
    String? contact,
    bool? isActive,
    String? wifiName,
    String? currentPassword,
    DateTime? subscriptionStart,
    DateTime? subscriptionEnd,
    PlanType? planType,
  }) {
    return Customer(
      name: name ?? this.name,
      contact: contact ?? this.contact,
      isActive: isActive ?? this.isActive,
      wifiName: wifiName ?? this.wifiName,
      currentPassword: currentPassword ?? this.currentPassword,
      subscriptionStart: subscriptionStart ?? this.subscriptionStart,
      subscriptionEnd: subscriptionEnd ?? this.subscriptionEnd,
      planType: planType ?? this.planType,
    )
      ..id = id
      ..lastModified = DateTime.now();
  }
  static const int _minLength = 4;
  static const int _maxSingleWordLength = 6;
  static const int _minRandomSuffix = 100;
  static const int _maxRandomSuffix = 999;
  static String generateWifiName(String? customerName) {
    if (customerName == null || customerName.trim().isEmpty) {
      throw ArgumentError('Customer name cannot be null or empty');
    }
    final cleanName = customerName
        .trim()
        .replaceAll(RegExp(r'[^\w\s]'), '')
        .replaceAll(RegExp(r'\s+'), ' ');
    // Split into words and filter out empty strings
    final words =
        cleanName.split(' ').where((word) => word.isNotEmpty).toList();
    if (words.isEmpty) {
      throw ArgumentError('Customer name contains no valid characters');
    }
    String wifiName;
    if (words.length == 1) {
      wifiName = _generateSingleWordName(words[0]);
    } else {
      wifiName = _generateMultiWordName(words);
    }
    if (wifiName.length < _minLength) {
      wifiName += _generateRandomSuffix();
    }
    return wifiName.toUpperCase();
  }
  static String _generateSingleWordName(String word) {
    if (word.length <= _maxSingleWordLength) {
      return word;
    }
    return word.substring(0, _maxSingleWordLength);
  }
  static String _generateMultiWordName(List<String> words) {
    return words.where((word) => word.isNotEmpty).map((word) => word[0]).join();
  }
  static String _generateRandomSuffix() {
    final random = DateTime.now().millisecondsSinceEpoch %
            (_maxRandomSuffix - _minRandomSuffix) +
        _minRandomSuffix;
    return random.toString();
  }
  static const String _upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  static const String _lowerCaseLetters = 'abcdefghijklmnopqrstuvwxyz';
  static const String _numbers = '0123456789';
  static const String _specialCharacters = '!@#\$%^&*()-_=+';
  static const int _defaultLength = 12;
  static const int _minLengthx = 8;
  static const int _maxLength = 128;
  static String generate({
    int length = _defaultLength,
    bool useSpecialChars = false,
    bool useLowerCase = true,
    bool useNumbers = true,
  }) {
    if (length < _minLengthx || length > _maxLength) {
      throw ArgumentError(
        'Password length must be between $_minLengthx and $_maxLength characters',
      );
    }
    final charPool = StringBuffer(_upperCaseLetters);
    if (useLowerCase) charPool.write(_lowerCaseLetters);
    if (useNumbers) charPool.write(_numbers);
    if (useSpecialChars) charPool.write(_specialCharacters);
    final String chars = charPool.toString();
    if (chars.isEmpty) {
      throw ArgumentError('At least one character set must be enabled');
    }
    final random = Random.secure();
    final password = StringBuffer();
    if (useSpecialChars) {
      password.write(
        _specialCharacters[random.nextInt(_specialCharacters.length)],
      );
    }
    if (useLowerCase) {
      password.write(
        _lowerCaseLetters[random.nextInt(_lowerCaseLetters.length)],
      );
    }
    if (useNumbers) {
      password.write(_numbers[random.nextInt(_numbers.length)]);
    }
    password.write(_upperCaseLetters[random.nextInt(_upperCaseLetters.length)]);
    final remainingLength = length - password.length;
    for (var i = 0; i < remainingLength; i++) {
      password.write(chars[random.nextInt(chars.length)]);
    }
    final passwordChars = password.toString().split('');
    passwordChars.shuffle(random);
    return passwordChars.join();
  }
  /// Checks if a password meets minimum strength requirements.
  ///
  /// Returns:
  ///   true if password meets all requirements, false otherwise
  static bool isStrong(String password) {
    if (password.length < _minLengthx) return false;
    final hasUpperCase = password.contains(RegExp(r'[A-Z]'));
    final hasLowerCase = password.contains(RegExp(r'[a-z]'));
    final hasNumbers = password.contains(RegExp(r'[0-9]'));
    final hasSpecialChars = password.contains(RegExp(r'[!@#\$%^&*()-_=+]'));
    return hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChars;
  }
}
String _generateReferralCode() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  final random = Random.secure();
  return String.fromCharCodes(
    List.generate(6, (index) => chars.codeUnitAt(random.nextInt(chars.length))),
  );
}

================
File: database/models/payment.dart
================
import 'plan.dart';
class Payment {
  String id;
  DateTime paymentDate;
  double amount;
  String customerId;
  PlanType planType;
  bool isConfirmed;
  DateTime lastModified;
  Payment({
    required this.paymentDate,
    required this.amount,
    required this.customerId,
    required this.planType,
    this.isConfirmed = false,
  })  : id = '', // Initialize as empty; will be set when saving
        lastModified = DateTime.now();
  Map<String, dynamic> toJson() {
    return {
      'paymentDate': paymentDate.toIso8601String(),
      'amount': amount,
      'customerId': customerId,
      'planType': planType.name,
      'isConfirmed': isConfirmed,
      'lastModified': lastModified.toIso8601String(),
    };
  }
  static Payment fromJson(String id, Map<String, dynamic> json) {
    return Payment(
      paymentDate: DateTime.parse(json['paymentDate'] as String),
      amount: json['amount'] as double,
      customerId: json['customerId'] as String,
      planType: PlanType.values.firstWhere(
        (e) => e.name == json['planType'],
        orElse: () => PlanType.daily,
      ),
      isConfirmed: json['isConfirmed'] as bool,
    )
      ..id = id
      ..lastModified = DateTime.parse(json['lastModified'] as String);
  }
  Payment copyWith({
    DateTime? paymentDate,
    double? amount,
    String? customerId,
    PlanType? planType,
    bool? isConfirmed,
  }) {
    return Payment(
      paymentDate: paymentDate ?? this.paymentDate,
      amount: amount ?? this.amount,
      customerId: customerId ?? this.customerId,
      planType: planType ?? this.planType,
      isConfirmed: isConfirmed ?? this.isConfirmed,
    )..lastModified = DateTime.now();
  }
}

================
File: database/models/plan.dart
================
import 'package:shared_preferences/shared_preferences.dart';
enum PlanType { daily, weekly, monthly }
class Plan {
  String id;
  PlanType type;
  double price;
  int durationInDays;
  Plan({
    required this.type,
    required this.price,
    required this.durationInDays,
  }) : id = ''; // Initialize as empty; will be set when saving
  Map<String, dynamic> toJson() {
    return {
      'type': type.name,
      'price': price,
      'durationInDays': durationInDays,
    };
  }
  static Plan fromJson(String id, Map<String, dynamic> json) {
    return Plan(
      type: PlanType.values.firstWhere(
        (e) => e.name == json['type'],
        orElse: () => PlanType.daily,
      ),
      price: json['price'] as double,
      durationInDays: json['durationInDays'] as int,
    )..id = id;
  }
  Future<List<Plan>> getPlans() async {
    final prefs = await SharedPreferences.getInstance();
    return [
      Plan(
        type: PlanType.daily,
        price: prefs.getDouble('dailyPrice') ?? 1000.0,
        durationInDays: 1,
      ),
      Plan(
        type: PlanType.weekly,
        price: prefs.getDouble('weeklyPrice') ?? 5000.0,
        durationInDays: 7,
      ),
      Plan(
        type: PlanType.monthly,
        price: prefs.getDouble('monthlyPrice') ?? 15000.0,
        durationInDays: 30,
      ),
    ];
  }
}

================
File: database/models/referral_stats.dart
================
class ReferralStats {
  String id;
  String referrerId;
  String referredCustomerId;
  DateTime referralDate;
  int rewardDurationMillis;
  ReferralStats({
    required this.referrerId,
    required this.referredCustomerId,
    required this.referralDate,
    required this.rewardDurationMillis,
  }) : id = ''; // Initialize as empty; will be set when saving
  Map<String, dynamic> toJson() {
    return {
      'referrerId': referrerId,
      'referredCustomerId': referredCustomerId,
      'referralDate': referralDate.toIso8601String(),
      'rewardDurationMillis': rewardDurationMillis,
    };
  }
  static ReferralStats fromJson(String id, Map<String, dynamic> json) {
    return ReferralStats(
      referrerId: json['referrerId'] as String,
      referredCustomerId: json['referredCustomerId'] as String,
      referralDate: DateTime.parse(json['referralDate'] as String),
      rewardDurationMillis: json['rewardDurationMillis'] as int,
    )..id = id;
  }
  factory ReferralStats.fromDuration({
    required String referrerId,
    required String referredCustomerId,
    required DateTime referralDate,
    required Duration rewardDuration,
  }) {
    return ReferralStats(
      referrerId: referrerId,
      referredCustomerId: referredCustomerId,
      referralDate: referralDate,
      rewardDurationMillis: rewardDuration.inMilliseconds,
    );
  }
}

================
File: database/models/sync_status.dart
================


================
File: database/repository/database_repository.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:truthy_wifi_manager/database/models/billing_cycle.dart';
import '../models/billing_cycle.dart';
import '../models/customer.dart';
import '../models/payment.dart';
import '../models/referral_stats.dart';
class DatabaseRepository {
  final FirebaseFirestore firestore = FirebaseFirestore.instance;
  String getUserCollectionPath(String collection) {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) throw Exception('User not authenticated');
    return 'users/${user.uid}/$collection';
  }
  Future<void> saveCustomer(Customer customer) async {
    final collectionPath = getUserCollectionPath('customers');
    if (customer.id.isEmpty) {
      final docRef = firestore.collection(collectionPath).doc();
      customer.id = docRef.id;
      await docRef.set(customer.toJson());
    } else {
      await firestore
          .collection(collectionPath)
          .doc(customer.id)
          .set(customer.toJson());
    }
  }
  Future<void> deleteCustomer(String customerId) async {
    await firestore
        .collection(getUserCollectionPath('customers'))
        .doc(customerId)
        .delete();
  }
  Future<List<Customer>> getActiveCustomers() async {
    final snapshot = await firestore
        .collection(getUserCollectionPath('customers'))
        .where('isActive', isEqualTo: true)
        .get();
    return snapshot.docs
        .map((doc) => Customer.fromJson(doc.id, doc.data()))
        .toList();
  }
  Future<List<Customer>> getInactiveCustomers() async {
    final snapshot = await firestore
        .collection(getUserCollectionPath('customers'))
        .where('isActive', isEqualTo: false)
        .get();
    return snapshot.docs
        .map((doc) => Customer.fromJson(doc.id, doc.data()))
        .toList();
  }
  Future<void> deleteCustomerWithData(
      String customerId, bool deleteAssociatedData) async {
    final batch = firestore.batch();
    final customerRef = firestore
        .collection(getUserCollectionPath('customers'))
        .doc(customerId);
    batch.delete(customerRef);
    if (deleteAssociatedData) {
      final paymentsSnapshot = await firestore
          .collection(getUserCollectionPath('payments'))
          .where('customerId', isEqualTo: customerId)
          .get();
      for (final doc in paymentsSnapshot.docs) {
        batch.delete(doc.reference);
      }
      final referralStatsSnapshot = await firestore
          .collection(getUserCollectionPath('referral_stats'))
          .where('referrerId', isEqualTo: customerId)
          .get();
      for (final doc in referralStatsSnapshot.docs) {
        batch.delete(doc.reference);
      }
    }
    await batch.commit();
  }
  Future<void> savePayment(Payment payment) async {
    final collectionPath = getUserCollectionPath('payments');
    if (payment.id.isEmpty) {
      final docRef = firestore.collection(collectionPath).doc();
      payment.id = docRef.id;
      await docRef.set(payment.toJson());
    } else {
      await firestore
          .collection(collectionPath)
          .doc(payment.id)
          .set(payment.toJson());
    }
  }
  Future<void> deletePayment(String paymentId) async {
    await firestore
        .collection(getUserCollectionPath('payments'))
        .doc(paymentId)
        .delete();
  }
  Future<List<Payment>> getRecentPayments() async {
    final snapshot = await firestore
        .collection(getUserCollectionPath('payments'))
        .where('paymentDate',
            isGreaterThan: DateTime.now()
                .subtract(const Duration(days: 60))
                .toIso8601String())
        .get();
    return snapshot.docs
        .map((doc) => Payment.fromJson(doc.id, doc.data()))
        .toList();
  }
  Future<void> saveReferralStats(ReferralStats referralStats) async {
    final collectionPath = getUserCollectionPath('referral_stats');
    if (referralStats.id.isEmpty) {
      final docRef = firestore.collection(collectionPath).doc();
      referralStats.id = docRef.id;
      await docRef.set(referralStats.toJson());
    } else {
      await firestore
          .collection(collectionPath)
          .doc(referralStats.id)
          .set(referralStats.toJson());
    }
  }
  Future<List<ReferralStats>> getReferralStats(String referrerId) async {
    final snapshot = await firestore
        .collection(getUserCollectionPath('referral_stats'))
        .where('referrerId', isEqualTo: referrerId)
        .get();
    return snapshot.docs
        .map((doc) => ReferralStats.fromJson(doc.id, doc.data()))
        .toList();
  }
  Future<int> getTotalReferrals(String referrerId) async {
    final snapshot = await firestore
        .collection(getUserCollectionPath('referral_stats'))
        .where('referrerId', isEqualTo: referrerId)
        .get();
    return snapshot.docs.length;
  }
  Future<void> saveBillingCycle(BillingCycle cycle) async {
    final collectionPath = getUserCollectionPath('billing_cycles');
    if (cycle.id.isEmpty) {
      final docRef = firestore.collection(collectionPath).doc();
      cycle.id = docRef.id;
      await docRef.set(cycle.toJson());
    } else {
      await firestore
          .collection(collectionPath)
          .doc(cycle.id)
          .set(cycle.toJson());
    }
  }
Future<List<BillingCycle>> getBillingCycles() async {
  final snapshot = await firestore.collection(getUserCollectionPath('billing_cycles')).get();
  return snapshot.docs.map((doc) => BillingCycle.fromJson(doc.id, doc.data())).toList();
}
  Future<Duration> getTotalRewardDuration(String referrerId) async {
    try {
      final referralStats = await getReferralStats(referrerId);
      return referralStats.fold<Duration>(
        Duration.zero,
        (Duration total, ReferralStats referral) =>
            total + Duration(milliseconds: referral.rewardDurationMillis),
      );
    } catch (e) {
      print('Error calculating total reward duration: $e');
      return Duration.zero;
    }
  }
  Future<double> calculateActiveCustomerTrend() async {
    final now = DateTime.now();
    final currentMonthStart = DateTime(now.year, now.month, 1);
    final previousMonthStart = DateTime(now.year, now.month - 1, 1);
    final currentMonthSnapshot = await firestore
        .collection(getUserCollectionPath('customers'))
        .where('isActive', isEqualTo: true)
        .where('subscriptionStart',
            isLessThan: currentMonthStart.toIso8601String())
        .get();
    final previousMonthSnapshot = await firestore
        .collection(getUserCollectionPath('customers'))
        .where('isActive', isEqualTo: true)
        .where('subscriptionStart',
            isLessThan: previousMonthStart.toIso8601String())
        .get();
    final currentCount = currentMonthSnapshot.docs.length;
    final previousCount = previousMonthSnapshot.docs.length;
    return previousCount == 0
        ? 0.0
        : ((currentCount - previousCount) / previousCount) * 100;
  }
  Future<List<Customer>> getExpiringCustomers() async {
    final tomorrow = DateTime.now().add(const Duration(days: 1));
    final snapshot = await firestore
        .collection(getUserCollectionPath('customers'))
        .where('isActive', isEqualTo: true)
        .where('subscriptionEnd', isLessThan: tomorrow.toIso8601String())
        .get();
    return snapshot.docs
        .map((doc) => Customer.fromJson(doc.id, doc.data()))
        .toList();
  }
  Future<void> activateCustomer(String customerId) async {
    await firestore
        .collection(getUserCollectionPath('customers'))
        .doc(customerId)
        .update({'isActive': true});
  }
  Future<void> deleteAllRecords() async {
    final batch = firestore.batch();
    final customerDocs =
        await firestore.collection(getUserCollectionPath('customers')).get();
    final paymentDocs =
        await firestore.collection(getUserCollectionPath('payments')).get();
    final referralDocs = await firestore
        .collection(getUserCollectionPath('referral_stats'))
        .get();
    for (final doc in customerDocs.docs) {
      batch.delete(doc.reference);
    }
    for (final doc in paymentDocs.docs) {
      batch.delete(doc.reference);
    }
    for (final doc in referralDocs.docs) {
      batch.delete(doc.reference);
    }
    await batch.commit();
  }
}

================
File: providers/active_customer_trend_provider.dart
================
import 'package:riverpod/riverpod.dart';
import 'database_provider.dart';
final activeCustomerTrendProvider = FutureProvider<double>((ref) async {
  final database = ref.watch(databaseProvider);
  return database.calculateActiveCustomerTrend();
});

================
File: providers/customer_provider.dart
================
import 'package:riverpod/riverpod.dart';
import '../database/models/customer.dart';
import 'database_provider.dart';
final customerProvider =
    FutureProvider.family<Customer?, String>((ref, customerId) async {
  final database = ref.watch(databaseProvider);
  final snapshot = await database.firestore
      .collection(database.getUserCollectionPath('customers'))
      .doc(customerId)
      .get();
  return snapshot.exists
      ? Customer.fromJson(snapshot.id, snapshot.data()!)
      : null;
});
final inactiveCustomersProvider = FutureProvider<List<Customer>>((ref) async {
  final database = ref.watch(databaseProvider);
  return database.getInactiveCustomers();
});

================
File: providers/database_provider.dart
================
import 'package:riverpod/riverpod.dart';
import '../database/models/customer.dart';
import '../database/models/payment.dart';
import '../database/repository/database_repository.dart';
final databaseProvider = Provider<DatabaseRepository>((ref) {
  return DatabaseRepository();
});
final activeCustomersProvider = FutureProvider<List<Customer>>((ref) async {
  final database = ref.watch(databaseProvider);
  return database.getActiveCustomers();
});
final expiringCustomersProvider = FutureProvider<List<Customer>>((ref) async {
  final database = ref.watch(databaseProvider);
  return database.getExpiringCustomers();
});
final recentPaymentsProvider = FutureProvider<List<Payment>>((ref) async {
  final database = ref.watch(databaseProvider);
  return database.getRecentPayments();
});

================
File: providers/notification_schedule_provider.dart
================
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../services/notification_scheduler.dart';
import '../services/subscription_notification_service.dart';
final notificationSchedulerProvider = Provider<NotificationScheduler>((ref) {
  return NotificationScheduler();
});
final scheduledNotificationsProvider =
    FutureProvider<List<Map<String, dynamic>>>((ref) async {
  return SubscriptionNotificationService.getScheduledNotifications();
});

================
File: providers/payment_provider.dart
================
import 'package:flutter/material.dart';
import 'package:riverpod/riverpod.dart';
import '../database/models/payment.dart';
import '../database/models/plan.dart';
import 'database_provider.dart';
final selectedDateRangeProvider = StateProvider<DateTimeRange?>((ref) => null);
final filteredPaymentsProvider = FutureProvider<List<Payment>>((ref) async {
  final database = ref.watch(databaseProvider);
  final dateRange = ref.watch(selectedDateRangeProvider);
  if (dateRange == null) {
    return database.getRecentPayments();
  }
  final snapshot = await database.firestore
      .collection(database.getUserCollectionPath('payments'))
      .where('paymentDate',
          isGreaterThanOrEqualTo: dateRange.start.toIso8601String())
      .where('paymentDate', isLessThanOrEqualTo: dateRange.end.toIso8601String())
      .get();
  return snapshot.docs.map((doc) => Payment.fromJson(doc.id, doc.data())).toList();
});
final paymentSummaryProvider = FutureProvider<Map<String, double>>((ref) async {
  final payments = await ref.watch(filteredPaymentsProvider.future);
  return {
    'daily': payments
        .where((p) => p.planType == PlanType.daily)
        .fold(0, (sum, p) => sum + p.amount),
    'weekly': payments
        .where((p) => p.planType == PlanType.weekly)
        .fold(0, (sum, p) => sum + p.amount),
    'monthly': payments
        .where((p) => p.planType == PlanType.monthly)
        .fold(0, (sum, p) => sum + p.amount),
    'total': payments.fold(0, (sum, p) => sum + p.amount),
  };
});

================
File: providers/referral_stats_provider.dart
================
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../database/models/referral_stats.dart';
import 'database_provider.dart';
final referralStatsProvider =
    FutureProvider.family<List<ReferralStats>, String>((ref, referrerId) async {
      final database = ref.watch(databaseProvider);
      return database.getReferralStats(referrerId);
    });
final totalReferralsProvider = FutureProvider.family<int, String>((
  ref,
  referrerId,
) async {
  final database = ref.watch(databaseProvider);
  return database.getTotalReferrals(referrerId);
});
final totalRewardDurationProvider = FutureProvider.family<Duration, String>((
  ref,
  referrerId,
) async {
  final database = ref.watch(databaseProvider);
  return database.getTotalRewardDuration(referrerId);
});

================
File: providers/retention_provider.dart
================
import 'package:riverpod/riverpod.dart';
import 'database_provider.dart';
final retentionProvider = FutureProvider<Map<String, dynamic>>((ref) async {
  final db = ref.watch(databaseProvider);
  final activeCustomers = await db.getActiveCustomers();
  final inactiveCustomers = await db.getInactiveCustomers();
  final total = activeCustomers.length + inactiveCustomers.length;
  final retentionRate =
      total > 0 ? (activeCustomers.length / total) * 100 : 0.0;
  final churnRate = total > 0 ? (inactiveCustomers.length / total) * 100 : 0.0;
  final now = DateTime.now();
  final last30Days = now.subtract(Duration(days: 30));
  final newCustomers = activeCustomers
      .where((c) => c.subscriptionStart.isAfter(last30Days))
      .length;
  final lostCustomers =
      inactiveCustomers.where((c) => c.lastModified.isAfter(last30Days)).length;
  return {
    'retentionRate': retentionRate,
    'churnRate': churnRate,
    'newCustomersLast30Days': newCustomers,
    'lostCustomersLast30Days': lostCustomers,
    'activeCount': activeCustomers.length,
    'inactiveCount': inactiveCustomers.length,
  };
});

================
File: providers/subscription_provider.dart
================
import 'package:riverpod/riverpod.dart';
import '../database/models/customer.dart';
import 'database_provider.dart';
final expiringSubscriptionsProvider = StreamProvider<List<Customer>>((ref) {
  final database = ref.watch(databaseProvider);
  final threeDaysFromNow = DateTime.now().add(const Duration(days: 3));
  return database.firestore
      .collection(database.getUserCollectionPath('customers'))
      .where('isActive', isEqualTo: true)
      .where('subscriptionEnd',
          isLessThanOrEqualTo: threeDaysFromNow.toIso8601String())
      .snapshots()
      .map((snapshot) => snapshot.docs
          .map((doc) => Customer.fromJson(doc.id, doc.data()))
          .toList());
});

================
File: providers/syncing_provider.dart
================


================
File: screens/about_screen.dart
================
import 'package:flutter/material.dart';
class AboutScreen extends StatelessWidget {
  const AboutScreen({super.key});
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('About Truthy Systems'),
        backgroundColor: Colors.black.withOpacity(0.2),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Welcome to Truthy Systems',
              style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
            ),
            const SizedBox(height: 16),
            Text(
              'Truthy Systems is your trusted partner in delivering reliable, high-speed WiFi solutions tailored for both individuals and businesses. Our mission is to empower users with seamless internet access while simplifying subscription management for providers through innovative technology.',
              style: Theme.of(context).textTheme.bodyLarge,
            ),
            const SizedBox(height: 24),
            Text(
              'Our Story',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 8),
            Text(
              'Founded with a vision to bridge connectivity gaps, Truthy Systems combines cutting-edge software with exceptional customer service. Our WiFi Manager app is designed to streamline subscription tracking, payment processing, and customer engagement, ensuring uninterrupted service and satisfaction.',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 24),
            Text(
              'Key Features',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 8),
            _buildFeatureItem(context, 'Customer Management', 'Easily add, edit, and track customer subscriptions.'),
            _buildFeatureItem(context, 'Billing & Payments', 'Monitor billing cycles and process payments effortlessly.'),
            _buildFeatureItem(context, 'Referral Program', 'Earn rewards by inviting others to join Truthy WiFi.'),
            _buildFeatureItem(context, 'Real-Time Insights', 'Access retention stats and revenue summaries.'),
            const SizedBox(height: 24),
            Text(
              'Contact Us',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 8),
            Text(
              'Email: truthysys@proton.me\nPhone: +256-783-009649',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildFeatureItem(BuildContext context, String title, String description) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Icon(Icons.check_circle, color: Colors.green, size: 20),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(title, style: Theme.of(context).textTheme.bodyLarge?.copyWith(fontWeight: FontWeight.bold)),
                Text(description, style: Theme.of(context).textTheme.bodyMedium),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

================
File: screens/add_customer_screen.dart
================
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:truthy_wifi_manager/providers/customer_provider.dart'
    show customerProvider;
import '../database/models/customer.dart';
import '../database/models/plan.dart';
import '../database/models/referral_stats.dart';
import '../providers/database_provider.dart';
import '../providers/notification_schedule_provider.dart';
import '../providers/subscription_provider.dart';
class AddCustomerScreen extends ConsumerStatefulWidget {
  const AddCustomerScreen({super.key});
  @override
  ConsumerState<AddCustomerScreen> createState() => _AddCustomerScreenState();
}
class _AddCustomerScreenState extends ConsumerState<AddCustomerScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _contactController = TextEditingController();
  final _referralCodeController = TextEditingController();
  PlanType _selectedPlan = PlanType.monthly;
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Add Customer')),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            TextFormField(
              controller: _nameController,
              decoration: const InputDecoration(
                labelText: 'Name',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter a name';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _contactController,
              decoration: const InputDecoration(
                labelText: 'Contact',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter contact info';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _referralCodeController,
              decoration: const InputDecoration(
                labelText: 'Referral Code (Optional)',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),
            DropdownButtonFormField<PlanType>(
              value: _selectedPlan,
              decoration: const InputDecoration(
                labelText: 'Plan',
                border: OutlineInputBorder(),
              ),
              items: PlanType.values.map((plan) {
                return DropdownMenuItem(
                  value: plan,
                  child: Text(plan.name),
                );
              }).toList(),
              onChanged: (PlanType? value) {
                if (value != null) {
                  setState(() {
                    _selectedPlan = value;
                  });
                }
              },
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _saveCustomer,
              child: const Text('Save Customer'),
            ),
          ],
        ),
      ),
    );
  }
  void _saveCustomer() async {
    if (_formKey.currentState?.validate() ?? false) {
      final customer = Customer(
        name: _nameController.text,
        contact: _contactController.text,
        isActive: true,
        wifiName: Customer.generateWifiName(_nameController.text),
        currentPassword: _generatePassword(),
        subscriptionStart: DateTime.now(),
        subscriptionEnd: _calculateEndDate(),
        planType: _selectedPlan,
        referredBy: _referralCodeController.text.isNotEmpty
            ? await _getCustomerIdByReferralCode(_referralCodeController.text)
            : null,
      );
      try {
        await ref.read(databaseProvider).saveCustomer(customer);
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Customer saved successfully')),
          );
          Navigator.pop(context);
          ref.invalidate(activeCustomersProvider);
          if (customer.referredBy != null) {
            await _applyReferralReward(customer.referredBy!, customer);
          }
        }
        ref.invalidate(activeCustomersProvider);
        ref.invalidate(databaseProvider);
        ref.invalidate(customerProvider);
        ref.invalidate(expiringSubscriptionsProvider);
        ref.invalidate(notificationSchedulerProvider);
      } catch (e, stackTrace) {
        if (mounted) {
          ScaffoldMessenger.of(
            context,
          ).showSnackBar(
            SnackBar(
              content: SelectableText(
                'Error saving customer: $e | $stackTrace',
              ),
              duration: Duration(minutes: 2),
            ),
          );
        }
      }
    }
  }
  Future<String?> _getCustomerIdByReferralCode(String referralCode) async {
    final snapshot = await ref
        .read(databaseProvider)
        .firestore
        .collection(
            ref.read(databaseProvider).getUserCollectionPath('customers'))
        .where('referralCode', isEqualTo: referralCode)
        .limit(1)
        .get();
    return snapshot.docs.isEmpty ? null : snapshot.docs.first.id;
  }
  Future<void> _applyReferralReward(
      String referrerId, Customer newCustomer) async {
    final database = ref.read(databaseProvider);
    final referrerDoc = await database.firestore
        .collection(database.getUserCollectionPath('customers'))
        .doc(referrerId)
        .get();
    if (!referrerDoc.exists) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Referrer not found.')),
        );
      }
      return;
    }
    final referrer = Customer.fromJson(referrerDoc.id, referrerDoc.data()!);
    if (!referrer.isActive) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Referrer is inactive.')),
        );
      }
      return;
    }
    final rewardDuration =
        _calculateReferralReward(referrer.planType, newCustomer.planType);
    referrer.subscriptionEnd = referrer.subscriptionEnd.add(rewardDuration);
    referrer.referralRewardApplied = DateTime.now();
    final referralStats = ReferralStats.fromDuration(
      referrerId: referrerId,
      referredCustomerId: newCustomer.id,
      referralDate: DateTime.now(),
      rewardDuration: rewardDuration,
    );
    try {
      final batch = database.firestore.batch();
      batch.set(
        database.firestore
            .collection(database.getUserCollectionPath('customers'))
            .doc(referrer.id),
        referrer.toJson(),
      );
      batch.set(
        database.firestore
            .collection(database.getUserCollectionPath('referral_stats'))
            .doc(referralStats.id),
        referralStats.toJson(),
      );
      await batch.commit();
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              'Referral reward applied: ${referrer.name} gets ${rewardDuration.inDays} days free!',
            ),
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to apply referral reward: $e')),
        );
      }
    }
  }
  Duration _calculateReferralReward(
    PlanType referrerPlan,
    PlanType newCustomerPlan,
  ) {
    if (newCustomerPlan == PlanType.monthly) {
      return const Duration(days: 7);
    } else if (newCustomerPlan == PlanType.weekly) {
      return const Duration(days: 3);
    } else {
      return const Duration(days: 1);
    }
  }
  String _generatePassword() {
    return 'temp-pass-${Random().nextInt(9999)}';
  }
  DateTime _calculateEndDate() {
    switch (_selectedPlan) {
      case PlanType.daily:
        return DateTime.now().add(const Duration(days: 1));
      case PlanType.weekly:
        return DateTime.now().add(const Duration(days: 7));
      case PlanType.monthly:
        return DateTime.now().add(const Duration(days: 30));
    }
  }
}

================
File: screens/billing_cycle_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../database/models/billing_cycle.dart';
import '../database/models/payment.dart';
import '../providers/database_provider.dart';
class BillingCycleScreen extends ConsumerStatefulWidget {
  const BillingCycleScreen({super.key});
  @override
  ConsumerState<BillingCycleScreen> createState() => _BillingCycleScreenState();
}
class _BillingCycleScreenState extends ConsumerState<BillingCycleScreen> {
  DateTimeRange? _selectedRange;
  double _wifiExpense = 0.0;
  @override
  Widget build(BuildContext context) {
    final billingCyclesAsync = ref.watch(billingCyclesProvider);
    return Scaffold(
      appBar: AppBar(title: const Text('Billing Cycles')),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                ElevatedButton(
                  onPressed: _selectDateRange,
                  child: Text(_selectedRange == null
                      ? 'Select Billing Period'
                      : '${DateFormat('MMM d').format(_selectedRange!.start)} - ${DateFormat('MMM d').format(_selectedRange!.end)}'),
                ),
                TextField(
                  decoration:
                      const InputDecoration(labelText: 'WiFi Expense (UGX)'),
                  keyboardType: TextInputType.number,
                  onChanged: (value) =>
                      _wifiExpense = double.tryParse(value) ?? 0.0,
                ),
                ElevatedButton(
                  onPressed: _saveBillingCycle,
                  child: const Text('Save Billing Cycle'),
                ),
              ],
            ),
          ),
          Expanded(
            child: billingCyclesAsync.when(
              data: (cycles) => ListView.builder(
                itemCount: cycles.length,
                itemBuilder: (context, index) {
                  final cycle = cycles[index];
                  final totalIncome = cycle.customerPayments.values
                      .fold(0.0, (sum, amount) => sum + amount);
                  final profit = totalIncome - cycle.wifiExpense;
                  return Card(
                    child: ListTile(
                      title: Text(
                          '${DateFormat('MMM d, y').format(cycle.startDate)} - ${DateFormat('MMM d, y').format(cycle.endDate)}'),
                      subtitle: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                              'Expense: UGX ${cycle.wifiExpense.toStringAsFixed(0)}'),
                          Text('Income: UGX ${totalIncome.toStringAsFixed(0)}'),
                          Text('Profit: UGX ${profit.toStringAsFixed(0)}',
                              style: TextStyle(
                                  color:
                                      profit >= 0 ? Colors.green : Colors.red)),
                        ],
                      ),
                    ),
                  );
                },
              ),
              loading: () => const Center(child: CircularProgressIndicator()),
              error: (e, _) => Center(child: Text('Error: $e')),
            ),
          ),
        ],
      ),
    );
  }
  Future<void> _selectDateRange() async {
    final range = await showDateRangePicker(
      context: context,
      firstDate: DateTime.now().subtract(const Duration(days: 365)),
      lastDate: DateTime.now().add(const Duration(days: 1)),
    );
    if (range != null) setState(() => _selectedRange = range);
  }
  Future<void> _saveBillingCycle() async {
    if (_selectedRange == null) return;
    final database = ref.read(databaseProvider);
    final paymentsSnapshot = await database.firestore
        .collection(database.getUserCollectionPath('payments'))
        .where('paymentDate',
            isGreaterThanOrEqualTo: _selectedRange!.start.toIso8601String())
        .where('paymentDate',
            isLessThanOrEqualTo: _selectedRange!.end.toIso8601String())
        .get();
    final payments = paymentsSnapshot.docs
        .map((doc) => Payment.fromJson(doc.id, doc.data()))
        .toList();
    final customerPayments =
        Map.fromEntries(payments.map((p) => MapEntry(p.customerId, p.amount)));
    final cycle = BillingCycle(
      startDate: _selectedRange!.start,
      endDate: _selectedRange!.end,
      wifiExpense: _wifiExpense,
      customerPayments: customerPayments,
    );
    await database.saveBillingCycle(cycle);
    ref.invalidate(billingCyclesProvider);
  }
}
final billingCyclesProvider = FutureProvider<List<BillingCycle>>((ref) async {
  final database = ref.watch(databaseProvider);
  return database.getBillingCycles();
});

================
File: screens/customer_detail_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:intl/intl.dart';
import 'package:share_plus/share_plus.dart';
import '../database/models/customer.dart';
import '../services/ad_manager.dart';
import '../utils.dart';
import '../widgets/add_payment_dialog.dart';
import 'edit_customer_screen.dart';
import 'referral_stats_screen.dart';
class CustomerDetailScreen extends ConsumerStatefulWidget {
  final Customer customer;
  const CustomerDetailScreen({super.key, required this.customer});
  @override
  ConsumerState<CustomerDetailScreen> createState() =>
      _CustomerDetailScreenState();
}
class _CustomerDetailScreenState extends ConsumerState<CustomerDetailScreen> {
  final AdManager _adManager = AdManager();
  bool _isDisposed = false;
  @override
  void initState() {
    super.initState();
    _initializeAds();
  }
  Future<void> _initializeAds() async {
    await _adManager.initializeBannerAd(
      size: AdSize.banner,
      adUnitId: 'ca-app-pub-8267064683737776/9972219205',
    );
    await _adManager.initializeInterstitialAd(
      adUnitId: 'your_interstitial_ad_unit_id_here',
    );
    if (!_isDisposed &&
        widget.customer.subscriptionEnd.isBefore(DateTime.now())) {
      await _adManager.showInterstitialAd();
    }
  }
  @override
  void dispose() {
    _isDisposed = true;
    _adManager.dispose();
    super.dispose();
  }
  Future<void> _showInterstitialOnAction() async {
    await _adManager.showInterstitialAd();
  }
  void _shareCustomerLink() {
    final link = generateShareableLink(
        widget.customer.id.toString(), widget.customer.subscriptionEnd);
    print(link);
    Share.share('View my WiFi subscription details: $link');
  }
  @override
  Widget build(BuildContext context) {
    final daysUntilExpiry =
        widget.customer.subscriptionEnd.difference(DateTime.now()).inDays;
    final isExpiring = daysUntilExpiry <= 3;
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.customer.name),
        actions: [
          IconButton(
            icon: const Icon(Icons.bar_chart),
            onPressed: () async {
              await _showInterstitialOnAction();
              if (!mounted) return;
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => ReferralStatsScreen(
                    referrerId: widget.customer.id.toString(),
                  ),
                ),
              );
            },
          ),
          IconButton(
            icon: const Icon(Icons.edit),
            onPressed: () async {
              await _showInterstitialOnAction();
              if (!mounted) return;
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) =>
                      EditCustomerScreen(customer: widget.customer),
                ),
              );
            },
          ),
        ],
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView(
              padding: const EdgeInsets.all(16),
              children: [
                if (isExpiring)
                  Card(
                    color: Colors.orange.shade100,
                    child: Padding(
                      padding: const EdgeInsets.all(16),
                      child: Row(
                        children: [
                          const Icon(
                            Icons.warning_amber_rounded,
                            color: Colors.orange,
                          ),
                          const SizedBox(width: 8),
                          Expanded(
                            child: Text(
                              'Subscription expires in ${_formatExpiryTime(widget.customer.subscriptionEnd, daysUntilExpiry)}',
                              style: const TextStyle(color: Colors.orange),
                            ),
                          ),
                          TextButton(
                            onPressed: () => _showAddPaymentDialog(),
                            child: const Text('RENEW'),
                          ),
                        ],
                      ),
                    ),
                  ),
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        _buildDetailRow('Contact', widget.customer.contact),
                        const Divider(),
                        _buildDetailRow('WiFi Name', widget.customer.wifiName),
                        const Divider(),
                        _buildDetailRow(
                          'Password',
                          widget.customer.currentPassword,
                        ),
                        const Divider(),
                        _buildDetailRow(
                          'Status',
                          widget.customer.isActive ? 'Active' : 'Inactive',
                        ),
                        const Divider(),
                        _buildDetailRow('Plan', widget.customer.planType.name),
                        const Divider(),
                        _buildDetailRow(
                          'Subscription Start',
                          DateFormat(
                            'MMM d, y - hh:mm a',
                          ).format(widget.customer.subscriptionStart),
                        ),
                        const Divider(),
                        _buildDetailRow(
                          'Subscription End',
                          _formatExpiryTime(
                            widget.customer.subscriptionEnd,
                            daysUntilExpiry,
                          ),
                        ),
                        _buildDetailRow(
                          '',
                          DateFormat(
                            'MMM d, y - hh:mm a',
                          ).format(widget.customer.subscriptionEnd),
                        ),
                      ],
                    ),
                  ),
                ),
                Center(
                  child: _adManager.getBannerAdWidget(
                    maxWidth: MediaQuery.of(context).size.width,
                  ),
                ),
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Referral Program',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.blue,
                          ),
                        ),
                        const SizedBox(height: 8),
                        _buildDetailRow(
                          'Your Referral Code',
                          widget.customer.referralCode,
                        ),
                        const SizedBox(height: 8),
                        const Text(
                          'Share your referral code with friends to earn free subscription days!',
                          style: TextStyle(fontSize: 14, color: Colors.grey),
                        ),
                        const SizedBox(height: 16),
                        ElevatedButton(
                          onPressed: () async {
                            _shareReferralCode(
                              context,
                              widget.customer.referralCode,
                            );
                            await _showInterstitialOnAction();
                          },
                          child: const Text('Share Referral Code'),
                        ),
                        ElevatedButton(
                          onPressed: () => _shareCustomerLink(),
                          child: const Text('Share view link'),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () => _showAddPaymentDialog(),
        icon: const Icon(Icons.payment),
        label: const Text('Add Payment'),
      ),
    );
  }
  Future<void> _showAddPaymentDialog() async {
    await showDialog(
      context: context,
      builder: (context) => const AddPaymentDialog(),
    );
    await _showInterstitialOnAction();
  }
  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: const TextStyle(
              fontWeight: FontWeight.bold,
              color: Colors.grey,
            ),
          ),
          SelectableText(value, style: const TextStyle(fontSize: 16)),
        ],
      ),
    );
  }
  String _formatExpiryTime(DateTime subscriptionEnd, int daysUntilExpiry) {
    final now = DateTime.now();
    final difference = subscriptionEnd.difference(now);
    if (daysUntilExpiry > 0) {
      return DateFormat('MMM d, y').format(subscriptionEnd);
    } else if (difference.inHours.abs() < 24) {
      final hours = difference.inHours.abs();
      final prefix = difference.isNegative ? 'Expired' : 'Expires';
      return '$prefix in $hours hour${hours != 1 ? 's' : ''}';
    } else if (difference.inMinutes.abs() < 60) {
      final minutes = difference.inMinutes.abs();
      final prefix = difference.isNegative ? 'Expired' : 'Expires';
      return '$prefix in $minutes minute${minutes != 1 ? 's' : ''}';
    } else {
      final expiredDays = (-daysUntilExpiry).abs();
      return 'Expired $expiredDays day${expiredDays != 1 ? 's' : ''} ago';
    }
  }
  void _shareReferralCode(BuildContext context, String referralCode) {
    final message = 'Join Truthy WiFi using my referral code: $referralCode';
    Share.share(message);
  }
}

================
File: screens/customer_share_view.dart
================
import 'dart:async';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
class CustomerShareView extends StatefulWidget {
  const CustomerShareView({super.key});
  @override
  State<CustomerShareView> createState() => _CustomerShareViewState();
}
class _CustomerShareViewState extends State<CustomerShareView> {
  Map<String, dynamic>? customerData;
  List<Map<String, dynamic>> payments = [];
  List<Map<String, dynamic>> referrals = [];
  List<Map<String, dynamic>> downtimes = [];
  DateTime? expiration;
  bool loading = true;
  String? error;
  Timer? countdownTimer;
  Duration remainingTime = Duration.zero;
  @override
  void initState() {
    super.initState();
    _fetchData();
  }
  Future<void> _fetchData() async {
    final uri = Uri.base;
    final userId = uri.queryParameters['uid'];
    String? customerId =
        uri.queryParameters['cid'] ?? uri.queryParameters['monospaceUid'];
    if (customerId != null && customerId.contains('?')) {
      customerId = customerId.substring(0, customerId.indexOf('?'));
    }
    if (userId == null || customerId == null) {
      setState(() {
        error = "Invalid link parameters. Missing user or customer ID.";
        loading = false;
      });
      return;
    }
    try {
      final customerDoc = await FirebaseFirestore.instance
          .collection('users/$userId/customers')
          .doc(customerId)
          .get();
      if (!customerDoc.exists) {
        print('users/$userId/customers/$customerId');
        setState(() {
          error = "Customer not found.";
          loading = false;
        });
        return;
      }
      customerData = customerDoc.data();
      if (customerData != null && customerData!['subscriptionEnd'] != null) {
        expiration = DateTime.parse(customerData!['subscriptionEnd']);
      } else {
        setState(() {
          error = "Subscription end date not found.";
          loading = false;
        });
        return;
      }
      final paymentsQuery = await FirebaseFirestore.instance
          .collection('users/$userId/payments')
          .where('customerId', isEqualTo: customerId)
          .orderBy('paymentDate', descending: true)
          .limit(5)
          .get();
      payments = paymentsQuery.docs.map((doc) => doc.data()).toList();
      final referralsQuery = await FirebaseFirestore.instance
          .collection('users/$userId/referral_stats')
          .where('referredCustomerId', isEqualTo: customerId)
          .get();
      referrals = referralsQuery.docs.map((doc) => doc.data()).toList();
      final downtimeQuery = await FirebaseFirestore.instance
          .collection('users/$userId/downtime_logs')
          .where('affectedCustomers', arrayContains: customerId)
          .orderBy('timestamp', descending: true)
          .limit(3)
          .get();
      downtimes = downtimeQuery.docs.map((doc) => doc.data()).toList();
      _startCountdown();
      setState(() {
        loading = false;
      });
    } catch (e) {
      setState(() {
        error = "Error fetching data: $e";
        loading = false;
      });
    }
  }
  void _startCountdown() {
    if (expiration == null) return;
    _updateRemainingTime();
    countdownTimer = Timer.periodic(const Duration(seconds: 1), (_) {
      _updateRemainingTime();
    });
  }
  void _updateRemainingTime() {
    if (expiration == null) return;
    final now = DateTime.now();
    setState(() {
      remainingTime = expiration!.difference(now);
      if (remainingTime.isNegative) {
        countdownTimer?.cancel();
        error = "Your subscription has expired.";
      }
    });
  }
  @override
  void dispose() {
    countdownTimer?.cancel();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: loading
          ? const Center(child: CircularProgressIndicator())
          : error != null
              ? _buildErrorScreen()
              : _buildEnhancedContent(),
    );
  }
  Widget _buildEnhancedContent() {
    return SingleChildScrollView(
      child: Column(
        children: [
          _buildHeroHeader(),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                _buildMainDashboard(),
                const SizedBox(height: 24),
                _buildUsageStats(),
                const SizedBox(height: 24),
                if (payments.isNotEmpty) _buildPaymentHistory(),
                const SizedBox(height: 24),
                _buildReferralSection(),
                if (downtimes.isNotEmpty) ...[
                  const SizedBox(height: 24),
                  _buildDowntimeHistory(),
                ],
              ],
            ),
          ),
          _buildEnhancedFooter(),
        ],
      ),
    );
  }
  Widget _buildHeroHeader() {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [Colors.blue[900]!, Colors.blue[800]!],
        ),
      ),
      padding: const EdgeInsets.symmetric(vertical: 32, horizontal: 16),
      child: Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Icon(Icons.wifi, color: Colors.white, size: 36),
              const SizedBox(width: 12),
              Text(
                "Truthy Systems",
                style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                    ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Text(
            "Experience Unlimited Possibilities",
            style: Theme.of(context).textTheme.titleLarge?.copyWith(
                  color: Colors.white70,
                ),
          ),
          const SizedBox(height: 24),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              _buildFeatureBadge(Icons.check_circle_outline, "99.9% Uptime"),
              _buildFeatureBadge(Icons.speed, "Premium Speed"),
              _buildFeatureBadge(Icons.support_agent, "24/7 Support"),
            ],
          ),
        ],
      ),
    );
  }
  Widget _buildFeatureBadge(IconData icon, String text) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Icon(icon, color: Colors.white, size: 20),
        const SizedBox(width: 8),
        Text(
          text,
          style: const TextStyle(color: Colors.white),
        ),
      ],
    );
  }
  Widget _buildMainDashboard() {
    final bool isActive = !remainingTime.isNegative;
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  "Welcome, ${customerData?['name'] ?? 'Customer'}",
                  style: Theme.of(context).textTheme.titleLarge?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                ),
                _buildStatusChip(isActive),
              ],
            ),
            const SizedBox(height: 24),
            _buildSubscriptionTimer(),
            const SizedBox(height: 24),
            _buildConnectionDetails(),
            const SizedBox(height: 24),
            _buildPremiumFeatures(),
          ],
        ),
      ),
    );
  }
  Widget _buildStatusChip(bool isActive) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      decoration: BoxDecoration(
        color: isActive ? Colors.green[50] : Colors.red[50],
        borderRadius: BorderRadius.circular(20),
      ),
      child: Text(
        isActive ? "Active" : "Expired",
        style: TextStyle(
          color: isActive ? Colors.green[700] : Colors.red[700],
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }
  Widget _buildSubscriptionTimer() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.blue[50],
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        children: [
          Icon(Icons.timer, color: Colors.blue[700]),
          const SizedBox(width: 12),
          Expanded(
            child: Text(
              remainingTime.isNegative
                  ? "Subscription expired on ${DateFormat('MMM d, y').format(expiration!)}"
                  : "Time remaining: ${remainingTime.inDays}d ${remainingTime.inHours.remainder(24)}h ${remainingTime.inMinutes.remainder(60)}m",
              style: TextStyle(
                color: Colors.blue[700],
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildConnectionDetails() {
    return Column(
      children: [
        _buildDetailRow(
          "WiFi Name",
          customerData?['wifiName'] ?? 'N/A',
          Icons.wifi,
        ),
        const SizedBox(height: 12),
        _buildDetailRow(
          "Password",
          customerData?['currentPassword'] ?? 'N/A',
          Icons.lock,
        ),
        const SizedBox(height: 12),
        _buildDetailRow(
          "Plan",
          customerData?['planType']?.toString().toUpperCase() ?? 'N/A',
          Icons.star,
        ),
      ],
    );
  }
  Widget _buildDetailRow(String label, String value, IconData icon) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.grey[50],
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        children: [
          Icon(icon, size: 20, color: Colors.grey[600]),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  label,
                  style: TextStyle(
                    color: Colors.grey[600],
                    fontSize: 12,
                  ),
                ),
                const SizedBox(height: 4),
                SelectableText(
                  value,
                  style: TextStyle(
                    color: Colors.grey[600],
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildPremiumFeatures() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.blue[600]!, Colors.blue[700]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            "Premium Benefits",
            style: TextStyle(
              color: Colors.white,
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 16),
          _buildFeatureItem("Unlimited Downloads"),
          _buildFeatureItem("Priority Customer Support"),
          _buildFeatureItem("Access to All Devices"),
        ],
      ),
    );
  }
  Widget _buildFeatureItem(String text) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        children: [
          const Icon(
            Icons.check_circle,
            color: Colors.white,
            size: 20,
          ),
          const SizedBox(width: 12),
          Text(
            text,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 14,
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildUsageStats() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          "Usage Statistics",
          style: Theme.of(context).textTheme.titleLarge,
        ),
        const SizedBox(height: 16),
        Row(
          children: [
            Expanded(
              child: _buildStatCard("99.9%", "Uptime", Colors.blue),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: _buildStatCard("50Mbps", "Speed", Colors.green),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: _buildStatCard("2", "Devices", Colors.purple),
            ),
          ],
        ),
      ],
    );
  }
  Widget _buildStatCard(String value, String label, MaterialColor color) {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Text(
              value,
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: color[700],
              ),
            ),
            const SizedBox(height: 4),
            Text(
              label,
              style: TextStyle(
                fontSize: 12,
                color: Colors.grey[600],
              ),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildReferralSection() {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.purple[50]!, Colors.blue[50]!],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          borderRadius: BorderRadius.circular(12),
        ),
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            Text(
              "Earn Free Days!",
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                    color: Colors.blue[900],
                    fontWeight: FontWeight.bold,
                  ),
            ),
            const SizedBox(height: 24),
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                children: [
                  Text(
                    "Your Referral Code",
                    style: TextStyle(
                      color: Colors.grey[600],
                      fontSize: 12,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    customerData?['referralCode'] ?? 'N/A',
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Colors.blue[900],
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),
            _buildReferralRewards(),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: () {
              },
              icon: const Icon(Icons.share),
              label: Text("Share & Earn",
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.grey[600],
                  )),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue[600],
                padding: const EdgeInsets.symmetric(
                  horizontal: 24,
                  vertical: 12,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildReferralRewards() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.star, color: Colors.amber[400], size: 20),
              const SizedBox(width: 8),
              Text(
                "Rewards",
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Colors.grey[600],
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          _buildRewardItem("7 Free Days - Monthly Plan Referral"),
          _buildRewardItem("3 Free Days - Weekly Plan Referral"),
          _buildRewardItem("1 Free Day - Daily Plan Referral"),
        ],
      ),
    );
  }
  Widget _buildRewardItem(String text) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        children: [
          Icon(Icons.check, color: Colors.green[600], size: 16),
          const SizedBox(width: 8),
          Text(
            text,
            style: TextStyle(fontSize: 12, color: Colors.grey[600]),
          ),
        ],
      ),
    );
  }
  Widget _buildPaymentHistory() {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text("Payment History",
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.grey[600],
                )),
            const SizedBox(height: 16),
            ...payments.map((payment) => _buildPaymentItem(payment)),
          ],
        ),
      ),
    );
  }
  Widget _buildPaymentItem(Map<String, dynamic> payment) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.grey[50],
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.blue[100],
              shape: BoxShape.circle,
            ),
            child: Icon(
              Icons.payment,
              color: Colors.blue[700],
              size: 20,
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  "UGX ${payment['amount']}",
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Colors.grey[600],
                  ),
                ),
                Text(
                  DateFormat('MMM d, y').format(
                    DateTime.parse(payment['paymentDate']),
                  ),
                  style: TextStyle(
                    color: Colors.grey[600],
                    fontSize: 12,
                  ),
                ),
              ],
            ),
          ),
          Icon(
            payment['isConfirmed'] ? Icons.check_circle : Icons.pending,
            color:
                payment['isConfirmed'] ? Colors.green[600] : Colors.orange[600],
          ),
        ],
      ),
    );
  }
  Widget _buildDowntimeHistory() {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              "Service Updates",
              style: Theme.of(context)
                  .textTheme
                  .titleLarge!
                  .copyWith(color: Colors.grey[600]),
            ),
            const SizedBox(height: 16),
            ...downtimes.map((downtime) => _buildDowntimeItem(downtime)),
          ],
        ),
      ),
    );
  }
  Widget _buildDowntimeItem(Map<String, dynamic> downtime) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.grey[50],
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.orange[100],
              shape: BoxShape.circle,
            ),
            child: Icon(
              Icons.info_outline,
              color: Colors.orange[700],
              size: 20,
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  "Downtime Duration: ${downtime['durationHours']} hours",
                  style: TextStyle(
                      fontWeight: FontWeight.bold, color: Colors.grey[600]),
                ),
                Text(
                  DateFormat('MMM d, y - h:mm a').format(
                    DateTime.parse(downtime['timestamp']),
                  ),
                  style: TextStyle(
                    color: Colors.grey[600],
                    fontSize: 12,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildEnhancedFooter() {
    return Container(
      color: Colors.grey[100],
      padding: const EdgeInsets.symmetric(vertical: 24, horizontal: 16),
      child: Column(
        children: [
          Text(
            "Truthy Systems",
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 8),
          Text(
            "Delivering Premium WiFi Solutions",
            style: TextStyle(
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 16),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.email, size: 16, color: Colors.blue[700]),
              const SizedBox(width: 8),
              Text(
                "truthysys@proton.me",
                style: TextStyle(
                  color: Colors.blue[700],
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.phone, size: 16, color: Colors.blue[700]),
              const SizedBox(width: 8),
              Text(
                "+256-783-009649",
                style: TextStyle(
                  color: Colors.blue[700],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
  Widget _buildErrorScreen() {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(Icons.error_outline, size: 64, color: Colors.red[400]),
            const SizedBox(height: 16),
            Text(
              error!,
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                    color: Colors.red[400],
                  ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _fetchData,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue[600],
                padding: const EdgeInsets.symmetric(
                  horizontal: 32,
                  vertical: 16,
                ),
              ),
              child: const Text("Retry"),
            ),
          ],
        ),
      ),
    );
  }
}

================
File: screens/customers_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../database/models/customer.dart';
import '../providers/database_provider.dart';
import '../services/ad_manager.dart';
class CustomersScreen extends ConsumerStatefulWidget {
  const CustomersScreen({super.key});
  @override
  ConsumerState<CustomersScreen> createState() => _CustomersScreenState();
}
class _CustomersScreenState extends ConsumerState<CustomersScreen> {
  final AdManager _adManager = AdManager();
  final ScrollController _scrollController = ScrollController();
  bool _isLoadingMore = false;
  static const int _itemsPerAd = 8;
  @override
  void initState() {
    super.initState();
    _initializeAds();
    _setupScrollListener();
  }
  Future<void> _initializeAds() async {
    await _adManager.initializeBannerAd();
    await _adManager.initializeInterstitialAd();
  }
  void _setupScrollListener() {
    _scrollController.addListener(() {
      if (_scrollController.position.pixels >
          _scrollController.position.maxScrollExtent * 0.7) {
        _loadMoreAds();
      }
    });
  }
  Future<void> _loadMoreAds() async {
    if (!_isLoadingMore) {
      setState(() => _isLoadingMore = true);
      await _adManager.initializeInterstitialAd();
      setState(() => _isLoadingMore = false);
    }
  }
  Future<void> _handleCustomerTap(
    BuildContext context,
    Customer customer,
  ) async {
    if (!_isLoadingMore && DateTime.now().second % 5 == 0) {
      final bool adShown = await _adManager.showInterstitialAd();
      if (adShown) {
        await Future.delayed(const Duration(milliseconds: 500));
      }
    }
    if (mounted) {
      Navigator.pushNamed(
        context,
        '/customer/${customer.id}',
        arguments: customer,
      );
    }
  }
  @override
  void dispose() {
    _scrollController.dispose();
    _adManager.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    final customersAsync = ref.watch(activeCustomersProvider);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Active Customers'),
        actions: [
          IconButton(
            icon: const Icon(Icons.people_outline),
            onPressed: () {
              Navigator.pushNamed(context, '/inactive-customers');
            },
          ),
        ],
      ),
      body: Column(
        children: [
          Expanded(
            child: customersAsync.when(
              data:
                  (customers) =>
                      customers.isEmpty
                          ? const Center(child: Text('No active customers'))
                          : ListView.builder(
                            controller: _scrollController,
                            itemCount:
                                customers.length +
                                (customers.length ~/ _itemsPerAd),
                            itemBuilder: (context, index) {
                              final customerIndex =
                                  index - (index ~/ (_itemsPerAd + 1));
                              if (index > 0 && index % (_itemsPerAd + 1) == 0) {
                                return Card(
                                  margin: const EdgeInsets.symmetric(
                                    horizontal: 8,
                                    vertical: 4,
                                  ),
                                  child: Container(
                                    padding: const EdgeInsets.symmetric(
                                      vertical: 8,
                                    ),
                                    child: _adManager.getBannerAdWidget(
                                      maxWidth:
                                          MediaQuery.of(context).size.width -
                                          32,
                                    ),
                                  ),
                                );
                              }
                              final customer = customers[customerIndex];
                              return CustomerListTile(
                                customer: customer,
                                onTap:
                                    () => _handleCustomerTap(context, customer),
                              );
                            },
                          ),
              loading: () => const Center(child: CircularProgressIndicator()),
              error: (error, stack) => Center(child: Text('Error: $error')),
            ),
          ),
          Container(
            decoration: BoxDecoration(
              color: Theme.of(context).cardColor,
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 4,
                  offset: const Offset(0, -2),
                ),
              ],
            ),
            child: SafeArea(
              child: _adManager.getBannerAdWidget(
                maxWidth: MediaQuery.of(context).size.width,
              ),
            ),
          ),
        ],
      ),
    );
  }
}
class CustomerListTile extends StatelessWidget {
  final Customer customer;
  final VoidCallback onTap;
  const CustomerListTile({
    super.key,
    required this.customer,
    required this.onTap,
  });
  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      child: ListTile(
        onTap: onTap,
        title: Text(
          customer.name,
          style: const TextStyle(fontWeight: FontWeight.bold),
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const SizedBox(height: 4),
            Text(
              'Expires: ${DateFormat('MMM dd, yyyy - hh:mm a').format(customer.subscriptionEnd)}',
              style: TextStyle(
                color:
                    customer.subscriptionEnd.difference(DateTime.now()).inDays <
                            3
                        ? Colors.red
                        : null,
              ),
            ),
          ],
        ),
        trailing: IconButton(
          icon: const Icon(Icons.edit),
          onPressed:
              () => Navigator.pushNamed(
                context,
                '/edit-customer/${customer.id}',
                arguments: customer,
              ),
        ),
      ),
    );
  }
}

================
File: screens/downtime_input_screen.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../database/models/customer.dart';
import '../providers/database_provider.dart';
import '../providers/subscription_provider.dart';
import '../services/subscription_notification_service.dart';
class DowntimeInputScreen extends ConsumerStatefulWidget {
  const DowntimeInputScreen({super.key});
  @override
  ConsumerState<DowntimeInputScreen> createState() =>
      _DowntimeInputScreenState();
}
class _DowntimeInputScreenState extends ConsumerState<DowntimeInputScreen> {
  final _formKey = GlobalKey<FormState>();
  Duration _downtimeDuration = Duration.zero;
  @override
  Widget build(BuildContext context) {
    final database = ref.watch(databaseProvider);
    return Scaffold(
      appBar: AppBar(title: const Text('Manage Downtime')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Form(
              key: _formKey,
              child: Column(
                children: [
                  TextFormField(
                    decoration: const InputDecoration(
                      labelText: 'Downtime Duration (in hours)',
                      border: OutlineInputBorder(),
                    ),
                    keyboardType: TextInputType.number,
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter a duration';
                      }
                      if (int.tryParse(value) == null) {
                        return 'Please enter a valid number';
                      }
                      return null;
                    },
                    onSaved: (value) {
                      _downtimeDuration = Duration(hours: int.parse(value!));
                    },
                  ),
                  const SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: _applyDowntime,
                    child: const Text('Apply Downtime'),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 20),
            const Text('Past Downtimes',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            Expanded(
              child: StreamBuilder<QuerySnapshot>(
                stream: database.firestore
                    .collection(database.getUserCollectionPath('downtime_logs'))
                    .orderBy('timestamp', descending: true)
                    .limit(50)
                    .snapshots(),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return const Center(child: CircularProgressIndicator());
                  }
                  if (snapshot.hasError) {
                    return Center(child: Text('Error: ${snapshot.error}'));
                  }
                  if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
                    return const Center(
                        child: Text('No past downtimes recorded.'));
                  }
                  final downtimes = snapshot.data!.docs;
                  return ListView.builder(
                    itemCount: downtimes.length,
                    itemBuilder: (context, index) {
                      final downtime =
                          downtimes[index].data() as Map<String, dynamic>;
                      final timestamp =
                          DateTime.parse(downtime['timestamp'] as String);
                      final durationHours = downtime['durationHours'] as int;
                      final affectedCustomers =
                          (downtime['affectedCustomers'] as List<dynamic>)
                              .cast<String>();
                      return ExpansionTile(
                        title: Text(
                          'Downtime: $durationHours hours on ${DateFormat('MMM d, y - h:mm a').format(timestamp)}',
                        ),
                        subtitle:
                            Text('Affected Users: ${affectedCustomers.length}'),
                        children: [
                          Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: affectedCustomers
                                  .map((customerId) =>
                                      FutureBuilder<DocumentSnapshot>(
                                        future: database.firestore
                                            .collection(
                                                database.getUserCollectionPath(
                                                    'customers'))
                                            .doc(customerId)
                                            .get(),
                                        builder: (context, customerSnapshot) {
                                          if (!customerSnapshot.hasData) {
                                            return const SizedBox.shrink();
                                          }
                                          final customerData =
                                              customerSnapshot.data!.data()
                                                  as Map<String, dynamic>?;
                                          return Text(customerData?['name'] ??
                                              'Unknown Customer');
                                        },
                                      ))
                                  .toList(),
                            ),
                          ),
                        ],
                      );
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
  Future<void> _applyDowntime() async {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();
      final confirmed = await showDialog<bool>(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text('Confirm Downtime'),
          content: Text(
              'Extend all active subscriptions by ${_downtimeDuration.inHours} hours?'),
          actions: [
            TextButton(
                onPressed: () => Navigator.pop(context, false),
                child: const Text('Cancel')),
            ElevatedButton(
                onPressed: () => Navigator.pop(context, true),
                child: const Text('Confirm')),
          ],
        ),
      );
      if (confirmed != true || !mounted) return;
      final database = ref.read(databaseProvider);
      final snapshot = await database.firestore
          .collection(database.getUserCollectionPath('customers'))
          .where('isActive', isEqualTo: true)
          .get();
      final activeCustomers = snapshot.docs
          .map((doc) => Customer.fromJson(doc.id, doc.data()))
          .toList();
      final batch = database.firestore.batch();
      for (final customer in activeCustomers) {
        customer.subscriptionEnd =
            customer.subscriptionEnd.add(_downtimeDuration);
        batch.set(
          database.firestore
              .collection(database.getUserCollectionPath('customers'))
              .doc(customer.id),
          customer.toJson(),
        );
      }
      final downtimeLog = {
        'durationHours': _downtimeDuration.inHours,
        'timestamp': DateTime.now().toIso8601String(),
        'userId': FirebaseAuth.instance.currentUser?.uid ?? 'unknown',
        'affectedCustomers': activeCustomers.map((c) => c.id).toList(),
      };
      final logRef = database.firestore
          .collection(database.getUserCollectionPath('downtime_logs'))
          .doc();
      batch.set(logRef, downtimeLog);
      await batch.commit();
      for (final customer in activeCustomers) {
        await SubscriptionNotificationService.scheduleSingleExpirationNotification(
            customer);
        final message =
            'Your subscription has been extended by ${_downtimeDuration.inHours} hours due to downtime.';
        print('Notification sent to ${customer.name}: $message');
      }
      if (mounted) {
        ref.invalidate(activeCustomersProvider);
        ref.invalidate(expiringSubscriptionsProvider);
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Downtime applied successfully')),
        );
        Navigator.pop(context);
      }
    }
  }
}

================
File: screens/edit_customer_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../database/models/customer.dart';
import '../database/models/plan.dart';
import '../providers/customer_provider.dart';
import '../providers/database_provider.dart';
class EditCustomerScreen extends ConsumerStatefulWidget {
  final Customer customer;
  const EditCustomerScreen({super.key, required this.customer});
  @override
  ConsumerState<EditCustomerScreen> createState() => _EditCustomerScreenState();
}
class _EditCustomerScreenState extends ConsumerState<EditCustomerScreen> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameController;
  late TextEditingController _contactController;
  late TextEditingController _wifiNameController;
  late TextEditingController _passwordController;
  late bool _isActive;
  late PlanType _selectedPlan;
  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.customer.name);
    _contactController = TextEditingController(text: widget.customer.contact);
    _wifiNameController = TextEditingController(text: widget.customer.wifiName);
    _passwordController = TextEditingController(
      text: widget.customer.currentPassword,
    );
    _isActive = widget.customer.isActive;
    _selectedPlan = widget.customer.planType;
  }
  @override
  void dispose() {
    _nameController.dispose();
    _contactController.dispose();
    _wifiNameController.dispose();
    _passwordController.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Edit Customer'),
        actions: [
          IconButton(icon: const Icon(Icons.save), onPressed: _saveCustomer),
        ],
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            TextFormField(
              controller: _nameController,
              decoration: const InputDecoration(
                labelText: 'Name',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter a name';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _contactController,
              decoration: const InputDecoration(
                labelText: 'Contact',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter contact info';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _wifiNameController,
              decoration: const InputDecoration(
                labelText: 'WiFi Name',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter WiFi name';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _passwordController,
              decoration: const InputDecoration(
                labelText: 'Password',
                border: OutlineInputBorder(),
                suffixIcon: Icon(Icons.wifi_password),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return 'Please enter password';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            SwitchListTile(
              title: const Text('Active Customer'),
              value: _isActive,
              onChanged: (value) => setState(() => _isActive = value),
            ),
            const SizedBox(height: 16),
            DropdownButtonFormField<PlanType>(
              value: _selectedPlan,
              decoration: const InputDecoration(
                labelText: 'Plan',
                border: OutlineInputBorder(),
              ),
              items:
                  PlanType.values.map((plan) {
                    return DropdownMenuItem(
                      value: plan,
                      child: Text(plan.name),
                    );
                  }).toList(),
              onChanged: (PlanType? value) {
                if (value != null) {
                  setState(() => _selectedPlan = value);
                }
              },
            ),
          ],
        ),
      ),
    );
  }
  void _saveCustomer() async {
    if (_formKey.currentState?.validate() ?? false) {
      final updatedCustomer = Customer(
        name: _nameController.text,
        contact: _contactController.text,
        isActive: _isActive,
        wifiName: _wifiNameController.text,
        currentPassword: _passwordController.text,
        subscriptionStart: widget.customer.subscriptionStart,
        subscriptionEnd: widget.customer.subscriptionEnd,
        planType: _selectedPlan,
      )..id = widget.customer.id;
      try {
        await ref.read(databaseProvider).saveCustomer(updatedCustomer);
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Customer updated successfully')),
          );
          Navigator.pop(context);
          ref.invalidate(activeCustomersProvider);
          ref.invalidate(inactiveCustomersProvider);
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error updating customer: $e')),
          );
        }
      }
    }
  }
}

================
File: screens/expiring_subscriptions_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:intl/intl.dart';
import 'package:url_launcher/url_launcher.dart';
import '../database/models/customer.dart';
import '../providers/subscription_provider.dart';
import '../services/ad_manager.dart';
class ExpiringSubscriptionsScreen extends ConsumerStatefulWidget {
  const ExpiringSubscriptionsScreen({super.key});
  @override
  ConsumerState<ExpiringSubscriptionsScreen> createState() =>
      _ExpiringSubscriptionsScreenState();
}
class _ExpiringSubscriptionsScreenState
    extends ConsumerState<ExpiringSubscriptionsScreen> {
  final AdManager _adManager = AdManager();
  int _actionCount = 0;
  @override
  void initState() {
    super.initState();
    _initializeAds();
  }
  Future<void> _initializeAds() async {
    await _adManager.initializeBannerAd(
      size: AdSize.banner,
    );
    await _adManager.initializeInterstitialAd(
    );
  }
  @override
  void dispose() {
    _adManager.dispose();
    super.dispose();
  }
  Future<void> _incrementActionAndShowAd() async {
    _actionCount++;
    if (_actionCount % 3 == 0) {
      await _adManager.showInterstitialAd();
    }
  }
  @override
  Widget build(BuildContext context) {
    final expiringSubscriptions = ref.watch(expiringSubscriptionsProvider);
    return Scaffold(
      appBar: AppBar(title: const Text('Expiring Subscriptions')),
      body: Column(
        children: [
          Expanded(
            child: expiringSubscriptions.when(
              data:
                  (customers) =>
                      customers.isEmpty
                          ? const Center(
                            child: Text('No expiring subscriptions'),
                          )
                          : ListView.builder(
                            itemCount: customers.length,
                            itemBuilder: (context, index) {
                              final customer = customers[index];
                              final daysUntilExpiry =
                                  customer.subscriptionEnd
                                      .difference(DateTime.now())
                                      .inDays;
                              return ListTile(
                                leading: CircleAvatar(
                                  backgroundColor: _getExpiryColor(
                                    daysUntilExpiry,
                                  ),
                                  child: Text(
                                    daysUntilExpiry.toString(),
                                    style: const TextStyle(color: Colors.white),
                                  ),
                                ),
                                title: Text(customer.name),
                                subtitle: Text(
                                  '${_formatExpiryTime(customer.subscriptionEnd, daysUntilExpiry)}\n${DateFormat('MMM dd, yyyy - hh:mm a').format(customer.subscriptionEnd)}\nPlan: ${customer.planType.name}',
                                ),
                                isThreeLine: true,
                                trailing: Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    IconButton(
                                      icon: const Icon(Icons.phone),
                                      onPressed: () {
                                        _makeCall(customer.contact);
                                        _incrementActionAndShowAd();
                                      },
                                    ),
                                    IconButton(
                                      icon: const Icon(Icons.message),
                                      onPressed: () {
                                        _sendMessage(
                                          customer.contact,
                                          context,
                                          customer,
                                          daysUntilExpiry,
                                        );
                                        _incrementActionAndShowAd();
                                      },
                                    ),
                                  ],
                                ),
                                onTap: () {
                                  _showRenewalDialog(context, ref, customer);
                                  _incrementActionAndShowAd();
                                },
                              );
                            },
                          ),
              loading: () => const Center(child: CircularProgressIndicator()),
              error: (error, stack) => Center(child: Text('Error: $error')),
            ),
          ),
          SafeArea(
            child: Center(
              child: _adManager.getBannerAdWidget(
                maxWidth: MediaQuery.of(context).size.width,
              ),
            ),
          ),
        ],
      ),
    );
  }
  Color _getExpiryColor(int days) {
    if (days <= 1) return Colors.red;
    if (days <= 2) return Colors.orange;
    return Colors.yellow.shade700;
  }
  String _formatExpiryTime(DateTime subscriptionEnd, int daysUntilExpiry) {
    final now = DateTime.now();
    final difference = subscriptionEnd.difference(now);
    if (daysUntilExpiry > 0) {
      return 'Expires: ${DateFormat('MMM d, y - hh:mm a').format(subscriptionEnd)}';
    } else if (difference.inHours.abs() < 24) {
      final hours = difference.inHours.abs();
      final prefix = difference.isNegative ? 'Expired' : 'Expires';
      return '$prefix in $hours hour${hours != 1 ? 's' : ''}';
    } else if (difference.inMinutes.abs() < 60) {
      final minutes = difference.inMinutes.abs();
      final prefix = difference.isNegative ? 'Expired' : 'Expires';
      return '$prefix in $minutes minute${minutes != 1 ? 's' : ''}';
    } else {
      final expiredDays = (-daysUntilExpiry).abs();
      return 'Expired $expiredDays day${expiredDays != 1 ? 's' : ''} ago';
    }
  }
  Future<void> _makeCall(String contact) async {
    final url = Uri.parse('tel:$contact');
    if (await canLaunchUrl(url)) {
      await launchUrl(url);
    }
  }
  Future<void> _sendMessage(
    String contact,
    BuildContext context,
    Customer customer,
    int daysUntilExpiry,
  ) async {
    final messageOptions = await showDialog<String>(
      context: context,
      builder:
          (context) => AlertDialog(
            title: const Text('Send Message'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                ListTile(
                  leading: const Icon(Icons.message),
                  title: const Text('SMS'),
                  onTap: () => Navigator.pop(context, 'sms'),
                ),
                ListTile(
                  leading: const Icon(Icons.whatshot),
                  title: const Text('WhatsApp Business'),
                  onTap: () => Navigator.pop(context, 'whatsapp'),
                ),
              ],
            ),
          ),
    );
    if (messageOptions == null) return;
    final expiryStatus = _formatExpiryTime(
      customer.subscriptionEnd,
      daysUntilExpiry,
    );
    final planType = customer.planType.name;
    final message = Uri.encodeComponent(
      'Dear ${customer.name},\n\n'
      'This is a reminder regarding your WiFi subscription status:\n\n'
      '• Plan Type: $planType\n'
      '• Status: $expiryStatus\n\n'
      'Please renew your subscription to ensure uninterrupted service. '
      'You can process the renewal through our app or contact our support team.\n\n'
      'Thank you for choosing our services.\n\n'
      'Best regards,\n'
      'Your WiFi Service Provider',
    );
    final url =
        messageOptions == 'whatsapp'
            ? Uri.parse(
              'https://wa.me/${contact.replaceAll(RegExp(r'[^0-9]'), '')}?text=$message',
            )
            : Uri.parse('sms:$contact?body=$message');
    if (await canLaunchUrl(url)) {
      await launchUrl(url);
    }
  }
  Future<void> _showRenewalDialog(
    BuildContext context,
    WidgetRef ref,
    Customer customer,
  ) async {
    return showDialog(
      context: context,
      builder:
          (context) => AlertDialog(
            title: const Text('Renew Subscription'),
            content: Text(
              'Renew ${customer.name}\'s ${customer.planType.name} plan?',
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('CANCEL'),
              ),
              ElevatedButton(
                onPressed: () {
                  Navigator.pop(context);
                  Navigator.pushNamed(
                    context,
                    '/payments',
                    arguments: customer,
                  );
                },
                child: const Text('RENEW'),
              ),
            ],
          ),
    );
  }
}

================
File: screens/home_screen.dart
================
import 'dart:async';
import 'dart:math';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../database/models/customer.dart';
import '../providers/database_provider.dart';
import '../providers/notification_schedule_provider.dart';
import '../providers/payment_provider.dart';
import '../providers/subscription_provider.dart';
import '../services/ad_manager.dart';
import '../services/app_preferences.dart';
import '../services/subscription_widget_service.dart';
import 'login_screen.dart';
import 'package:tutorial_coach_mark/tutorial_coach_mark.dart';
class HomeScreen extends ConsumerStatefulWidget {
  const HomeScreen({super.key});
  @override
  ConsumerState<HomeScreen> createState() => _HomeScreenState();
}
class _HomeScreenState extends ConsumerState<HomeScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  final AdManager _adManager = AdManager();
  String _filter = 'This Month';
  final GlobalKey _customersKey = GlobalKey();
  final GlobalKey _paymentsKey = GlobalKey();
  final GlobalKey _expiringKey = GlobalKey();
  final GlobalKey _downtimeKey = GlobalKey();
  final GlobalKey _billingKey = GlobalKey();
  final GlobalKey _retentionKey = GlobalKey();
  final GlobalKey _howToKey = GlobalKey();
  final GlobalKey _settingsKey = GlobalKey();
  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1200),
    );
    _controller.forward();
    _initializeAds();
    Timer.periodic(const Duration(minutes: 2), (timer) {
      _adManager.initializeInterstitialAd();
    });
    WidgetsBinding.instance.addPostFrameCallback((_) {
      ref.invalidate(expiringSubscriptionsProvider);
      ref.invalidate(activeCustomersProvider);
      ref.invalidate(paymentSummaryProvider);
      ref.invalidate(scheduledNotificationsProvider);
    });
    _checkAndShowTutorial();
  }
  Future<void> _checkAndShowTutorial() async {
    final isFirstTime = await AppPreferences.isFirstTime();
    if (isFirstTime && mounted) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        _showTutorial();
      });
    }
  }
  void _showTutorial() {
    final tutorial = TutorialCoachMark(
      targets: _createTargets(),
      colorShadow: Colors.black.withOpacity(0.8),
      paddingFocus: 10,
      opacityShadow: 0.8,
      onFinish: () async {
        await AppPreferences.setNotFirstTime();
      },
      onSkip: () {
        AppPreferences.setNotFirstTime();
        return true;
      },
    );
    tutorial.show(context: context);
  }
  List<TargetFocus> _createTargets() {
    return [
      TargetFocus(
        identify: "customers",
        keyTarget: _customersKey,
        contents: [
          TargetContent(
            align: ContentAlign.bottom,
            builder: (context, controller) => const Text(
              "View and manage your active customers here.",
              style: TextStyle(color: Colors.white, fontSize: 16),
            ),
          ),
        ],
        shape: ShapeLightFocus.RRect,
        radius: 10,
      ),
      TargetFocus(
        identify: "payments",
        keyTarget: _paymentsKey,
        contents: [
          TargetContent(
            align: ContentAlign.bottom,
            builder: (context, controller) => const Text(
              "Track customer payments and billing cycles.",
              style: TextStyle(color: Colors.white, fontSize: 16),
            ),
          ),
        ],
        shape: ShapeLightFocus.RRect,
        radius: 10,
      ),
      TargetFocus(
        identify: "expiring",
        keyTarget: _expiringKey,
        contents: [
          TargetContent(
            align: ContentAlign.bottom,
            builder: (context, controller) => const Text(
              "Monitor subscriptions nearing their end.",
              style: TextStyle(color: Colors.white, fontSize: 16),
            ),
          ),
        ],
        shape: ShapeLightFocus.RRect,
        radius: 10,
      ),
    ];
  }
  Future<void> _initializeAds() async {
    await _adManager.initializeBannerAd();
    await _adManager.initializeInterstitialAd();
    await _adManager.initializeRewardedAd();
  }
  @override
  void dispose() {
    _adManager.dispose();
    _controller.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    final authService = ref.read(authServiceProvider);
    if (authService.currentUser == null) return const LoginScreen();
    final activeCustomers =
        ref.watch(activeCustomersProvider);
    final expiringSubscriptions = ref.watch(expiringSubscriptionsProvider);
    ref.listen(expiringSubscriptionsProvider, (previous, next) {
      next.whenData((customers) {
        activeCustomers.whenData((activeCount) {
          ref.watch(paymentSummaryProvider).whenData((summary) {
            print(
                'Sending to widget: expiring=${customers.length}, active=${activeCount.length}, revenue=${summary['total'] ?? 0.0}');
            SubscriptionWidgetService.updateWidgetData(
              customers,
              activeCount.length,
              summary['total'] ?? 0.0,
            );
          });
        });
      });
    });
    return Scaffold(
      backgroundColor: const Color(0xFF1A1A1A),
      extendBodyBehindAppBar: true,
      appBar: _GlassmorphicAppBar(
        title: 'WiFi Manager',
        onNotificationTap: () =>
            Navigator.pushNamed(context, '/scheduled-reminders'),
      ),
      body: Stack(
        children: [
          _AnimatedBackground(),
          SafeArea(
            child: SingleChildScrollView(
              physics: const BouncingScrollPhysics(),
              child: Column(
                children: [
                  Padding(
                    padding: const EdgeInsets.all(12.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        _buildFilterBar(),
                        const SizedBox(height: 16),
                        _buildStatsSection(activeCustomers,
                            expiringSubscriptions),
                        const SizedBox(height: 16),
                        _adManager.getBannerAdWidget(
                            maxWidth: MediaQuery.of(context).size.width - 24),
                        const SizedBox(height: 16),
                        _buildQuickActions(),
                        const SizedBox(height: 16),
                        _adManager.getBannerAdWidget(
                            maxWidth: MediaQuery.of(context).size.width - 24),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildFilterBar() {
    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: Row(
        children: ['Today', 'This Week', 'This Month']
            .map((filter) => Padding(
                  padding: const EdgeInsets.only(right: 8.0),
                  child: ChoiceChip(
                    label: Text(filter),
                    selected: _filter == filter,
                    onSelected: (selected) {
                      if (selected) setState(() => _filter = filter);
                    },
                    selectedColor: Colors.blueAccent.withOpacity(0.3),
                    backgroundColor: Colors.white.withOpacity(0.1),
                    labelStyle: TextStyle(
                        color:
                            _filter == filter ? Colors.white : Colors.white70),
                  ),
                ))
            .toList(),
      ),
    );
  }
  Widget _buildStatsSection(AsyncValue<List<Customer>> activeCustomers,
      AsyncValue<List<Customer>> expiringSubscriptions) {
    return Column(
      children: [
        Row(
          children: [
            Expanded(
                child: _buildStatCard(_customersKey, 'Active', activeCustomers,
                    Colors.green, '/customers')),
            const SizedBox(width: 12),
            Expanded(
                child: _buildStatCard(
                    _expiringKey,
                    'Expiring Today',
                    expiringSubscriptions,
                    Colors.red,
                    '/expiring-subscriptions')),
          ],
        ),
        const SizedBox(height: 12),
        Row(
          children: [
            Expanded(
                child: _buildStatCard(
                    _paymentsKey,
                    'Revenue',
                    ref.watch(paymentSummaryProvider),
                    Colors.blue,
                    '/payments')),
            const SizedBox(width: 12),
            Expanded(
                child: _buildStatCard(_retentionKey, 'New This Week',
                    activeCustomers, Colors.purple, '/customers')),
          ],
        ),
      ],
    );
  }
  Widget _buildStatCard(
      GlobalKey key, String title, AsyncValue data, Color color, String route) {
    return GestureDetector(
      onTap: () => Navigator.pushNamed(context, route),
      child: Container(
        key: key,
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.1),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: Colors.white.withOpacity(0.2)),
        ),
        child: data.when(
          data: (value) => Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(title,
                  style: const TextStyle(color: Colors.white70, fontSize: 14)),
              const SizedBox(height: 8),
              Text(
                title == 'Revenue'
                    ? 'UGX ${value['total']?.toStringAsFixed(0) ?? '0'}'
                    : title == 'New This Week'
                        ? '${value.where((Customer customer) => customer.subscriptionStart.isAfter(DateTime.now().subtract(const Duration(days: 7)))).length}'
                        : title == 'Expiring Today'
                            ? '${value.where((Customer customer) => customer.subscriptionEnd.difference(DateTime.now()).inDays <= 0).length}'
                            : '${value.length}',
                style: TextStyle(
                    color: color, fontSize: 24, fontWeight: FontWeight.bold),
              ),
              if (title == 'Revenue')
                Text('Monthly',
                    style:
                        const TextStyle(color: Colors.white70, fontSize: 12)),
            ],
          ),
          loading: () => const CircularProgressIndicator(),
          error: (_, __) => const Icon(Icons.error, color: Colors.red),
        ),
      ),
    );
  }
  Widget _buildQuickActions() {
    return GridView.count(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      crossAxisCount: 2,
      mainAxisSpacing: 12,
      crossAxisSpacing: 12,
      childAspectRatio: 1.5,
      children: [
        _buildActionButton('Add Customer', CupertinoIcons.person_add_solid,
            Colors.green, '/add-customer'),
        _buildActionButton('Payments', CupertinoIcons.money_dollar_circle_fill,
            Colors.blue, '/payments'),
        _buildActionButton('Customers', CupertinoIcons.person_2_fill,
            Colors.purple, '/customers'),
        _buildActionButton(
            'Expiring',
            CupertinoIcons.exclamationmark_triangle_fill,
            Colors.orange,
            '/expiring-subscriptions'),
        _buildActionButton(
            'Downtime', CupertinoIcons.clock, Colors.red, '/downtime-input'),
        _buildActionButton('Billing', CupertinoIcons.money_dollar, Colors.teal,
            '/billing-cycles'),
        _buildActionButton('Retention', CupertinoIcons.chart_bar_fill,
            Colors.cyan, '/retention'),
      ],
    );
  }
  Widget _buildActionButton(
      String title, IconData icon, Color color, String route) {
    return GestureDetector(
      onTap: () => Navigator.pushNamed(context, route),
      child: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
              colors: [color.withOpacity(0.7), color.withOpacity(0.5)]),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: Colors.white.withOpacity(0.2)),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 32, color: Colors.white),
            const SizedBox(height: 8),
            Text(title,
                style: const TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold)),
          ],
        ),
      ),
    );
  }
}
class _AnimatedBackground extends StatefulWidget {
  @override
  State<_AnimatedBackground> createState() => _AnimatedBackgroundState();
}
class _AnimatedBackgroundState extends State<_AnimatedBackground>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 10),
    )..repeat(reverse: true);
  }
  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _controller,
      builder: (context, child) {
        return CustomPaint(
          size: Size.infinite,
          painter: _GradientPainter(animation: _controller),
        );
      },
    );
  }
}
class _GradientPainter extends CustomPainter {
  final Animation<double> animation;
  _GradientPainter({required this.animation}) : super(repaint: animation);
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint();
    final rect = Offset.zero & size;
    final gradient = RadialGradient(
      center: Alignment(
        0.7 * sin(animation.value * pi * 2),
        0.7 * cos(animation.value * pi * 2),
      ),
      colors: const [Color(0xFF1A237E), Color(0xFF0D47A1), Color(0xFF1A1A1A)],
      stops: const [0.0, 0.5, 1.0],
      radius: 1.5,
    );
    paint.shader = gradient.createShader(rect);
    canvas.drawRect(rect, paint);
  }
  @override
  bool shouldRepaint(_GradientPainter oldDelegate) => true;
}
class _GlassmorphicAppBar extends ConsumerWidget
    implements PreferredSizeWidget {
  final String title;
  final VoidCallback onNotificationTap;
  const _GlassmorphicAppBar({
    required this.title,
    required this.onNotificationTap,
  });
  @override
  Size get preferredSize => const Size.fromHeight(kToolbarHeight);
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final expiringSubscriptions = ref.watch(expiringSubscriptionsProvider);
    return ClipRRect(
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
        child: Container(
          height: preferredSize.height + MediaQuery.of(context).padding.top,
          decoration: BoxDecoration(
            color: Colors.black.withOpacity(0.2),
            border: const Border(
              bottom: BorderSide(color: Colors.white10, width: 0.5),
            ),
          ),
          child: SafeArea(
            child: Row(
              children: [
                const SizedBox(width: 16),
                Text(
                  title,
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const Spacer(),
                IconButton(
                  icon: const Icon(Icons.help),
                  onPressed: () => Navigator.pushNamed(context, '/how-to'),
                ),
                Stack(
                  children: [
                    IconButton(
                      icon: const Icon(
                        CupertinoIcons.bell,
                        color: Colors.white,
                      ),
                      onPressed: onNotificationTap,
                    ),
                    expiringSubscriptions.when(
                      data: (customers) {
                        if (customers.isEmpty) return const SizedBox.shrink();
                        return Positioned(
                          right: 8,
                          top: 8,
                          child: TweenAnimationBuilder<double>(
                            tween: Tween(begin: 0.0, end: 1.0),
                            duration: const Duration(milliseconds: 300),
                            builder: (context, value, child) {
                              return Transform.scale(
                                scale: value,
                                child: Container(
                                  padding: const EdgeInsets.all(6),
                                  decoration: BoxDecoration(
                                    color: Colors.orange.withOpacity(0.9),
                                    shape: BoxShape.circle,
                                    boxShadow: [
                                      BoxShadow(
                                        color: Colors.orange.withOpacity(0.3),
                                        blurRadius: 4,
                                        spreadRadius: 1,
                                      ),
                                    ],
                                  ),
                                  child: Text(
                                    customers.length.toString(),
                                    style: const TextStyle(
                                      color: Colors.white,
                                      fontSize: 10,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ),
                              );
                            },
                          ),
                        );
                      },
                      loading: () => const SizedBox.shrink(),
                      error: (_, __) => const SizedBox.shrink(),
                    ),
                  ],
                ),
                const SizedBox(width: 8),
                IconButton(
                  icon: const Icon(Icons.settings),
                  onPressed: () => Navigator.pushNamed(context, '/settings'),
                  color: Colors.white,
                ),
                const SizedBox(width: 8),
                IconButton(
                  icon: const Icon(Icons.logout),
                  onPressed: () async {
                    final authService = ref.read(authServiceProvider);
                    await authService.signOut();
                    Navigator.pushReplacementNamed(context, '/login');
                  },
                  color: Colors.white,
                ),
                const SizedBox(width: 8),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
class _GlassmorphicActionCard extends StatefulWidget {
  final String title;
  final IconData icon;
  final List<Color> gradient;
  final VoidCallback onTap;
  const _GlassmorphicActionCard({
    required this.title,
    required this.icon,
    required this.gradient,
    required this.onTap,
  });
  @override
  State<_GlassmorphicActionCard> createState() =>
      _GlassmorphicActionCardState();
}
class _GlassmorphicActionCardState extends State<_GlassmorphicActionCard>
    with SingleTickerProviderStateMixin {
  late AnimationController _hoverController;
  late Animation<double> _scaleAnimation;
  bool _isHovered = false;
  @override
  void initState() {
    super.initState();
    _hoverController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 200),
    );
    _scaleAnimation = Tween<double>(begin: 1.0, end: 1.05).animate(
      CurvedAnimation(parent: _hoverController, curve: Curves.easeOutCubic),
    );
  }
  @override
  void dispose() {
    _hoverController.dispose();
    super.dispose();
  }
  void _onHoverChanged(bool isHovered) {
    setState(() {
      _isHovered = isHovered;
      if (isHovered) {
        _hoverController.forward();
      } else {
        _hoverController.reverse();
      }
    });
  }
  @override
  Widget build(BuildContext context) {
    return MouseRegion(
      onEnter: (_) => _onHoverChanged(true),
      onExit: (_) => _onHoverChanged(false),
      child: GestureDetector(
        onTapDown: (_) => _onHoverChanged(true),
        onTapUp: (_) => _onHoverChanged(false),
        onTapCancel: () => _onHoverChanged(false),
        onTap: widget.onTap,
        child: AnimatedBuilder(
          animation: _scaleAnimation,
          builder: (context, child) {
            return Transform.scale(scale: _scaleAnimation.value, child: child);
          },
          child: ClipRRect(
            borderRadius: BorderRadius.circular(16),
            child: BackdropFilter(
              filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
              child: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [
                      widget.gradient[0].withOpacity(0.7),
                      widget.gradient[1].withOpacity(0.7),
                    ],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(
                    color: Colors.white.withOpacity(_isHovered ? 0.3 : 0.1),
                    width: 0.5,
                  ),
                  boxShadow: [
                    BoxShadow(
                      color: widget.gradient[0].withOpacity(0.3),
                      blurRadius: _isHovered ? 12 : 8,
                      spreadRadius: _isHovered ? 2 : 0,
                    ),
                  ],
                ),
                child: Stack(
                  children: [
                    if (_isHovered)
                      AnimatedPositioned(
                        duration: const Duration(milliseconds: 1500),
                        curve: Curves.easeInOut,
                        left: _isHovered ? -100 : 0,
                        top: _isHovered ? -100 : 0,
                        child: Container(
                          width: 200,
                          height: 200,
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            gradient: RadialGradient(
                              colors: [
                                widget.gradient[0].withOpacity(0.3),
                                Colors.transparent,
                              ],
                            ),
                          ),
                        ),
                      ),
                    Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(
                            widget.icon,
                            size: 32,
                            color: Colors.white.withOpacity(0.9),
                          ),
                          const SizedBox(height: 12),
                          Text(
                            widget.title,
                            style: TextStyle(
                              color: Colors.white.withOpacity(0.9),
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}

================
File: screens/how_to_screen.dart
================
import 'package:flutter/material.dart';
class HowToScreen extends StatelessWidget {
  const HowToScreen({super.key});
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('How To Use Truthy WiFi Manager'),
        backgroundColor: Colors.black.withOpacity(0.2),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Getting Started',
              style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
            ),
            const SizedBox(height: 16),
            Text(
              'Learn how to manage your WiFi subscriptions efficiently with Truthy WiFi Manager. Follow these steps to get the most out of the app.',
              style: Theme.of(context).textTheme.bodyLarge,
            ),
            const SizedBox(height: 24),
            _buildSection(
              context,
              'Sign In or Register',
              [
                'Open the app and sign in with your email or phone number.',
                'New user? Tap "Create one" to register.',
                'Use biometric authentication if enabled for faster access.',
              ],
            ),
            _buildSection(
              context,
              'Add a Customer',
              [
                'From the Home screen, tap "Add Customer".',
                'Enter the customer’s name, contact, and optional referral code.',
                'Select a plan (Daily, Weekly, Monthly) and save.',
                'WiFi credentials will be generated automatically.',
              ],
            ),
            _buildSection(
              context,
              'Manage Payments',
              [
                'Go to "Payments" from the Home screen.',
                'Tap the "+" icon to add a payment for a customer.',
                'View payment history and generate receipts.',
              ],
            ),
            _buildSection(
              context,
              'Handle Downtime',
              [
                'Navigate to "Downtime" from the Home screen.',
                'Enter the downtime duration in hours and confirm.',
                'All active subscriptions will be extended automatically.',
              ],
            ),
            _buildSection(
              context,
              'Track Referrals',
              [
                'View a customer’s referral code in their details.',
                'Share it to earn free subscription days.',
                'Check referral stats from the customer detail screen.',
              ],
            ),
            _buildSection(
              context,
              'Monitor Insights',
              [
                'Visit "Retention" for churn and retention rates.',
                'Check "Billing Cycles" for income and profit summaries.',
                'Review expiring subscriptions under "Expiring".',
              ],
            ),
            const SizedBox(height: 24),
            Text(
              'Need Help?',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 8),
            Text(
              'Contact our 24/7 support at truthysys@proton.me or +256-783-009649.',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildSection(BuildContext context, String title, List<String> steps) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: Theme.of(context).textTheme.titleLarge,
        ),
        const SizedBox(height: 8),
        ...steps.asMap().entries.map((entry) => Padding(
              padding: const EdgeInsets.only(bottom: 4),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('${entry.key + 1}. ', style: Theme.of(context).textTheme.bodyMedium),
                  Expanded(
                    child: Text(entry.value, style: Theme.of(context).textTheme.bodyMedium),
                  ),
                ],
              ),
            )),
        const SizedBox(height: 16),
      ],
    );
  }
}

================
File: screens/inactive_customers_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../database/models/customer.dart';
import '../providers/customer_provider.dart';
import '../providers/database_provider.dart';
import '../services/subscription_notification_service.dart';
import '../widgets/add_payment_dialog.dart';
class InactiveCustomersScreen extends ConsumerWidget {
  const InactiveCustomersScreen({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final inactiveCustomersAsync = ref.watch(inactiveCustomersProvider);
    return Scaffold(
      appBar: AppBar(title: const Text('Inactive Customers')),
      body: inactiveCustomersAsync.when(
        data: (customers) {
          if (customers.isEmpty) {
            return const Center(child: Text('No inactive customers found.'));
          }
          return ListView.builder(
            itemCount: customers.length,
            itemBuilder: (context, index) {
              final customer = customers[index];
              return _InactiveCustomerTile(
                customer: customer,
                onDelete: (deleteAssociatedData) async {
                  final database = ref.read(databaseProvider);
                  await database.deleteCustomerWithData(
                    customer.id,
                    deleteAssociatedData,
                  );
                  ref.invalidate(inactiveCustomersProvider);
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('Customer deleted successfully'),
                    ),
                  );
                },
                onActivate: () async {
                  await _activateCustomer(context, ref, customer);
                },
                onAddPaymentAndActivate: () async {
                  await _addPaymentAndActivate(context, ref, customer);
                },
              );
            },
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text('Error: $error')),
      ),
    );
  }
  Future<void> _activateCustomer(
      BuildContext context, WidgetRef ref, Customer customer) async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Activate Customer'),
        content: Text('Are you sure you want to activate ${customer.name}?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(context, true),
            child: const Text('Activate'),
          ),
        ],
      ),
    );
    if (confirmed == true) {
      final database = ref.read(databaseProvider);
      await database.activateCustomer(customer.id);
      ref.invalidate(inactiveCustomersProvider);
      ref.invalidate(activeCustomersProvider);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('${customer.name} has been activated')),
      );
      final message =
          'Your subscription has been reactivated. Thank you for choosing our services!';
      await SubscriptionNotificationService.scheduleSingleExpirationNotification(
          customer);
      print('Notification sent to ${customer.name}: $message');
    }
  }
  Future<void> _addPaymentAndActivate(
      BuildContext context, WidgetRef ref, Customer customer) async {
    final result = await showDialog<bool>(
      context: context,
      builder: (context) => AddPaymentDialog(customer: customer),
    );
    if (result == true) {
      final database = ref.read(databaseProvider);
      await database.activateCustomer(customer.id);
      ref.invalidate(inactiveCustomersProvider);
      ref.invalidate(activeCustomersProvider);
      ref.invalidate(recentPaymentsProvider);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('${customer.name} has been activated and payment added')),
      );
      final message =
          'Your subscription has been reactivated with a new payment. Thank you!';
      await SubscriptionNotificationService.scheduleSingleExpirationNotification(
          customer);
      print('Notification sent to ${customer.name}: $message');
    }
  }
}
class _InactiveCustomerTile extends StatelessWidget {
  final Customer customer;
  final Function(bool) onDelete;
  final VoidCallback onActivate;
  final VoidCallback onAddPaymentAndActivate;
  const _InactiveCustomerTile({
    required this.customer,
    required this.onDelete,
    required this.onActivate,
    required this.onAddPaymentAndActivate,
  });
  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.all(8),
      child: ListTile(
        title: Text(customer.name),
        subtitle: Text(
          'Expired: ${DateFormat('MMM d, y').format(customer.subscriptionEnd)}',
        ),
        trailing: PopupMenuButton<String>(
          itemBuilder: (context) => [
            const PopupMenuItem(
              value: 'activate',
              child: Text('Activate Customer'),
            ),
            const PopupMenuItem(
              value: 'add_payment_and_activate',
              child: Text('Add Payment & Activate'),
            ),
            const PopupMenuItem(
              value: 'delete',
              child: Text('Delete Customer'),
            ),
            const PopupMenuItem(
              value: 'delete_with_data',
              child: Text('Delete Customer with All Data'),
            ),
          ],
          onSelected: (value) {
            if (value == 'activate') {
              onActivate();
            } else if (value == 'add_payment_and_activate') {
              onAddPaymentAndActivate();
            } else if (value == 'delete') {
              onDelete(false);
            } else if (value == 'delete_with_data') {
              onDelete(true);
            }
          },
        ),
      ),
    );
  }
}

================
File: screens/login_screen.dart
================
import 'dart:math';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../services/auth_service.dart';
final authServiceProvider = Provider<AuthService>((ref) => AuthService());
class LoginScreen extends ConsumerStatefulWidget {
  const LoginScreen({super.key});
  @override
  ConsumerState<LoginScreen> createState() => _LoginScreenState();
}
class _LoginScreenState extends ConsumerState<LoginScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _phoneController = TextEditingController();
  final _smsCodeController = TextEditingController();
  bool _rememberMe = true;
  bool _isLoading = false;
  bool _isPasswordVisible = false;
  String? _errorMessage;
  bool _usePhone = false;
  String? _verificationId;
  int? _resendToken;
  bool _canUseBiometrics = false;
  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1000),
    );
    _fadeAnimation = CurvedAnimation(
      parent: _controller,
      curve: Curves.easeOut,
    );
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 0.2),
      end: Offset.zero,
    ).animate(CurvedAnimation(parent: _controller, curve: Curves.easeOutCubic));
    _controller.forward();
    _checkSessionAndBiometrics();
  }
  Future<void> _checkSessionAndBiometrics() async {
    final authService = ref.read(authServiceProvider);
    final canCheckBiometrics = await authService.localAuth.canCheckBiometrics;
    final isDeviceSupported = await authService.localAuth.isDeviceSupported();
    setState(() => _canUseBiometrics = canCheckBiometrics && isDeviceSupported);
    if (await authService.isSessionValid()) {
      if (_canUseBiometrics) {
        _promptBiometricAuth();
      } else {
        _navigateToHome();
      }
    }
  }
  Future<void> _promptBiometricAuth() async {
    final authService = ref.read(authServiceProvider);
    final authenticated = await authService.authenticateWithBiometrics();
    if (authenticated) {
      _navigateToHome();
    } else {
      setState(() => _errorMessage =
          'Biometric authentication failed. Please sign in manually.');
    }
  }
  @override
  void dispose() {
    _controller.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    _phoneController.dispose();
    _smsCodeController.dispose();
    super.dispose();
  }
  void _showErrorSnackbar(String message) {
    setState(() => _errorMessage = message);
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF1A1A1A),
      body: Stack(
        children: [
          _AnimatedBackground(),
          SafeArea(
            child: FadeTransition(
              opacity: _fadeAnimation,
              child: SlideTransition(
                position: _slideAnimation,
                child: Center(
                  child: SingleChildScrollView(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        _GlassmorphicCard(
                          child: Padding(
                            padding: const EdgeInsets.all(24),
                            child: Column(
                              children: [
                                const Text(
                                  'Welcome Back!',
                                  style: TextStyle(
                                      fontSize: 24,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.white),
                                ),
                                const SizedBox(height: 8),
                                const Text(
                                  'Sign in to manage your WiFi subscriptions and customers.',
                                  style: TextStyle(
                                      color: Colors.white70, fontSize: 14),
                                  textAlign: TextAlign.center,
                                ),
                                const SizedBox(height: 24),
                                if (_errorMessage != null)
                                  Container(
                                    padding: const EdgeInsets.all(8),
                                    margin: const EdgeInsets.only(bottom: 16),
                                    decoration: BoxDecoration(
                                      color: Colors.red.withOpacity(0.1),
                                      borderRadius: BorderRadius.circular(8),
                                      border: Border.all(
                                          color: Colors.red.withOpacity(0.3)),
                                    ),
                                    child: Text(
                                      _errorMessage!,
                                      style: const TextStyle(
                                          color: Colors.red, fontSize: 14),
                                    ),
                                  ),
                                if (!_usePhone) ...[
                                  TextFormField(
                                    controller: _emailController,
                                    decoration: const InputDecoration(
                                      labelText: 'Email',
                                      border: OutlineInputBorder(),
                                      prefixIcon: Icon(Icons.email),
                                    ),
                                  ),
                                  const SizedBox(height: 16),
                                  TextFormField(
                                    controller: _passwordController,
                                    obscureText: !_isPasswordVisible,
                                    decoration: InputDecoration(
                                      labelText: 'Password',
                                      border: const OutlineInputBorder(),
                                      prefixIcon: const Icon(Icons.lock),
                                      suffixIcon: IconButton(
                                        icon: Icon(_isPasswordVisible
                                            ? Icons.visibility_off
                                            : Icons.visibility),
                                        onPressed: () => setState(() =>
                                            _isPasswordVisible =
                                                !_isPasswordVisible),
                                      ),
                                    ),
                                  ),
                                ] else ...[
                                  TextFormField(
                                    controller: _phoneController,
                                    decoration: const InputDecoration(
                                      labelText:
                                          'Phone Number (e.g., +256123456789)',
                                      border: OutlineInputBorder(),
                                      prefixIcon: Icon(Icons.phone),
                                    ),
                                    keyboardType: TextInputType.phone,
                                  ),
                                  if (_verificationId != null) ...[
                                    const SizedBox(height: 16),
                                    TextFormField(
                                      controller: _smsCodeController,
                                      decoration: const InputDecoration(
                                        labelText: 'SMS Code',
                                        border: OutlineInputBorder(),
                                        prefixIcon: Icon(Icons.message),
                                      ),
                                      keyboardType: TextInputType.number,
                                    ),
                                  ],
                                ],
                                Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceBetween,
                                  children: [
                                    Row(
                                      children: [
                                        Checkbox(
                                          value: _rememberMe,
                                          onChanged: (value) => setState(() =>
                                              _rememberMe = value ?? false),
                                        ),
                                        const Text('Stay Signed In'),
                                      ],
                                    ),
                                    if (!_usePhone)
                                      TextButton(
                                        onPressed: _showResetPasswordDialog,
                                        child: const Text('Forgot Password?',
                                            style: TextStyle(
                                                color: Colors.blueAccent)),
                                      ),
                                  ],
                                ),
                                const SizedBox(height: 24),
                                SizedBox(
                                  width: double.infinity,
                                  child: ElevatedButton(
                                    onPressed: _isLoading ? null : _login,
                                    style: ElevatedButton.styleFrom(
                                      padding: const EdgeInsets.symmetric(
                                          horizontal: 32, vertical: 16),
                                      backgroundColor: Colors.black54,
                                    ),
                                    child: _isLoading
                                        ? const SizedBox(
                                            height: 20,
                                            width: 20,
                                            child: CircularProgressIndicator(
                                                strokeWidth: 2,
                                                valueColor:
                                                    AlwaysStoppedAnimation<
                                                        Color>(Colors.white)),
                                          )
                                        : Text(_usePhone
                                            ? (_verificationId == null
                                                ? 'Send Code'
                                                : 'Verify Code')
                                            : 'Sign In'),
                                  ),
                                ),
                                const SizedBox(height: 16),
                                TextButton(
                                  onPressed: () {
                                    setState(() {
                                      _usePhone = !_usePhone;
                                      _verificationId = null;
                                      _smsCodeController.clear();
                                      _errorMessage = null;
                                    });
                                  },
                                  child: Text(
                                    _usePhone
                                        ? 'Use Email Instead'
                                        : 'Use Phone Number Instead',
                                    style: const TextStyle(
                                        color: Colors.blueAccent),
                                  ),
                                ),
                                if (_canUseBiometrics)
                                  TextButton(
                                    onPressed: _promptBiometricAuth,
                                    child: const Text('Use Biometrics',
                                        style: TextStyle(
                                            color: Colors.blueAccent)),
                                  ),
                                const SizedBox(height: 16),
                                TextButton(
                                  onPressed: () =>
                                      Navigator.pushNamed(context, '/register'),
                                  child: const Text(
                                      'Don\'t have an account? Create one',
                                      style:
                                          TextStyle(color: Colors.blueAccent)),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
 Future<void> _login() async {
    if (!_validateInputs()) return;
    setState(() => _isLoading = true);
    try {
      final authService = ref.read(authServiceProvider);
      if (_usePhone) {
        if (_verificationId == null) {
          await authService.signInWithPhoneNumber(
            phoneNumber: _phoneController.text,
            onCodeSent: (verificationId, resendToken) {
              setState(() {
                _verificationId = verificationId;
                _resendToken = resendToken;
                _isLoading = false;
              });
            },
            onCompleted: (result) {
              if (result.user != null) _navigateToHome();
              setState(() => _isLoading = false);
            },
            onError: (error) {
              _showErrorSnackbar(error);
              setState(() => _isLoading = false);
            },
          );
        } else {
          final result = await authService.verifyPhoneCode(
            verificationId: _verificationId!,
            smsCode: _smsCodeController.text,
          );
          if (result.user != null) {
            _navigateToHome();
          } else {
            _showErrorSnackbar(result.error ?? 'Verification failed');
          }
          setState(() => _isLoading = false);
        }
      } else {
        final result = await authService.signInWithPersistence(
          _emailController.text,
          _passwordController.text,
          _rememberMe,
        );
        if (result.user != null) {
          if (result.requiresVerification) {
            _showVerificationDialog();
          } else {
            _navigateToHome();
          }
        } else {
          _showErrorSnackbar(result.error ?? 'Login failed');
        }
        setState(() => _isLoading = false);
      }
    } catch (e) {
      _showErrorSnackbar('An unexpected error occurred: $e');
      setState(() => _isLoading = false);
    }
  }
  bool _validateInputs() {
    if (_usePhone) {
      if (_phoneController.text.isEmpty) {
        _showErrorSnackbar('Please enter a phone number');
        return false;
      }
      if (_verificationId != null && _smsCodeController.text.isEmpty) {
        _showErrorSnackbar('Please enter the SMS code');
        return false;
      }
      if (!RegExp(r'^\+\d{9,15}$').hasMatch(_phoneController.text)) {
        _showErrorSnackbar(
            'Please enter a valid phone number (e.g., +256123456789)');
        return false;
      }
    } else {
      if (_emailController.text.isEmpty || _passwordController.text.isEmpty) {
        _showErrorSnackbar('Please fill in all fields');
        return false;
      }
      if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$')
          .hasMatch(_emailController.text)) {
        _showErrorSnackbar('Please enter a valid email');
        return false;
      }
    }
    return true;
  }
 void _showVerificationDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('Verify Your Email'),
        content: const Text('Please check your email and verify your account before continuing.'),
        actions: [
          TextButton(
            onPressed: () async {
              final authService = ref.read(authServiceProvider);
              await authService.verifyEmail();
              ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Verification email sent')));
            },
            child: const Text('Resend Email'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }
  void _showResetPasswordDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Reset Password'),
        content: TextField(
          controller: _emailController,
          decoration: const InputDecoration(labelText: 'Email', hintText: 'Enter your email address'),
        ),
        actions: [
          TextButton(
            onPressed: () async {
              try {
                final authService = ref.read(authServiceProvider);
                await authService.resetPassword(_emailController.text);
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Password reset email sent')));
              } catch (e) {
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(e.toString())));
              }
            },
            child: const Text('Send Reset Link'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
        ],
      ),
    );
  }
  void _navigateToHome() {
    Navigator.pushReplacementNamed(context, '/home');
  }
}
class _AnimatedBackground extends StatefulWidget {
  @override
  State<_AnimatedBackground> createState() => _AnimatedBackgroundState();
}
class _AnimatedBackgroundState extends State<_AnimatedBackground>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 10),
    )..repeat(reverse: true);
  }
  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _controller,
      builder: (context, child) {
        return CustomPaint(
          size: Size.infinite,
          painter: _GradientPainter(animation: _controller),
        );
      },
    );
  }
}
class _GradientPainter extends CustomPainter {
  final Animation<double> animation;
  _GradientPainter({required this.animation}) : super(repaint: animation);
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint();
    final rect = Offset.zero & size;
    final gradient = RadialGradient(
      center: Alignment(
        0.7 * sin(animation.value * pi * 2),
        0.7 * cos(animation.value * pi * 2),
      ),
      colors: const [Color(0xFF1A237E), Color(0xFF0D47A1), Color(0xFF1A1A1A)],
      stops: const [0.0, 0.5, 1.0],
      radius: 1.5,
    );
    paint.shader = gradient.createShader(rect);
    canvas.drawRect(rect, paint);
  }
  @override
  bool shouldRepaint(_GradientPainter oldDelegate) => true;
}
class _GlassmorphicCard extends StatelessWidget {
  final Widget child;
  const _GlassmorphicCard({required this.child});
  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(16),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
        child: Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.1),
            borderRadius: BorderRadius.circular(16),
            border: Border.all(color: Colors.white.withOpacity(0.2)),
          ),
          child: child,
        ),
      ),
    );
  }
}
class RegisterScreen extends ConsumerStatefulWidget {
  const RegisterScreen({super.key});
  @override
  ConsumerState<RegisterScreen> createState() => _RegisterScreenState();
}
class _RegisterScreenState extends ConsumerState<RegisterScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _phoneController = TextEditingController();
  final _smsCodeController = TextEditingController();
  bool _usePhone = false;
  String? _verificationId;
  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1000),
    );
    _fadeAnimation = CurvedAnimation(
      parent: _controller,
      curve: Curves.easeOut,
    );
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 0.2),
      end: Offset.zero,
    ).animate(CurvedAnimation(parent: _controller, curve: Curves.easeOutCubic));
    _controller.forward();
  }
  @override
  void dispose() {
    _controller.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    _phoneController.dispose();
    _smsCodeController.dispose();
    super.dispose();
  }
 @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF1A1A1A),
      body: Stack(
        children: [
          _AnimatedBackground(),
          SafeArea(
            child: FadeTransition(
              opacity: _fadeAnimation,
              child: SlideTransition(
                position: _slideAnimation,
                child: Center(
                  child: SingleChildScrollView(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        _GlassmorphicCard(
                          child: Padding(
                            padding: const EdgeInsets.all(24),
                            child: Column(
                              children: [
                                const Text(
                                  'Create an Account',
                                  style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.white),
                                ),
                                const SizedBox(height: 8),
                                const Text(
                                  'Join us to manage your WiFi subscriptions and customers with ease.',
                                  style: TextStyle(color: Colors.white70, fontSize: 14),
                                  textAlign: TextAlign.center,
                                ),
                                const SizedBox(height: 24),
                                if (!_usePhone) ...[
                                  TextFormField(
                                    controller: _emailController,
                                    decoration: const InputDecoration(
                                      labelText: 'Email',
                                      border: OutlineInputBorder(),
                                      prefixIcon: Icon(Icons.email),
                                    ),
                                  ),
                                  const SizedBox(height: 16),
                                  TextFormField(
                                    controller: _passwordController,
                                    obscureText: true,
                                    decoration: const InputDecoration(
                                      labelText: 'Password',
                                      border: OutlineInputBorder(),
                                      prefixIcon: Icon(Icons.lock),
                                    ),
                                  ),
                                ] else ...[
                                  TextFormField(
                                    controller: _phoneController,
                                    decoration: const InputDecoration(
                                      labelText: 'Phone Number (e.g., +256123456789)',
                                      border: OutlineInputBorder(),
                                      prefixIcon: Icon(Icons.phone),
                                    ),
                                    keyboardType: TextInputType.phone,
                                  ),
                                  if (_verificationId != null) ...[
                                    const SizedBox(height: 16),
                                    TextFormField(
                                      controller: _smsCodeController,
                                      decoration: const InputDecoration(
                                        labelText: 'SMS Code',
                                        border: OutlineInputBorder(),
                                        prefixIcon: Icon(Icons.message),
                                      ),
                                      keyboardType: TextInputType.number,
                                    ),
                                  ],
                                ],
                                const SizedBox(height: 24),
                                ElevatedButton(
                                  onPressed: () async {
                                    final authService = ref.read(authServiceProvider);
                                    if (_usePhone) {
                                      if (_verificationId == null) {
                                        await authService.registerWithPhoneNumber(
                                          phoneNumber: _phoneController.text,
                                          onCodeSent: (verificationId, resendToken) {
                                            setState(() {
                                              _verificationId = verificationId;
                                            });
                                          },
                                          onCompleted: (result) {
                                            if (result.user != null) {
                                              Navigator.pushReplacementNamed(context, '/home');
                                            }
                                          },
                                          onError: (error) {
                                            ScaffoldMessenger.of(context).showSnackBar(
                                              SnackBar(content: Text(error ?? 'Failed to register')),
                                            );
                                          },
                                        );
                                      } else {
                                        final result = await authService.verifyPhoneCode(
                                          verificationId: _verificationId!,
                                          smsCode: _smsCodeController.text,
                                        );
                                        if (result.user != null) {
                                          Navigator.pushReplacementNamed(context, '/home');
                                        } else {
                                          ScaffoldMessenger.of(context).showSnackBar(
                                            SnackBar(content: Text(result.error ?? 'Verification failed')),
                                          );
                                        }
                                      }
                                    } else {
                                      final user = await authService.register(
                                        _emailController.text,
                                        _passwordController.text,
                                      );
                                      if (user.user != null) {
                                        Navigator.pushReplacementNamed(context, '/home');
                                      }
                                    }
                                  },
                                  style: ElevatedButton.styleFrom(
                                    padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                                    backgroundColor: Colors.black54,
                                  ),
                                  child: Text(_usePhone
                                      ? (_verificationId == null ? 'Send Code' : 'Verify Code')
                                      : 'Sign Up'),
                                ),
                                const SizedBox(height: 16),
                                TextButton(
                                  onPressed: () {
                                    setState(() {
                                      _usePhone = !_usePhone;
                                      _verificationId = null;
                                      _smsCodeController.clear();
                                    });
                                  },
                                  child: Text(
                                    _usePhone ? 'Use Email Instead' : 'Use Phone Number Instead',
                                    style: const TextStyle(color: Colors.blueAccent),
                                  ),
                                ),
                                const SizedBox(height: 16),
                                TextButton(
                                  onPressed: () => Navigator.pushNamed(context, '/login'),
                                  child: const Text(
                                    'Already have an account? Sign In',
                                    style: TextStyle(color: Colors.blueAccent),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

================
File: screens/payments_screen.dart
================
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:intl/intl.dart';
import '../database/models/payment.dart';
import '../providers/customer_provider.dart';
import '../providers/payment_provider.dart';
import '../services/ad_manager.dart';
import '../widgets/add_payment_dialog.dart';
import '../widgets/receipt_button.dart';
class PaymentsScreen extends ConsumerStatefulWidget {
  const PaymentsScreen({super.key});
  @override
  ConsumerState<PaymentsScreen> createState() => _PaymentsScreenState();
}
class _PaymentsScreenState extends ConsumerState<PaymentsScreen> {
  final AdManager _adManager = AdManager();
  @override
  void initState() {
    super.initState();
    _initializeAds();
  }
  Future<void> _initializeAds() async {
    await _adManager.initializeBannerAd(size: AdSize.mediumRectangle);
    await _adManager.initializeInterstitialAd();
  }
  @override
  void dispose() {
    _showExitInterstitial();
    _adManager.dispose();
    super.dispose();
  }
  Future<void> _showExitInterstitial() async {
    await _adManager.showInterstitialAd();
  }
  @override
  Widget build(BuildContext context) {
    final paymentsAsync = ref.watch(filteredPaymentsProvider);
    final summaryAsync = ref.watch(paymentSummaryProvider);
    return WillPopScope(
      onWillPop: () async {
        await _showExitInterstitial();
        return true;
      },
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Payment History'),
          actions: [
            IconButton(
              icon: const Icon(CupertinoIcons.calendar),
              onPressed: () => _showDateRangePicker(context),
            ),
            IconButton(
              icon: const Icon(CupertinoIcons.add),
              onPressed: () => _showAddPaymentDialog(context),
            ),
          ],
        ),
        body: Column(
          children: [
            Consumer(
              builder: (context, ref, child) {
                final dateRange = ref.watch(selectedDateRangeProvider);
                if (dateRange == null) return const SizedBox.shrink();
                return Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Chip(
                    label: Text(
                      '${DateFormat('MMM d').format(dateRange.start)} - '
                      '${DateFormat('MMM d').format(dateRange.end)}',
                    ),
                    onDeleted: () =>
                        ref.read(selectedDateRangeProvider.notifier).state = null,
                  ),
                );
              },
            ),
            _PaymentSummaryCard(summaryAsync: summaryAsync),
            Expanded(
              child: paymentsAsync.when(
                data: (payments) => payments.isEmpty
                    ? const Center(child: Text('No payments found'))
                    : ListView.builder(
                        itemCount: payments.length,
                        itemBuilder: (context, index) =>
                            _PaymentListTile(payment: payments[index]),
                      ),
                loading: () => const Center(child: CircularProgressIndicator()),
                error: (error, stack) => Center(child: Text('Error: $error')),
              ),
            ),
            Center(
              child: _adManager.getBannerAdWidget(
                maxWidth: MediaQuery.of(context).size.width,
              ),
            ),
          ],
        ),
      ),
    );
  }
  Future<void> _showDateRangePicker(BuildContext context) async {
    final dateRange = await showDateRangePicker(
      context: context,
      firstDate: DateTime.now().subtract(const Duration(days: 365)),
      lastDate: DateTime.now(),
      currentDate: DateTime.now(),
    );
    if (dateRange != null && mounted) {
      ref.read(selectedDateRangeProvider.notifier).state = dateRange;
    }
  }
  Future<void> _showAddPaymentDialog(BuildContext context) async {
    final result = await showDialog(
      context: context,
      builder: (context) => const AddPaymentDialog(),
    );
    if (result == true) {
      await _adManager.showInterstitialAd();
    }
  }
}
class _PaymentSummaryCard extends StatelessWidget {
  final AsyncValue<Map<String, double>> summaryAsync;
  const _PaymentSummaryCard({required this.summaryAsync});
  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.all(8),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: summaryAsync.when(
          data: (summary) => Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Total Revenue: UGX ${summary['total']?.toStringAsFixed(0)}',
                style: Theme.of(context).textTheme.titleLarge,
              ),
              const Divider(),
              _SummaryRow(title: 'Daily Plans:', amount: summary['daily'] ?? 0),
              _SummaryRow(title: 'Weekly Plans:', amount: summary['weekly'] ?? 0),
              _SummaryRow(title: 'Monthly Plans:', amount: summary['monthly'] ?? 0),
            ],
          ),
          loading: () => const Center(child: CircularProgressIndicator()),
          error: (error, stack) => Center(child: Text('Error: $error')),
        ),
      ),
    );
  }
}
class _SummaryRow extends StatelessWidget {
  final String title;
  final double amount;
  const _SummaryRow({required this.title, required this.amount});
  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [Text(title), Text('UGX ${amount.toStringAsFixed(0)}')],
      ),
    );
  }
}
class _PaymentListTile extends ConsumerWidget {
  final Payment payment;
  const _PaymentListTile({required this.payment});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final customerAsync = ref.watch(customerProvider(payment.customerId));
    return ListTile(
      leading: Icon(
        payment.isConfirmed ? Icons.check_circle : Icons.pending,
        color: payment.isConfirmed ? Colors.green : Colors.orange,
      ),
      title: customerAsync.when(
        data: (customer) => Row(
          children: [
            Text(customer?.name ?? 'Unknown Customer'),
            if (customer != null && !customer.isActive)
              const Padding(
                padding: EdgeInsets.only(left: 8.0),
                child: Text(
                  '(Inactive)',
                  style: TextStyle(color: Colors.red, fontSize: 12),
                ),
              ),
          ],
        ),
        loading: () => const Text('Loading...'),
        error: (_, __) => const Text('Unknown Customer'),
      ),
      subtitle: Text(
        '${payment.planType.name} - ${DateFormat('MMM d, y - h:mm a').format(payment.paymentDate)}',
      ),
      trailing: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            'UGX ${payment.amount.toStringAsFixed(0)}',
            style: Theme.of(context).textTheme.titleMedium,
          ),
          ReceiptButton(payment: payment),
        ],
      ),
    );
  }
}

================
File: screens/referral_stats_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../providers/referral_stats_provider.dart';
class ReferralStatsScreen extends ConsumerWidget {
  final String referrerId;
  const ReferralStatsScreen({super.key, required this.referrerId});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final referralStatsAsync = ref.watch(referralStatsProvider(referrerId));
    final totalReferralsAsync = ref.watch(totalReferralsProvider(referrerId));
    final totalRewardDurationAsync = ref.watch(
      totalRewardDurationProvider(referrerId),
    );
    return Scaffold(
      appBar: AppBar(title: const Text('Referral Stats')),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Total Referrals',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    totalReferralsAsync.when(
                      data:
                          (totalReferrals) => Text(
                            totalReferrals.toString(),
                            style: const TextStyle(
                              fontSize: 24,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                      loading: () => const CircularProgressIndicator(),
                      error:
                          (e, __) => SelectableText(
                            e.toString(),
                          ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Total Reward Duration',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    totalRewardDurationAsync.when(
                      data:
                          (totalRewardDuration) => Text(
                            '${totalRewardDuration.inDays} days',
                            style: const TextStyle(
                              fontSize: 24,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                      loading: () => const CircularProgressIndicator(),
                      error: (_, __) => const Icon(Icons.error),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              'Referral History',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            referralStatsAsync.when(
              data:
                  (referralStats) => ListView.builder(
                    shrinkWrap: true,
                    physics: const NeverScrollableScrollPhysics(),
                    itemCount: referralStats.length,
                    itemBuilder: (context, index) {
                      final referral = referralStats[index];
                      final rewardDuration = Duration(
                        milliseconds: referral.rewardDurationMillis,
                      );
                      return ListTile(
                        title: Text(
                          'Referred Customer: ${referral.referredCustomerId}',
                        ),
                        subtitle: Text(
                          'Date: ${DateFormat('MMM d, y').format(referral.referralDate)}\n'
                          'Reward: ${rewardDuration.inDays} days',
                        ),
                      );
                    },
                  ),
              loading: () => const CircularProgressIndicator(),
              error: (_, __) => const Icon(Icons.error),
            ),
          ],
        ),
      ),
    );
  }
}

================
File: screens/retention_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../providers/retention_provider.dart';
class RetentionScreen extends ConsumerWidget {
  const RetentionScreen({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final retentionData = ref.watch(retentionProvider);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Retention Dashboard'),
      ),
      body: retentionData.when(
        data: (data) => SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildSummaryCard(
                'Retention Rate',
                '${data['retentionRate'].toStringAsFixed(1)}%',
                'Percentage of customers still active',
                Colors.green,
              ),
              const SizedBox(height: 16),
              _buildSummaryCard(
                'Churn Rate',
                '${data['churnRate'].toStringAsFixed(1)}%',
                'Percentage of customers lost',
                Colors.red,
              ),
              const SizedBox(height: 16),
              _buildSummaryCard(
                'Active Customers',
                data['activeCount'].toString(),
                'Total active subscriptions',
                Colors.blue,
              ),
              const SizedBox(height: 16),
              _buildSummaryCard(
                'Inactive Customers',
                data['inactiveCount'].toString(),
                'Total inactive subscriptions',
                Colors.grey,
              ),
              const SizedBox(height: 24),
              const Text(
                'Last 30 Days',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white),
              ),
              const SizedBox(height: 8),
              _buildSummaryCard(
                'New Customers',
                data['newCustomersLast30Days'].toString(),
                'Customers added in last 30 days',
                Colors.purple,
              ),
              const SizedBox(height: 16),
              _buildSummaryCard(
                'Lost Customers',
                data['lostCustomersLast30Days'].toString(),
                'Customers lost in last 30 days',
                Colors.orange,
              ),
            ],
          ),
        ),
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (e, _) => Center(child: Text('Error: $e', style: TextStyle(color: Colors.white))),
      ),
    );
  }
  Widget _buildSummaryCard(String title, String value, String subtitle, Color color) {
    return Card(
      color: Colors.white.withOpacity(0.1),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(title, style: TextStyle(fontSize: 16, color: Colors.white70)),
            const SizedBox(height: 8),
            Text(value, style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: color)),
            const SizedBox(height: 4),
            Text(subtitle, style: TextStyle(fontSize: 12, color: Colors.white54)),
          ],
        ),
      ),
    );
  }
}

================
File: screens/scheduled_reminders_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../providers/notification_schedule_provider.dart';
class ScheduledRemindersScreen extends ConsumerWidget {
  const ScheduledRemindersScreen({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final scheduledNotificationsAsync = ref.watch(
      scheduledNotificationsProvider,
    );
    return Scaffold(
      appBar: AppBar(title: const Text('Scheduled Reminders')),
      body: scheduledNotificationsAsync.when(
        data: (notifications) {
          if (notifications.isEmpty) {
            return const Center(child: Text('No scheduled reminders.'));
          }
          return ListView.builder(
            padding: const EdgeInsets.all(16),
            itemCount: notifications.length,
            itemBuilder: (context, index) {
              final notification = notifications[index];
              return Card(
                child: ListTile(
                  title: Text(notification['customerName']??''),
                  subtitle: Text(
                    'Scheduled for: ${DateFormat('MMM d, y - h:mm a').format(notification['notificationTime']??DateTime.now())}\n'
                    'Message: ${notification['message']??''}',
                  ),
                ),
              );
            },
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error:
            (e, stackTrace) => Center(
              child: SelectableText('Failed to load reminders. $e \n $stackTrace'),
            ),
      ),
    );
  }
}

================
File: screens/settings_screen.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../database/models/customer.dart';
import '../database/models/plan.dart';
import '../database/repository/database_repository.dart';
import '../providers/database_provider.dart';
import '../services/subscription_notification_service.dart';
class SettingsScreen extends ConsumerStatefulWidget {
  const SettingsScreen({super.key});
  @override
  ConsumerState<SettingsScreen> createState() => _SettingsScreenState();
}
class _SettingsScreenState extends ConsumerState<SettingsScreen> {
  late double _dailyPrice;
  late double _weeklyPrice;
  late double _monthlyPrice;
  bool _isSaving = false;
  late Map<String, dynamic> _notificationSettings;
  @override
  void initState() {
    super.initState();
    _loadSettings();
  }
  Future<void> _loadSettings() async {
    await SubscriptionNotificationService.loadSettings();
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _notificationSettings =
          Map.from(SubscriptionNotificationService.reminderSettings);
      _dailyPrice = prefs.getDouble('dailyPrice') ?? 2000.0;
      _weeklyPrice = prefs.getDouble('weeklyPrice') ?? 10000.0;
      _monthlyPrice = prefs.getDouble('monthlyPrice') ?? 35000.0;
    });
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Settings'),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: ListView(
          children: [
            _buildNotificationSettingsCard(),
            const SizedBox(height: 16),
            _buildPriceSettingsCard(),
            const SizedBox(height: 24),
            _buildSaveButton(),
            const SizedBox(height: 24),
            IconButton(
              icon: const Icon(Icons.info),
              onPressed: () => Navigator.pushNamed(context, '/about'),
            ),
            IconButton(
              icon: const Icon(Icons.help),
              onPressed: () => Navigator.pushNamed(context, '/how-to'),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildNotificationSettingsCard() {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Notification Settings',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            _buildSlider('Daily Plan (days before)', 'daysBeforeDaily'),
            _buildSlider('Weekly Plan (days before)', 'daysBeforeWeekly'),
            _buildSlider('Monthly Plan (days before)', 'daysBeforeMonthly'),
          ],
        ),
      ),
    );
  }
  Widget _buildSlider(String label, String key) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label, style: TextStyle(fontSize: 16)),
        Slider(
          value: _notificationSettings[key].toDouble(),
          min: 0,
          max: 7,
          divisions: 7,
          label: _notificationSettings[key].toString(),
          onChanged: (value) {
            setState(() {
              _notificationSettings[key] = value.round();
            });
          },
        ),
      ],
    );
  }
  Widget _buildPriceSettingsCard() {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Package Prices',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            _buildPriceSlider('Daily Price', _dailyPrice, 500.0, 5000.0,
                (value) {
              setState(() => _dailyPrice = value);
            }),
            _buildPriceSlider('Weekly Price', _weeklyPrice, 2000.0, 20000.0,
                (value) {
              setState(() => _weeklyPrice = value);
            }),
            _buildPriceSlider('Monthly Price', _monthlyPrice, 5000.0, 50000.0,
                (value) {
              setState(() => _monthlyPrice = value);
            }),
          ],
        ),
      ),
    );
  }
  Widget _buildSliderWithLabel({
    required String label,
    required double value,
    required double min,
    required double max,
    required int divisions,
    required String unit,
    required Function(double) onChanged,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('$label: ${value.toStringAsFixed(1)} $unit'),
        Slider(
          value: value,
          min: min,
          max: max,
          divisions: divisions,
          label: '${value.toStringAsFixed(1)} $unit',
          onChanged: onChanged,
        ),
      ],
    );
  }
  Widget _buildPriceSlider(String label, double value, double min, double max,
      Function(double) onChanged) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('$label: UGX ${value.toStringAsFixed(0)}'),
        Slider(
          value: value,
          min: min,
          max: max,
          divisions: ((max - min) / 500).round(),
          label: 'UGX ${value.toStringAsFixed(0)}',
          onChanged: onChanged,
        ),
      ],
    );
  }
  Widget _buildSaveButton() {
    return ElevatedButton(
      onPressed: _isSaving ? null : _saveSettings,
      style: ElevatedButton.styleFrom(
        padding: const EdgeInsets.symmetric(vertical: 16),
        backgroundColor: Theme.of(context).primaryColor,
      ),
      child: _isSaving
          ? const CircularProgressIndicator(color: Colors.white)
          : const Text('Save Settings', style: TextStyle(fontSize: 16)),
    );
  }
  Future<void> _saveSettings() async {
    setState(() => _isSaving = true);
    try {
      await SubscriptionNotificationService.saveSettings(_notificationSettings);
      final database = ref.read(databaseProvider);
      await _updatePlanPrices(database);
      final snapshot = await database.firestore
          .collection(database.getUserCollectionPath('customers'))
          .where('isActive', isEqualTo: true)
          .get();
      final customers = snapshot.docs
          .map((doc) => Customer.fromJson(doc.id, doc.data()))
          .toList();
      await SubscriptionNotificationService.scheduleExpirationNotifications(
          customers);
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Text('Settings saved successfully!'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to save settings: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isSaving = false);
      }
    }
  }
  Future<void> _updatePlanPrices(DatabaseRepository database) async {
    final plans = [
      Plan(type: PlanType.daily, price: _dailyPrice, durationInDays: 1),
      Plan(type: PlanType.weekly, price: _weeklyPrice, durationInDays: 7),
      Plan(type: PlanType.monthly, price: _monthlyPrice, durationInDays: 30),
    ];
    final batch = database.firestore.batch();
    for (var plan in plans) {
      final ref = database.firestore.collection('plans').doc(plan.type.name);
      batch.set(ref, plan.toJson());
    }
    await batch.commit();
  }
}

================
File: services/ad_manager.dart
================
import 'package:flutter/material.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'dart:async';
class AdManager {
  static final AdManager _instance = AdManager._internal();
  factory AdManager() => _instance;
  AdManager._internal();
 final List<BannerAd> _bannerAds = [];
  InterstitialAd? _interstitialAd;
  RewardedAd? _rewardedAd;
  bool _isBannerLoading = false;
  bool _isInterstitialLoading = false;
  bool _isRewardedLoading = false;
  static const int maxRetries = 3;
  static const Duration retryDelay = Duration(seconds: 5);
  int _bannerImpressions = 0;
  int _interstitialImpressions = 0;
  int _rewardedImpressions = 0;
  DateTime? _lastInterstitialShow;
  static const Duration interstitialCooldown = Duration(minutes: 2);
  final AdRequest _adRequest = AdRequest(
    keywords: ['utility', 'internet', 'wifi'],
    nonPersonalizedAds: false,
  );
  Future<void> initializeBannerAd({
    String? adUnitId,
    AdSize size = AdSize.banner,
    int retryCount = 0,
  }) async {
    if (_isBannerLoading) return;
    _isBannerLoading = true;
    try {
      final bannerAd = BannerAd(
        adUnitId: adUnitId ?? "ca-app-pub-8267064683737776/7537627551",
        size: size,
        request: _adRequest,
        listener: BannerAdListener(
          onAdLoaded: (Ad ad) {
            _isBannerLoading = false;
            _bannerImpressions++;
            _bannerAds.add(ad as BannerAd);
            debugPrint('Banner Ad loaded successfully. Total impressions: $_bannerImpressions');
          },
          onAdFailedToLoad: (Ad ad, LoadAdError error) async {
            _isBannerLoading = false;
            ad.dispose();
            debugPrint('Banner Ad failed to load: $error');
            if (retryCount < maxRetries) {
              await Future.delayed(retryDelay);
              initializeBannerAd(adUnitId: adUnitId, size: size, retryCount: retryCount + 1);
            }
          },
          onAdImpression: (Ad ad) {
            _bannerImpressions++;
            debugPrint('Banner Ad impression recorded');
          },
        ),
      );
      await bannerAd.load();
    } catch (e) {
      _isBannerLoading = false;
      debugPrint('Error initializing banner ad: $e');
    }
  }
  Widget getBannerAdWidget({double? maxWidth, AdSize size = AdSize.banner}) {
    if (_bannerAds.isEmpty) {
      initializeBannerAd(size: size);
      return const SizedBox.shrink();
    }
    final bannerAd = _bannerAds.removeAt(0);
    return Container(
      decoration: BoxDecoration(
        color: Colors.transparent,
        borderRadius: BorderRadius.circular(8),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      constraints: BoxConstraints(
        maxWidth: maxWidth ?? double.infinity,
        maxHeight: bannerAd.size.height.toDouble(),
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(8),
        child: AdWidget(ad: bannerAd),
      ),
    );
  }
  Future<void> initializeInterstitialAd({
    String? adUnitId,
    int retryCount = 0,
  }) async {
    if (_isInterstitialLoading) return;
    _isInterstitialLoading = true;
    try {
      await InterstitialAd.load(
        adUnitId: adUnitId ?? 'ca-app-pub-8267064683737776/1092736180',
        request: _adRequest,
        adLoadCallback: InterstitialAdLoadCallback(
          onAdLoaded: (InterstitialAd ad) {
            _isInterstitialLoading = false;
            _interstitialAd = ad;
            debugPrint('Interstitial Ad loaded successfully');
          },
          onAdFailedToLoad: (LoadAdError error) async {
            _isInterstitialLoading = false;
            debugPrint('Interstitial Ad failed to load: $error');
            if (retryCount < maxRetries) {
              await Future.delayed(retryDelay);
              initializeInterstitialAd(
                adUnitId: adUnitId,
                retryCount: retryCount + 1,
              );
            }
          },
        ),
      );
    } catch (e) {
      _isInterstitialLoading = false;
      debugPrint('Error initializing interstitial ad: $e');
    }
  }
  Future<bool> showInterstitialAd() async {
    if (_interstitialAd == null) {
      debugPrint('Interstitial Ad not loaded');
      return false;
    }
    if (_lastInterstitialShow != null &&
        DateTime.now().difference(_lastInterstitialShow!) <
            interstitialCooldown) {
      debugPrint('Interstitial Ad in cooldown');
      return false;
    }
    final completer = Completer<bool>();
    _interstitialAd!.fullScreenContentCallback = FullScreenContentCallback(
      onAdShowedFullScreenContent: (InterstitialAd ad) {
        _interstitialImpressions++;
        _lastInterstitialShow = DateTime.now();
        debugPrint(
          'Interstitial Ad showed. Total impressions: $_interstitialImpressions',
        );
      },
      onAdDismissedFullScreenContent: (InterstitialAd ad) {
        ad.dispose();
        initializeInterstitialAd();
        completer.complete(true);
      },
      onAdFailedToShowFullScreenContent: (InterstitialAd ad, AdError error) {
        ad.dispose();
        initializeInterstitialAd();
        completer.complete(false);
        debugPrint('Interstitial Ad failed to show: $error');
      },
    );
    await _interstitialAd!.show();
    _interstitialAd = null;
    return completer.future;
  }
  Future<void> initializeRewardedAd({
    String? adUnitId,
    int retryCount = 0,
  }) async {
    if (_isRewardedLoading) return;
    _isRewardedLoading = true;
    try {
      await RewardedAd.load(
        adUnitId: adUnitId ?? "ca-app-pub-8267064683737776/9972219205",
        request: _adRequest,
        rewardedAdLoadCallback: RewardedAdLoadCallback(
          onAdLoaded: (RewardedAd ad) {
            _isRewardedLoading = false;
            _rewardedAd = ad;
            debugPrint('Rewarded Ad loaded successfully');
          },
          onAdFailedToLoad: (LoadAdError error) async {
            _isRewardedLoading = false;
            debugPrint('Rewarded Ad failed to load: $error');
            if (retryCount < maxRetries) {
              await Future.delayed(retryDelay);
              initializeRewardedAd(
                adUnitId: adUnitId,
                retryCount: retryCount + 1,
              );
            }
          },
        ),
      );
    } catch (e) {
      _isRewardedLoading = false;
      debugPrint('Error initializing rewarded ad: $e');
    }
  }
  Future<RewardResult?> showRewardedAd() async {
    if (_rewardedAd == null) {
      debugPrint('Rewarded Ad not loaded');
      return null;
    }
    final completer = Completer<RewardResult?>();
    RewardResult? result;
    _rewardedAd!.fullScreenContentCallback = FullScreenContentCallback(
      onAdShowedFullScreenContent: (RewardedAd ad) {
        _rewardedImpressions++;
        debugPrint(
          'Rewarded Ad showed. Total impressions: $_rewardedImpressions',
        );
      },
      onAdDismissedFullScreenContent: (RewardedAd ad) {
        ad.dispose();
        initializeRewardedAd();
        completer.complete(result);
      },
      onAdFailedToShowFullScreenContent: (RewardedAd ad, AdError error) {
        ad.dispose();
        initializeRewardedAd();
        completer.complete(null);
        debugPrint('Rewarded Ad failed to show: $error');
      },
    );
    await _rewardedAd!.show(
      onUserEarnedReward: (AdWithoutView ad, RewardItem reward) {
        result = RewardResult(
          type: reward.type,
          amount: reward.amount,
          timestamp: DateTime.now(),
        );
        debugPrint('User earned reward: ${reward.amount} ${reward.type}');
      },
    );
    _rewardedAd = null;
    return completer.future;
  }
  int get bannerImpressions => _bannerImpressions;
  int get interstitialImpressions => _interstitialImpressions;
  int get rewardedImpressions => _rewardedImpressions;
  void dispose() {
   for (var ad in _bannerAds) {
      ad.dispose();
    }
    _interstitialAd?.dispose();
    _rewardedAd?.dispose();
  }
}
class RewardResult {
  final String type;
  final num amount;
  final DateTime timestamp;
  RewardResult({
    required this.type,
    required this.amount,
    required this.timestamp,
  });
}

================
File: services/app_preferences.dart
================
import 'package:shared_preferences/shared_preferences.dart';
class AppPreferences {
  static const String _firstTimeKey = 'isFirstTime';
  static Future<bool> isFirstTime() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(_firstTimeKey) ?? true;
  }
  static Future<void> setNotFirstTime() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_firstTimeKey, false);
  }
}

================
File: services/auth_service.dart
================
import 'dart:async';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:local_auth/local_auth.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
final storage = FlutterSecureStorage();
class AuthResult {
  final User? user;
  final String? error;
  final bool requiresVerification;
  AuthResult({
    this.user,
    this.error,
    this.requiresVerification = false,
  });
}
class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final LocalAuthentication localAuth = LocalAuthentication();
  static const String _persistentLoginKey = 'persistentLogin';
  static const String _userEmailKey = 'userEmail';
  static const String _userPhoneKey = 'userPhone';
  static const String _sessionTimeKey = 'sessionStartTime';
  static const Duration _sessionTimeout =
      Duration(days: 7);
  final _authStateController = StreamController<User?>.broadcast();
  Stream<User?> get authStateChanges => _authStateController.stream;
  User? get currentUser => _auth.currentUser;
  bool isPasswordStrong(String password) {
    return password.length >= 8 &&
        RegExp(r'[A-Z]').hasMatch(password) &&
        RegExp(r'[a-z]').hasMatch(password) &&
        RegExp(r'[0-9]').hasMatch(password) &&
        RegExp(r'[!@#$%^&*(),.?":{}|<>]').hasMatch(password);
  }
  // Sign in with email and password with persistence option
  Future<AuthResult> signInWithPersistence(
    String email,
    String password,
    bool rememberMe,
  ) async {
    try {
      final userCredential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );
      final user = userCredential.user;
      if (user == null) {
        return AuthResult(error: 'Failed to sign in');
      }
      if (!user.emailVerified) {
        return AuthResult(
          user: user,
          requiresVerification: true,
          error: 'Please verify your email before continuing',
        );
      }
      if (rememberMe) {
        final prefs = await SharedPreferences.getInstance();
        await prefs.setBool(_persistentLoginKey, true);
        await storage.write(key: 'userEmail', value: email);
        await storage.write(key: 'userPassword', value: password);
        await _updateSessionTime();
      }
      _authStateController.add(user);
      return AuthResult(user: user);
    } on FirebaseAuthException catch (e) {
      return AuthResult(error: _getReadableErrorMessage(e.code));
    }
  }
  Future<void> signInWithPhoneNumber({
    required String phoneNumber,
    required Function(String verificationId, int? resendToken) onCodeSent,
    required Function(AuthResult) onCompleted,
    Function(String)? onError,
  }) async {
    try {
      await _auth.verifyPhoneNumber(
        phoneNumber: phoneNumber,
        verificationCompleted: (PhoneAuthCredential credential) async {
          final userCredential = await _auth.signInWithCredential(credential);
          final user = userCredential.user;
          if (user != null) {
            final prefs = await SharedPreferences.getInstance();
            await prefs.setBool(_persistentLoginKey, true);
            await prefs.setString(_userPhoneKey, phoneNumber);
            await _updateSessionTime();
            _authStateController.add(user);
            onCompleted(AuthResult(user: user));
          }
        },
        verificationFailed: (FirebaseAuthException e) {
          onError?.call(_getReadableErrorMessage(e.code));
        },
        codeSent: onCodeSent,
        codeAutoRetrievalTimeout: (String verificationId) {},
        timeout: const Duration(seconds: 60),
      );
    } catch (e) {
      onError?.call('An unexpected error occurred: $e');
    }
  }
  Future<AuthResult> verifyPhoneCode({
    required String verificationId,
    required String smsCode,
  }) async {
    try {
      final credential = PhoneAuthProvider.credential(
        verificationId: verificationId,
        smsCode: smsCode,
      );
      final userCredential = await _auth.signInWithCredential(credential);
      final user = userCredential.user;
      if (user == null) {
        return AuthResult(error: 'Failed to sign in');
      }
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_persistentLoginKey, true);
      await prefs.setString(_userPhoneKey, user.phoneNumber ?? '');
      await _updateSessionTime();
      _authStateController.add(user);
      return AuthResult(user: user);
    } on FirebaseAuthException catch (e) {
      return AuthResult(error: _getReadableErrorMessage(e.code));
    }
  }
  // Register with email
  Future<AuthResult> register(String email, String password) async {
    if (!isPasswordStrong(password)) {
      return AuthResult(
        error:
            'Password must be at least 8 characters long and contain uppercase, lowercase, numbers, and special characters',
      );
    }
    try {
      final result = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );
      final user = result.user;
      if (user == null) {
        return AuthResult(error: 'Registration failed');
      }
      await user.sendEmailVerification();
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_persistentLoginKey, true);
      await prefs.setString(_userEmailKey, email);
      await prefs.setString('userPassword', password);
      await _updateSessionTime();
      return AuthResult(
        user: user,
        requiresVerification: true,
        error: 'Please check your email to verify your account',
      );
    } on FirebaseAuthException catch (e) {
      return AuthResult(error: _getReadableErrorMessage(e.code));
    }
  }
  Future<void> signOut() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_persistentLoginKey);
      await prefs.remove(_userEmailKey);
      await prefs.remove(_userPhoneKey);
      await prefs.remove(_sessionTimeKey);
      await prefs.remove('userPassword');
      await storage.deleteAll();
      await _auth.signOut();
      _authStateController.add(null);
    } catch (e) {
      throw Exception('Failed to sign out: $e');
    }
  }
  Future<bool> authenticateWithBiometrics() async {
    bool canCheckBiometrics = await localAuth.canCheckBiometrics;
    bool isDeviceSupported = await localAuth.isDeviceSupported();
    if (!canCheckBiometrics || !isDeviceSupported) {
      return false;
    }
    try {
      final authenticated = await localAuth.authenticate(
        localizedReason: 'Authenticate to access your account',
        options: const AuthenticationOptions(
          biometricOnly: false,
          useErrorDialogs: true,
          stickyAuth: true,
        ),
      );
      if (authenticated) {
        await _updateSessionTime();
        final prefs = await SharedPreferences.getInstance();
        final email = await storage.read(key: 'userEmail');
        final password = await storage.read(key: 'userPassword');
        final phone = prefs.getString(_userPhoneKey);
        if (email != null && password != null) {
          await signInWithPersistence(email, password, true);
        } else if (phone != null) {
          _authStateController.add(_auth.currentUser);
        }
      }
      return authenticated;
    } catch (e) {
      return false;
    }
  }
  Future<bool> isSessionValid() async {
    final prefs = await SharedPreferences.getInstance();
    final sessionStartStr = prefs.getString(_sessionTimeKey);
    final persistentLogin = prefs.getBool(_persistentLoginKey) ?? false;
    if (!persistentLogin || sessionStartStr == null) return false;
    final sessionStart = DateTime.parse(sessionStartStr);
    final now = DateTime.now();
    if (now.difference(sessionStart) > _sessionTimeout) {
      await signOut();
      return false;
    }
    return _auth.currentUser != null;
  }
  Future<void> _updateSessionTime() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_sessionTimeKey, DateTime.now().toIso8601String());
  }
  String _getReadableErrorMessage(String code) {
    switch (code) {
      case 'user-not-found':
        return 'No user found with this email';
      case 'wrong-password':
        return 'Incorrect password';
      case 'email-already-in-use':
        return 'An account already exists with this email';
      case 'invalid-email':
        return 'Please enter a valid email address';
      case 'operation-not-allowed':
        return 'Email/password accounts are not enabled';
      case 'weak-password':
        return 'Please enter a stronger password';
      case 'user-disabled':
        return 'This account has been disabled';
      case 'too-many-requests':
        return 'Too many attempts. Please try again later';
      case 'invalid-credential':
        return 'Invalid login credentials';
      case 'network-request-failed':
        return 'Network error. Please check your connection';
      case 'invalid-verification-code':
        return 'The SMS code entered is invalid';
      case 'invalid-phone-number':
        return 'The phone number format is invalid';
      case 'missing-verification-code':
        return 'Please enter the SMS code';
      default:
        return 'An error occurred. Please try again';
    }
  }
  Future<String> getInitialRoute() async {
    final prefs = await SharedPreferences.getInstance();
    final persistentLogin = prefs.getBool(_persistentLoginKey) ?? false;
    if (!persistentLogin) return '/login';
    final isValid = await isSessionValid();
    if (!isValid) return '/login';
    final email = prefs.getString(_userEmailKey);
    final password = prefs.getString('userPassword');
    final phone = prefs.getString(_userPhoneKey);
    if (email != null && password != null) {
      final result = await signInWithPersistence(email, password, true);
      if (result.user != null && !result.requiresVerification) {
        return '/home';
      }
    } else if (phone != null && _auth.currentUser != null) {
      return '/home';
    }
    return '/login';
  }
  void dispose() {
    _authStateController.close();
  }
  Future<bool> verifyEmail() async {
    final user = _auth.currentUser;
    if (user != null && !user.emailVerified) {
      await user.sendEmailVerification();
      return true;
    }
    return false;
  }
  Future<bool> resetPassword(String email) async {
    try {
      await _auth.sendPasswordResetEmail(email: email);
      return true;
    } on FirebaseAuthException catch (e) {
      throw Exception(_getReadableErrorMessage(e.code));
    }
  }
  Future<void> registerWithPhoneNumber({
    required String phoneNumber,
    required Function(String verificationId, int? resendToken) onCodeSent,
    required Function(AuthResult) onCompleted,
    Function(String)? onError,
  }) async {
    await signInWithPhoneNumber(
      phoneNumber: phoneNumber,
      onCodeSent: onCodeSent,
      onCompleted: onCompleted,
      onError: onError,
    );
  }
}

================
File: services/notification_scheduler.dart
================
import 'dart:async';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:logger/logger.dart';
import '../database/models/customer.dart';
import 'subscription_notification_service.dart';
class NotificationScheduler {
  static final NotificationScheduler _instance = NotificationScheduler._internal();
  factory NotificationScheduler() => _instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  Timer? _timer;
 static final Logger _logger = Logger();
 NotificationScheduler._internal() {
    _startPeriodicScheduling();
  }
  String _getUserCollectionPath(String collection) {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) throw Exception('User not authenticated');
    return 'users/${user.uid}/$collection';
  }
  Future<void> _scheduleNotifications() async {
    try {
      final snapshot = await _firestore
          .collection(_getUserCollectionPath('customers'))
          .where('isActive', isEqualTo: true)
          .get();
      final customers = snapshot.docs
          .map((doc) => Customer.fromJson(doc.id, doc.data()))
          .toList();
 _logger.i('in scheduler...');
      await SubscriptionNotificationService.scheduleExpirationNotifications(customers);
      await SubscriptionNotificationService.clearExpiredNotifications();
    } catch (e) {
      print('Error scheduling notifications: $e');
    }
  }
  void _startPeriodicScheduling() {
    _scheduleNotifications();
    _timer = Timer.periodic(const Duration(hours: 6), (_) => _scheduleNotifications());
  }
  void dispose() {
    _timer?.cancel();
  }
}

================
File: services/receipt_service.dart
================
import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:intl/intl.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:share_plus/share_plus.dart';
import '../database/models/customer.dart';
import '../database/models/payment.dart';
import '../database/models/plan.dart';
class ReceiptService {
  static final _currency = NumberFormat.currency(
    symbol: 'UGX ',
    decimalDigits: 0,
  );
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static String _getUserCollectionPath(String collection) {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) throw Exception('User not authenticated');
    return 'users/${user.uid}/$collection';
  }
  static Future<void> generateAndShareReceipt({
    required Payment payment,
    required Customer customer,
  }) async {
    final pdf = pw.Document();
    final referrerDoc = customer.referredBy != null
        ? await _firestore
            .collection(_getUserCollectionPath('customers'))
            .doc(customer.referredBy)
            .get()
        : null;
    final referrer = referrerDoc != null && referrerDoc.exists
        ? Customer.fromJson(referrerDoc.id, referrerDoc.data()!)
        : null;
    final titleStyle = pw.TextStyle(
      font: pw.Font.helveticaBold(),
      fontSize: 24,
      color: PdfColors.blue900,
    );
    final headerStyle = pw.TextStyle(
      font: pw.Font.helveticaBold(),
      fontSize: 14,
      color: PdfColors.blue900,
    );
    final subtitleStyle = pw.TextStyle(
      font: pw.Font.helvetica(),
      fontSize: 12,
      color: PdfColors.grey800,
    );
    final labelStyle = pw.TextStyle(
      font: pw.Font.helveticaBold(),
      fontSize: 10,
      color: PdfColors.grey700,
    );
    final valueStyle = pw.TextStyle(
      font: pw.Font.helvetica(),
      fontSize: 10,
      color: PdfColors.black,
    );
    final noteStyle = pw.TextStyle(
      font: pw.Font.helvetica(),
      fontSize: 10,
      color: PdfColors.grey700,
      fontStyle: pw.FontStyle.italic,
    );
    pdf.addPage(
      pw.Page(
        pageFormat: PdfPageFormat.a4,
        build: (context) => pw.Container(
          padding: const pw.EdgeInsets.all(40),
          decoration: pw.BoxDecoration(
            border: pw.Border.all(color: PdfColors.grey300, width: 1),
          ),
          child: pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.Row(
                mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                children: [
                  pw.Column(
                    crossAxisAlignment: pw.CrossAxisAlignment.start,
                    children: [
                      pw.Text('TRUTHY SYSTEMS', style: titleStyle),
                      pw.SizedBox(height: 4),
                      pw.Text(
                        'Internet Service Provider',
                        style: subtitleStyle,
                      ),
                    ],
                  ),
                  pw.Container(
                    padding: const pw.EdgeInsets.all(10),
                    decoration: pw.BoxDecoration(
                      color: PdfColors.blue50,
                      borderRadius: const pw.BorderRadius.all(
                        pw.Radius.circular(4),
                      ),
                    ),
                    child: pw.Text('RECEIPT', style: headerStyle),
                  ),
                ],
              ),
              pw.SizedBox(height: 20),
              pw.Container(
                padding: const pw.EdgeInsets.all(10),
                color: PdfColors.grey100,
                child: pw.Row(
                  mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                  children: [
                    pw.Column(
                      crossAxisAlignment: pw.CrossAxisAlignment.start,
                      children: [
                        pw.Text('Receipt No:', style: labelStyle),
                        pw.SizedBox(height: 4),
                        pw.Text(payment.id, style: valueStyle),
                      ],
                    ),
                    pw.Column(
                      crossAxisAlignment: pw.CrossAxisAlignment.end,
                      children: [
                        pw.Text('Date:', style: labelStyle),
                        pw.SizedBox(height: 4),
                        pw.Text(
                          DateFormat(
                            'MMMM d, y',
                          ).format(payment.paymentDate),
                          style: valueStyle,
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              pw.SizedBox(height: 20),
              pw.Container(
                width: double.infinity,
                padding: const pw.EdgeInsets.all(10),
                child: pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text('CUSTOMER DETAILS', style: headerStyle),
                    pw.SizedBox(height: 10),
                    _buildInfoRow(
                      'Customer Name',
                      customer.name,
                      labelStyle,
                      valueStyle,
                    ),
                    _buildInfoRow(
                      'Contact',
                      customer.contact,
                      labelStyle,
                      valueStyle,
                    ),
                    _buildInfoRow(
                      'Subscription Period',
                      '${DateFormat('MMM d, y').format(customer.subscriptionStart)} - ${DateFormat('MMM d, y hh:mm a').format(customer.subscriptionEnd)}',
                      labelStyle,
                      valueStyle,
                    ),
                  ],
                ),
              ),
              pw.SizedBox(height: 20),
              // Payment Details
              pw.Container(
                padding: const pw.EdgeInsets.all(10),
                color: PdfColors.grey100,
                child: pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text('PAYMENT DETAILS', style: headerStyle),
                    pw.SizedBox(height: 10),
                    _buildInfoRow(
                      'Plan Type',
                      payment.planType.name.toUpperCase(),
                      labelStyle,
                      valueStyle,
                    ),
                    _buildInfoRow(
                      'Amount Paid',
                      _currency.format(payment.amount),
                      labelStyle,
                      valueStyle,
                    ),
                    _buildInfoRow(
                      'Payment Status',
                      payment.isConfirmed ? 'Confirmed' : 'Pending',
                      labelStyle,
                      valueStyle,
                    ),
                  ],
                ),
              ),
              pw.SizedBox(height: 20),
              if (referrer != null)
                pw.Container(
                  padding: const pw.EdgeInsets.all(10),
                  decoration: pw.BoxDecoration(
                    color: PdfColors.grey100,
                    borderRadius: const pw.BorderRadius.all(
                      pw.Radius.circular(4),
                    ),
                  ),
                  child: pw.Column(
                    crossAxisAlignment: pw.CrossAxisAlignment.start,
                    children: [
                      pw.Text('REFERRAL INFORMATION', style: headerStyle),
                      pw.SizedBox(height: 10),
                      _buildInfoRow(
                        'Referred By',
                        referrer.name,
                        labelStyle,
                        valueStyle,
                      ),
                      _buildInfoRow(
                        'Referral Reward',
                        '${_calculateReferralReward(referrer.planType, customer.planType).inDays} days free',
                        labelStyle,
                        valueStyle,
                      ),
                    ],
                  ),
                ),
              pw.Container(
                padding: const pw.EdgeInsets.all(10),
                decoration: pw.BoxDecoration(
                  color: PdfColors.blue50,
                  borderRadius: const pw.BorderRadius.all(
                    pw.Radius.circular(4),
                  ),
                ),
                child: pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text('YOUR REFERRAL CODE', style: headerStyle),
                    pw.SizedBox(height: 10),
                    pw.Text(
                      customer.referralCode,
                      style: pw.TextStyle(
                        fontSize: 18,
                        fontWeight: pw.FontWeight.bold,
                        color: PdfColors.blue900,
                      ),
                    ),
                    pw.SizedBox(height: 10),
                    pw.Text(
                      'Share your referral code with friends and earn free subscription days!',
                      style: pw.TextStyle(
                        fontSize: 12,
                        color: PdfColors.grey800,
                        fontStyle: pw.FontStyle.italic,
                      ),
                    ),
                    pw.SizedBox(height: 10),
                    pw.Text(
                      'For every friend who joins using your referral code, you get:',
                      style: pw.TextStyle(
                        fontSize: 12,
                        color: PdfColors.grey800,
                      ),
                    ),
                    pw.SizedBox(height: 5),
                    pw.Text(
                      '- 7 days free for monthly plan referrals',
                      style: pw.TextStyle(
                        fontSize: 12,
                        color: PdfColors.grey800,
                      ),
                    ),
                    pw.Text(
                      '- 3 days free for weekly plan referrals',
                      style: pw.TextStyle(
                        fontSize: 12,
                        color: PdfColors.grey800,
                      ),
                    ),
                    pw.Text(
                      '- 1 day free for daily plan referrals',
                      style: pw.TextStyle(
                        fontSize: 12,
                        color: PdfColors.grey800,
                      ),
                    ),
                  ],
                ),
              ),
              pw.SizedBox(height: 20),
              pw.Container(
                padding: const pw.EdgeInsets.all(10),
                decoration: pw.BoxDecoration(
                  border: pw.Border.all(color: PdfColors.blue200),
                  borderRadius: const pw.BorderRadius.all(
                    pw.Radius.circular(4),
                  ),
                ),
                child: pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text('WIFI CREDENTIALS', style: headerStyle),
                    pw.SizedBox(height: 10),
                    _buildInfoRow(
                      'WiFi Name',
                      customer.wifiName,
                      labelStyle,
                      valueStyle,
                    ),
                    _buildInfoRow(
                      'Password',
                      customer.currentPassword,
                      labelStyle,
                      valueStyle,
                    ),
                    pw.SizedBox(height: 10),
                    pw.Text(
                      'Note: Connection is limited to 2 devices at a time with speeds up to 60Mbps',
                      style: noteStyle,
                    ),
                  ],
                ),
              ),
              pw.Spacer(),
              pw.Container(
                padding: const pw.EdgeInsets.symmetric(vertical: 20),
                decoration: const pw.BoxDecoration(
                  border: pw.Border(
                    top: pw.BorderSide(color: PdfColors.grey300),
                  ),
                ),
                child: pw.Column(
                  children: [
                    pw.Text(
                      'Thank you for choosing Truthy Systems!',
                      style: headerStyle.copyWith(color: PdfColors.blue700),
                      textAlign: pw.TextAlign.center,
                    ),
                    pw.SizedBox(height: 10),
                    pw.Text(
                      'For support, please contact: 0783009649',
                      style: valueStyle,
                      textAlign: pw.TextAlign.center,
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
    final output = await getTemporaryDirectory();
    final file = File(
      '${output.path}/truthy_systems_receipt_${payment.id}.pdf',
    );
    await file.writeAsBytes(await pdf.save());
    await Share.shareXFiles(
      [XFile(file.path)],
      text: 'Payment Receipt - ${customer.name}',
      subject: 'Truthy Systems - Internet Service Receipt',
    );
  }
  static pw.Row _buildInfoRow(
    String label,
    String value,
    pw.TextStyle labelStyle,
    pw.TextStyle valueStyle,
  ) {
    return pw.Row(
      mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
      children: [
        pw.Text(label, style: labelStyle),
        pw.Text(value, style: valueStyle),
      ],
    );
  }
  static Duration _calculateReferralReward(
    PlanType referrerPlan,
    PlanType newCustomerPlan,
  ) {
    if (newCustomerPlan == PlanType.monthly) {
      return const Duration(days: 7);
    } else if (newCustomerPlan == PlanType.weekly) {
      return const Duration(days: 3);
    } else {
      return const Duration(days: 1);
    }
  }
}

================
File: services/subscription_notification_service.dart
================
import 'dart:convert';
import 'dart:io';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:logger/logger.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:timezone/timezone.dart' as tz;
import '../database/models/customer.dart';
import '../database/models/plan.dart';
import 'package:permission_handler/permission_handler.dart';
class SubscriptionNotificationService {
  static final FlutterLocalNotificationsPlugin _notifications =
      FlutterLocalNotificationsPlugin();
  static final Logger _logger = Logger();
  static const String _channelId = 'subscription_notifications';
  static const String _channelName = 'Subscription Notifications';
  static const String _channelDescription =
      'Notifications for expiring subscriptions';
  static const String _scheduledNotificationsKey = 'scheduled_notifications';
  static const int _maxRetries = 3;
  static Map<String, dynamic> reminderSettings = {
    'daysBeforeDaily': 0,
    'daysBeforeWeekly': 1,
    'daysBeforeMonthly': 3,
  };
  static const String _detailedNotificationsKey =
      'detailed_scheduled_notifications';
  static Future<void> initialize() async {
    _requestPermissions();
    const androidSettings =
        AndroidInitializationSettings('@mipmap/ic_launcher');
    const iosSettings = DarwinInitializationSettings();
    const settings =
        InitializationSettings(android: androidSettings, iOS: iosSettings);
    await _notifications.initialize(
      settings,
      onDidReceiveNotificationResponse: (response) async {
        if (response.payload != null) {
          await _handleNotificationTap(response.payload!);
        }
      },
    );
    const androidChannel = AndroidNotificationChannel(
      _channelId,
      _channelName,
      description: _channelDescription,
      importance: Importance.max,
    );
    await _notifications
        .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(androidChannel);
  }
  static Future<void> _requestPermissions() async {
    if (Platform.isAndroid) {
      final status = await Permission.notification.status;
      if (!status.isGranted) {
        await Permission.notification.request();
      }
      final alarmStatus = await Permission.scheduleExactAlarm.status;
      if (!alarmStatus.isGranted) {
        final result = await Permission.scheduleExactAlarm.request();
        if (!result.isGranted) {
          _logger.log(Level.warning,
              'Exact alarms denied, falling back to inexact alarms.');
        }
      }
    }
  }
  static Future<void> loadSettings() async {
    final prefs = await SharedPreferences.getInstance();
    final settingsString = prefs.getString('notification_settings');
    if (settingsString != null) {
      reminderSettings = json.decode(settingsString);
    }
  }
  static Future<void> saveSettings(Map<String, dynamic> settings) async {
    reminderSettings = settings;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('notification_settings', json.encode(settings));
  }
  static int _getDaysBefore(PlanType planType) {
    switch (planType) {
      case PlanType.daily:
        return reminderSettings['daysBeforeDaily'] as int? ?? 0;
      case PlanType.weekly:
        return reminderSettings['daysBeforeWeekly'] as int? ?? 1;
      case PlanType.monthly:
        return reminderSettings['daysBeforeMonthly'] as int? ?? 3;
    }
  }
  static Future<void> scheduleExpirationNotifications(
      List<Customer> customers) async {
    final now = tz.TZDateTime.now(tz.local);
    final futures = <Future<void>>[];
    _logger.i('scheduling...');
    for (final customer in customers) {
      final notificationTime = _calculateNotificationTime(customer);
      if (await _isNotificationScheduled(customer.id)) continue;
      if (notificationTime.isBefore(now)) {
        await _showImmediateNotification(customer);
        continue;
      }
      futures.add(_scheduleNotificationWithRetry(customer, notificationTime));
    }
    try {
      await Future.wait(futures);
      _logger.i('Successfully scheduled ${futures.length} notifications');
    } catch (e) {
      _logger.e('Failed to schedule notifications: $e');
      rethrow;
    }
  }
  static Future<void> _scheduleNotificationWithRetry(
      Customer customer, tz.TZDateTime notificationTime,
      [int retryCount = 0]) async {
    try {
      final details = _createNotificationDetails(customer);
      await _notifications.zonedSchedule(
        customer.id.hashCode,
        'Subscription Expiring',
        _generateMessage(customer),
        notificationTime,
        details,
        androidScheduleMode:
            await _getScheduleMode(),
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
        payload: customer.id,
      );
      await _saveScheduledNotification(customer, notificationTime);
      _logger.i(
          'Scheduled notification for ${customer.name} at $notificationTime');
    } catch (e) {
      if (retryCount < _maxRetries) {
        final delay = Duration(seconds: 1 << retryCount);
        _logger.w(
            'Retry ${retryCount + 1}/$_maxRetries for ${customer.id} after $e');
        await Future.delayed(delay);
        await _scheduleNotificationWithRetry(
            customer, notificationTime, retryCount + 1);
      } else {
        _logger.e(
            'Failed to schedule notification for ${customer.id} after $_maxRetries retries: $e');
        throw NotificationSchedulingException(
            'Max retries exceeded for ${customer.id}: $e');
      }
    }
  }
  static Future<void> _showImmediateNotification(Customer customer) async {
    final details = _createNotificationDetails(customer, isUrgent: true);
    await _notifications.show(
      customer.id.hashCode,
      'Subscription Expiring Soon',
      _generateMessage(customer),
      details,
      payload: customer.id,
    );
    _logger.i('Showed immediate notification for ${customer.name}');
  }
  static NotificationDetails _createNotificationDetails(Customer customer,
      {bool isUrgent = false}) {
    final importance =
        isUrgent || customer.subscriptionEnd.isBefore(DateTime.now())
            ? Importance.max
            : Importance.defaultImportance;
    return NotificationDetails(
      android: AndroidNotificationDetails(
        _channelId,
        _channelName,
        channelDescription: _channelDescription,
        importance: importance,
        priority: importance == Importance.max
            ? Priority.high
            : Priority.defaultPriority,
        showWhen: true,
      ),
    );
  }
  static Future<AndroidScheduleMode> _getScheduleMode() async {
    if (Platform.isAndroid) {
      final alarmStatus = await Permission.scheduleExactAlarm.status;
      return alarmStatus.isGranted
          ? AndroidScheduleMode.exactAllowWhileIdle
          : AndroidScheduleMode.inexactAllowWhileIdle;
    }
    return AndroidScheduleMode.inexactAllowWhileIdle;
  }
  static tz.TZDateTime _calculateNotificationTime(Customer customer) {
    final endTime = tz.TZDateTime.from(customer.subscriptionEnd, tz.local);
    final daysBefore = _getDaysBefore(customer.planType);
    return endTime.subtract(Duration(days: daysBefore));
  }
  static String _generateMessage(Customer customer) {
    final duration = customer.subscriptionEnd.difference(DateTime.now());
    final days = duration.inDays;
    final hours = duration.inHours % 24;
    return days > 0
        ? '${customer.name}’s ${customer.planType.name} plan expires in $days day${days > 1 ? 's' : ''}'
        : '${customer.name}’s ${customer.planType.name} plan expires in $hours hour${hours > 1 ? 's' : ''}';
  }
  static Future<void> _saveScheduledNotification(
      Customer customer, tz.TZDateTime notificationTime) async {
    final prefs = await SharedPreferences.getInstance();
    final notifications =
        prefs.getString(_detailedNotificationsKey)?.let(json.decode) ??
            <String, dynamic>{};
    notifications[customer.id] = {
      'customerId': customer.id,
      'customerName': customer.name,
      'planType': customer.planType.name,
      'subscriptionEnd': customer.subscriptionEnd.toIso8601String(),
      'notificationTime': notificationTime.toIso8601String(),
      'message':
          'Reminder: ${customer.name}\'s ${customer.planType.name} plan ends soon',
      'status': 'scheduled',
    };
    await prefs.setString(
        _detailedNotificationsKey, json.encode(notifications));
  }
  static Future<bool> _isNotificationScheduled(String customerId) async {
    final prefs = await SharedPreferences.getInstance();
    final notifications =
        prefs.getString(_scheduledNotificationsKey)?.let(json.decode) ??
            <String, dynamic>{};
    final scheduled = notifications[customerId];
    if (scheduled == null) return false;
    final time = DateTime.parse(scheduled['time']);
    return time.isAfter(DateTime.now());
  }
  static Future<void> _handleNotificationTap(String customerId) async {
    _logger.i('Notification tapped for customer: $customerId');
  }
  static Future<void> clearExpiredNotifications() async {
    final prefs = await SharedPreferences.getInstance();
    final notifications =
        prefs.getString(_scheduledNotificationsKey)?.let(json.decode) ??
            <String, dynamic>{};
    notifications.removeWhere(
        (_, data) => DateTime.parse(data['time']).isBefore(DateTime.now()));
    await prefs.setString(
        _scheduledNotificationsKey, json.encode(notifications));
  }
  static Future<void> scheduleSingleExpirationNotification(
      Customer customer) async {
    await _notifications.cancel(customer.id.hashCode);
    await scheduleExpirationNotifications([customer]);
  }
  static Future<List<Map<String, dynamic>>> getScheduledNotifications() async {
    _logger.i('Fetching scheduled notifications');
    final prefs = await SharedPreferences.getInstance();
    final notificationsString = prefs.getString(_detailedNotificationsKey);
    if (notificationsString == null) {
      _logger.w(
          'No notifications found in SharedPreferences');
      return [];
    }
    try {
      final notifications =
          json.decode(notificationsString) as Map<String, dynamic>;
      final now = DateTime.now();
      final activeNotifications = notifications.entries
          .where((entry) =>
              DateTime.parse(entry.value['notificationTime']).isAfter(now))
          .map((entry) => entry.value)
          .toList();
      _logger.i(
          'Found ${activeNotifications.length} active notifications');
      return activeNotifications
          .map((notification) => {
                'customerId': notification['customerId'],
                'customerName': notification['customerName'],
                'planType': notification['planType'],
                'subscriptionEnd':
                    DateTime.parse(notification['subscriptionEnd']),
                'notificationTime':
                    DateTime.parse(notification['notificationTime']),
                'message': notification['message'],
                'status': notification['status'],
              })
          .toList();
    } catch (e) {
      _logger.e('Error decoding notifications: $e');
      return [];
    }
  }
}
class NotificationSchedulingException implements Exception {
  final String message;
  NotificationSchedulingException(this.message);
  @override
  String toString() => message;
}
extension StringExtension on String {
  T? let<T>(T Function(String) transform) => transform(this);
}

================
File: services/subscription_widget_service.dart
================
import 'package:flutter/services.dart';
import '../database/models/customer.dart';
class SubscriptionWidgetService {
  static const platform = MethodChannel('com.truthysystems.wifi/subscription_widget');
  static Future<void> updateWidgetData(
    List<Customer> expiringCustomers,
    int activeCustomersCount,
    double totalRevenue,
  ) async {
    try {
      final List<Map<String, dynamic>> customerData = expiringCustomers.map((customer) {
        return {
          'id': customer.id.toString(),
          'name': customer.name,
          'daysLeft': _formatExpiryTime(customer.subscriptionEnd, customer.subscriptionEnd.difference(DateTime.now()).inDays),
        };
      }).toList();
      await platform.invokeMethod('updateSubscriptionWidget', {
        'expiringCustomers': customerData,
        'activeCustomersCount': activeCustomersCount,
        'totalRevenue': totalRevenue,
      });
      print('update sent');
    } on PlatformException catch (e) {
      print("Failed to update widget: ${e.message}");
    }
  }
  static String _formatExpiryTime(DateTime subscriptionEnd, int daysUntilExpiry) {
    final now = DateTime.now();
    final difference = subscriptionEnd.difference(now);
    if (daysUntilExpiry > 0) return '$daysUntilExpiry days';
    if (difference.inHours.abs() < 24) return 'Today';
    return 'Expired';
  }
}

================
File: app_router.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:truthy_wifi_manager/screens/customer_share_view.dart';
import 'package:truthy_wifi_manager/screens/retention_screen.dart';
import 'database/models/customer.dart';
import 'providers/database_provider.dart';
import 'screens/about_screen.dart';
import 'screens/add_customer_screen.dart';
import 'screens/billing_cycle_screen.dart';
import 'screens/customer_detail_screen.dart';
import 'screens/customers_screen.dart';
import 'screens/downtime_input_screen.dart';
import 'screens/edit_customer_screen.dart';
import 'screens/expiring_subscriptions_screen.dart';
import 'screens/home_screen.dart';
import 'screens/how_to_screen.dart';
import 'screens/inactive_customers_screen.dart';
import 'screens/login_screen.dart';
import 'screens/payments_screen.dart';
import 'screens/scheduled_reminders_screen.dart';
import 'screens/settings_screen.dart';
class AppRouter {
  static Route<dynamic>? onGenerateRoute(
      RouteSettings settings, WidgetRef ref) {
    final uri = Uri.parse(settings.name ?? '/');
    final path = uri.path;
    switch (path) {
      case '/login':
        return MaterialPageRoute(builder: (_) => const LoginScreen());
      case '/register':
        return MaterialPageRoute(builder: (_) => const RegisterScreen());
      case '/downtime-input':
        return MaterialPageRoute(builder: (_) => const DowntimeInputScreen());
      case '/customer-share':
        return MaterialPageRoute(builder: (_) => const CustomerShareView());
      case '/settings':
        return MaterialPageRoute(builder: (_) => const SettingsScreen());
      case '/scheduled-reminders':
        return MaterialPageRoute(
            builder: (_) => const ScheduledRemindersScreen());
      case '/billing-cycles':
        return MaterialPageRoute(builder: (_) => const BillingCycleScreen());
      case '/retention':
        return MaterialPageRoute(builder: (_) => const RetentionScreen());
      case '/about':
        return MaterialPageRoute(builder: (_) => const AboutScreen());
      case '/how-to':
        return MaterialPageRoute(builder: (_) => const HowToScreen());
      default:
        if (path.startsWith('/customer/')) {
          final customerId = path.split('/').last;
          final customer = settings.arguments as Customer?;
          if (customer != null && customer.id == customerId) {
            return MaterialPageRoute(
              builder: (_) => CustomerDetailScreen(customer: customer),
            );
          }
          return MaterialPageRoute(
            builder: (_) => _buildCustomerDetailScreen(customerId, ref),
          );
        } else if (path.startsWith('/edit-customer/')) {
          final customerId = path.split('/').last;
          final customer = settings.arguments as Customer?;
          if (customer != null && customer.id == customerId) {
            return MaterialPageRoute(
              builder: (_) => EditCustomerScreen(customer: customer),
            );
          }
          return MaterialPageRoute(
            builder: (_) => _buildEditCustomerScreen(customerId, ref),
          );
        }
        return null;
    }
  }
  static Widget _buildCustomerDetailScreen(String customerId, WidgetRef ref) {
    return FutureBuilder<Customer?>(
      future: _getCustomerById(customerId, ref),
      builder: (context, snapshot) {
        return buildLoadingOrError(
          snapshot,
          (data) => CustomerDetailScreen(customer: data),
        );
      },
    );
  }
  static Widget _buildEditCustomerScreen(String customerId, WidgetRef ref) {
    return FutureBuilder<Customer?>(
      future: _getCustomerById(customerId, ref),
      builder: (context, snapshot) {
        return buildLoadingOrError(
          snapshot,
          (data) => EditCustomerScreen(customer: data),
        );
      },
    );
  }
  static Widget buildLoadingOrError(
      AsyncSnapshot<Customer?> snapshot, Widget Function(Customer) onData) {
    if (snapshot.connectionState == ConnectionState.waiting) {
      return const Scaffold(body: Center(child: CircularProgressIndicator()));
    }
    if (!snapshot.hasData || snapshot.data == null) {
      return const Scaffold(body: Center(child: Text('Customer not found')));
    }
    return onData(snapshot.data!);
  }
  static Future<Customer?> _getCustomerById(
      String customerId, WidgetRef ref) async {
    final database = ref.read(databaseProvider);
    final doc = await database.firestore
        .collection(database.getUserCollectionPath('customers'))
        .doc(customerId)
        .get();
    return doc.exists ? Customer.fromJson(doc.id, doc.data()!) : null;
  }
  static final routes = {
    '/': (context) => const LoginScreen(),
    '/login': (context) => const LoginScreen(),
    '/register': (context) => const RegisterScreen(),
    '/customers': (context) => const CustomersScreen(),
    '/add-customer': (context) => const AddCustomerScreen(),
    '/inactive-customers': (context) => const InactiveCustomersScreen(),
    '/payments': (context) => const PaymentsScreen(),
    '/expiring-subscriptions': (context) => const ExpiringSubscriptionsScreen(),
    '/home': (context) => const HomeScreen(),
    '/downtime-input': (context) => const DowntimeInputScreen(),
    '/customer-share': (context) => const CustomerShareView(),
    '/settings': (context) => const SettingsScreen(),
    '/billing-cycles': (context) => const BillingCycleScreen(),
    '/retention': (context) => const RetentionScreen(),
    '/about': (context) => const AboutScreen(),
    '/how-to': (context) => const HowToScreen(),
    '/scheduled-reminders': (context) => const ScheduledRemindersScreen(),
  };
}

================
File: firebase_options.dart
================
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }
  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyA73mJ5ztnDoIX7qRy8wI0QfLLtgbAFouY',
    appId: '1:391437135862:android:19b72a576bafd2228f61d7',
    messagingSenderId: '391437135862',
    projectId: 'truthy-wifi-manager',
    storageBucket: 'truthy-wifi-manager.firebasestorage.app',
  );
  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyCQ03E4jO-aLg8-48I2ogzy6o9JLML70_k',
    appId: '1:391437135862:web:1d704f3c439b1e698f61d7',
    messagingSenderId: '391437135862',
    projectId: 'truthy-wifi-manager',
    authDomain: 'truthy-wifi-manager.firebaseapp.com',
    storageBucket: 'truthy-wifi-manager.firebasestorage.app',
    measurementId: 'G-XSRQ59CNK6',
  );
}

================
File: main.dart
================
import 'dart:io';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_core/firebase_core.dart';
import 'database/models/customer.dart';
import 'database/repository/database_repository.dart';
import 'firebase_options.dart';
import 'package:flutter_timezone/flutter_timezone.dart';
import 'app_router.dart';
import 'package:timezone/data/latest_all.dart' as tz;
import 'package:timezone/timezone.dart' as tz;
import 'services/auth_service.dart';
import 'services/notification_scheduler.dart';
import 'services/subscription_notification_service.dart';
final navigatorKey = GlobalKey<NavigatorState>();
class MyApp extends ConsumerWidget {
  final String? initialRoute;
  const MyApp({super.key, this.initialRoute});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return MaterialApp(
      navigatorKey: navigatorKey,
      onGenerateRoute: (settings) => AppRouter.onGenerateRoute(settings, ref),
      routes: AppRouter.routes,
      title: 'Truthy WiFi Manager',
      initialRoute: initialRoute,
      theme: ThemeData(
        useMaterial3: true,
        brightness: Brightness.dark,
        scaffoldBackgroundColor: const Color(0xFF1A1A1A),
        colorScheme: const ColorScheme.dark(
          primary: Color(0xFF1E88E5),
          secondary: Color(0xFF4CAF50),
          surface: Colors.black87,
        ),
        cardTheme: CardTheme(
          elevation: 0,
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          color: Colors.white.withOpacity(0.1),
        ),
        appBarTheme: AppBarTheme(
          backgroundColor: Colors.black.withOpacity(0.2),
          elevation: 0,
          centerTitle: false,
        ),
        textTheme: const TextTheme(
          headlineMedium:
              TextStyle(fontWeight: FontWeight.bold, color: Colors.white),
          titleLarge:
              TextStyle(fontWeight: FontWeight.bold, color: Colors.white),
          bodyLarge: TextStyle(color: Colors.white70),
          bodyMedium: TextStyle(color: Colors.white70),
        ),
      ),
      darkTheme: ThemeData(
        useMaterial3: true,
        brightness: Brightness.dark,
        scaffoldBackgroundColor: const Color(0xFF1A1A1A),
        colorScheme: const ColorScheme.dark(
          primary: Color(0xFF1E88E5),
          secondary: Color(0xFF4CAF50),
          surface: Colors.black87,
        ),
        cardTheme: CardTheme(
          elevation: 0,
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          color: Colors.white.withOpacity(0.1),
        ),
        appBarTheme: AppBarTheme(
          backgroundColor: Colors.black.withOpacity(0.2),
          elevation: 0,
          centerTitle: false,
        ),
        textTheme: const TextTheme(
          headlineMedium:
              TextStyle(fontWeight: FontWeight.bold, color: Colors.white),
          titleLarge:
              TextStyle(fontWeight: FontWeight.bold, color: Colors.white),
          bodyLarge: TextStyle(color: Colors.white70),
          bodyMedium: TextStyle(color: Colors.white70),
        ),
      ),
      themeMode: ThemeMode.dark,
    );
  }
}
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  String initialRoute;
  if (kIsWeb) {
   final uri = Uri.parse(PlatformDispatcher.instance.defaultRouteName);
    if (uri.path == '/customer-share') {
      initialRoute = uri.toString();
    } else {
      initialRoute = '/customer-share';
    }
  } else {
    await _configureLocalTimeZone();
    await SubscriptionNotificationService.initialize();
    await MobileAds.instance.initialize();
    NotificationScheduler();
    await SubscriptionNotificationService.clearExpiredNotifications();
    final authService = AuthService();
    initialRoute = await authService.getInitialRoute();
    if (initialRoute == '/home') {
      final dbRepo = DatabaseRepository();
      final snapshot = await dbRepo.firestore
          .collection(dbRepo.getUserCollectionPath('customers'))
          .where('isActive', isEqualTo: true)
          .get();
      final customers = snapshot.docs.map((doc) => Customer.fromJson(doc.id, doc.data())).toList();
      await SubscriptionNotificationService.scheduleExpirationNotifications(customers);
    }
  }
  runApp(ProviderScope(child: MyApp(initialRoute: initialRoute)));
}
Future<void> _configureLocalTimeZone() async {
  if (kIsWeb || Platform.isLinux) return;
  tz.initializeTimeZones();
  if (Platform.isWindows) return;
  final String timeZoneName = await FlutterTimezone.getLocalTimezone();
  tz.setLocalLocation(tz.getLocation(timeZoneName));
}

================
File: utils.dart
================
import 'package:firebase_auth/firebase_auth.dart';
import 'database/models/referral_stats.dart';
Duration getRewardDuration(ReferralStats referralStats) {
  return Duration(milliseconds: referralStats.rewardDurationMillis);
}
String generateShareableLink(String customerId, DateTime subscriptionEndDate) {
  final user = FirebaseAuth.instance.currentUser;
  if (user == null) throw Exception('User not authenticated');
  final data = {
    'uid': user.uid,
    'cid': customerId,
  };
  final queryParams = Uri(queryParameters: data).query;
  return "https://truthy-wifi-manager.web.app/customer-share?$queryParams";
}



================================================================
End of Codebase
================================================================
