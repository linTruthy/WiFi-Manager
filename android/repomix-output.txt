This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
java/
  io/
    flutter/
      plugins/
        GeneratedPluginRegistrant.java
kotlin/
  com/
    truthysystems/
      wifi/
        MainActivity.kt
        NotificationScheduler.kt
        NotificationSchedulerPlugin.kt
        SubscriptionWidgetProvider.kt
res/
  drawable/
    default_avatar.xml
    ic_active_users.xml
    ic_expiring_users.xml
    launch_background.xml
    widget_background_with_shadow.xml
    widget_background.xml
    widget_gradient_background.xml
    widget_list_item_background.xml
    widget_stats_background.xml
  drawable-v21/
    launch_background.xml
  layout/
    subscription_list_item.xml
    subscription_widget_layout.xml
  mipmap-anydpi-v26/
    ic_launcher.xml
  raw/
    keep.xml
  values/
    styles.xml
  values-night/
    styles.xml
  xml/
    subscription_widget_info.xml
AndroidManifest.xml

================================================================
Files
================================================================

================
File: java/io/flutter/plugins/GeneratedPluginRegistrant.java
================
package io.flutter.plugins;

import androidx.annotation.Keep;
import androidx.annotation.NonNull;
import io.flutter.Log;

import io.flutter.embedding.engine.FlutterEngine;

/**
 * Generated file. Do not edit.
 * This file is generated by the Flutter tool based on the
 * plugins that support the Android platform.
 */
@Keep
public final class GeneratedPluginRegistrant {
  private static final String TAG = "GeneratedPluginRegistrant";
  public static void registerWith(@NonNull FlutterEngine flutterEngine) {
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.firebase.firestore.FlutterFirebaseFirestorePlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin cloud_firestore, io.flutter.plugins.firebase.firestore.FlutterFirebaseFirestorePlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new dev.fluttercommunity.plus.connectivity.ConnectivityPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin connectivity_plus, dev.fluttercommunity.plus.connectivity.ConnectivityPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.firebase.auth.FlutterFirebaseAuthPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin firebase_auth, io.flutter.plugins.firebase.auth.FlutterFirebaseAuthPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.firebase.core.FlutterFirebaseCorePlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin firebase_core, io.flutter.plugins.firebase.core.FlutterFirebaseCorePlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin flutter_local_notifications, com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.flutter_plugin_android_lifecycle.FlutterAndroidLifecyclePlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin flutter_plugin_android_lifecycle, io.flutter.plugins.flutter_plugin_android_lifecycle.FlutterAndroidLifecyclePlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new net.wolverinebeach.flutter_timezone.FlutterTimezonePlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin flutter_timezone, net.wolverinebeach.flutter_timezone.FlutterTimezonePlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.googlemobileads.GoogleMobileAdsPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin google_mobile_ads, io.flutter.plugins.googlemobileads.GoogleMobileAdsPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new dev.isar.isar_flutter_libs.IsarFlutterLibsPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin isar_flutter_libs, dev.isar.isar_flutter_libs.IsarFlutterLibsPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.localauth.LocalAuthPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin local_auth_android, io.flutter.plugins.localauth.LocalAuthPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.pathprovider.PathProviderPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin path_provider_android, io.flutter.plugins.pathprovider.PathProviderPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new com.baseflow.permissionhandler.PermissionHandlerPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin permission_handler_android, com.baseflow.permissionhandler.PermissionHandlerPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new dev.fluttercommunity.plus.share.SharePlusPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin share_plus, dev.fluttercommunity.plus.share.SharePlusPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin shared_preferences_android, io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.urllauncher.UrlLauncherPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin url_launcher_android, io.flutter.plugins.urllauncher.UrlLauncherPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.webviewflutter.WebViewFlutterPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin webview_flutter_android, io.flutter.plugins.webviewflutter.WebViewFlutterPlugin", e);
    }
  }
}

================
File: kotlin/com/truthysystems/wifi/MainActivity.kt
================
package com.truthysystems.wifi

import android.content.ContentResolver
import android.content.Context
import android.media.RingtoneManager
import io.flutter.embedding.android.FlutterFragmentActivity
import io.flutter.embedding.engine.FlutterEngine
import io.flutter.plugin.common.MethodChannel
import androidx.annotation.NonNull
import org.json.JSONObject
import java.util.*

class MainActivity : FlutterFragmentActivity() {
    private val CHANNEL = "com.truthysystems.wifi/subscription_widget"
    private val NOTIFICATION_CHANNEL = "com.truthysystems.wifi/notification_scheduler"
    private lateinit var notificationSchedulerPlugin: NotificationSchedulerPlugin

    override fun configureFlutterEngine(@NonNull flutterEngine: FlutterEngine) {
        super.configureFlutterEngine(flutterEngine)
        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, "truthy.systems/wifi")
            .setMethodCallHandler { call, result ->
                when (call.method) {
                    "drawableToUri" -> {
                        val resourceId = this@MainActivity.resources.getIdentifier(
                            call.arguments as String,
                            "drawable",
                            this@MainActivity.packageName
                        )
                        result.success(resourceToUriString(this@MainActivity.applicationContext, resourceId))
                    }
                    "getAlarmUri" -> {
                        result.success(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM).toString())
                    }
                    else -> result.notImplemented()
                }
            }
        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL).setMethodCallHandler { call, result ->
            when (call.method) {
                "updateSubscriptionWidget" -> {
                    try {
                        val arguments = call.arguments as Map<*, *>
                        val expiringCustomers = (arguments["expiringCustomers"] as List<*>).map { customer ->
                            val customerMap = customer as Map<*, *>
                            JSONObject().apply {
                                put("name", customerMap["name"])
                                put("daysLeft", customerMap["daysLeft"])
                                put("id", customerMap["id"])
                            }
                        }
                        val activeCustomersCount = arguments["activeCustomersCount"] as Int
                        val newRevenue = (arguments["totalRevenue"] as? Double) ?: 0.0
                        SubscriptionWidgetProvider.updateData(
                            context = this,
                            newExpiringCustomers = expiringCustomers,
                            newActiveCount = activeCustomersCount,
                            newRevenue = newRevenue
                        )
                        result.success(null)
                    } catch (e: Exception) {
                        result.error("WIDGET_UPDATE_ERROR", e.message, null)
                    }
                }
                else -> result.notImplemented()
            }
        }

        // Initialize NotificationSchedulerPlugin with this activity's context
        notificationSchedulerPlugin = NotificationSchedulerPlugin()
        notificationSchedulerPlugin.initialize(this)
    }

    private fun resourceToUriString(context: Context, resId: Int): String? {
        return (ContentResolver.SCHEME_ANDROID_RESOURCE + "://"
                + context.resources.getResourcePackageName(resId)
                + "/"
                + context.resources.getResourceTypeName(resId)
                + "/"
                + context.resources.getResourceEntryName(resId))
    }

    override fun onDestroy() {
        super.onDestroy()
        notificationSchedulerPlugin.dispose()
    }
}

================
File: kotlin/com/truthysystems/wifi/NotificationScheduler.kt
================
package com.truthysystems.wifi

import android.Manifest
import android.app.AlarmManager
import android.app.PendingIntent
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Build
import androidx.core.app.NotificationManagerCompat
import androidx.core.content.ContextCompat
import com.truthysystems.wifi.R
import java.util.Calendar

class NotificationScheduler {
    companion object {
        fun scheduleExactNotification(context: Context, timeInMillis: Long) {
            val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
            val intent = Intent(context, NotificationReceiver::class.java).apply {
                action = "com.truthysystems.wifi.SCHEDULE_NOTIFICATIONS"
            }
            val pendingIntent = PendingIntent.getBroadcast(
                context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) { // Android 12+ (API 31+)
                // Check if we have SCHEDULE_EXACT_ALARM permission
                val hasExactAlarmPermission = ContextCompat.checkSelfPermission(
                    context,
                    Manifest.permission.SCHEDULE_EXACT_ALARM
                ) == PackageManager.PERMISSION_GRANTED

                if (hasExactAlarmPermission) {
                    alarmManager.setExactAndAllowWhileIdle(
                        AlarmManager.RTC_WAKEUP, timeInMillis, pendingIntent
                    )
                } else {
                    showExactAlarmPrompt(context)
                    // Fallback to inexact alarm
                    alarmManager.setInexactRepeating(
                        AlarmManager.RTC_WAKEUP, timeInMillis, AlarmManager.INTERVAL_DAY, pendingIntent
                    )
                }
            } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) { // Android 6.0-11 (API 23-30)
                alarmManager.setExactAndAllowWhileIdle(
                    AlarmManager.RTC_WAKEUP, timeInMillis, pendingIntent
                )
            } else { // Android < 6.0
                alarmManager.setExact(AlarmManager.RTC_WAKEUP, timeInMillis, pendingIntent)
            }
        }

        private fun showExactAlarmPrompt(context: Context) {
            android.util.Log.w("NotificationScheduler", "Exact alarms permission required for timely reminders")
            NotificationManagerCompat.from(context).notify(
                1,
                android.app.Notification.Builder(context, "subscription_notifications")
                    .setContentTitle("Permission Required")
                    .setContentText("Allow exact alarms for timely subscription reminders?")
                    .setSmallIcon(R.mipmap.ic_launcher)
                    .build()
            )
        }
    }
}

class NotificationReceiver : BroadcastReceiver() {
    override fun onReceive(context: Context, intent: Intent) {
        if (intent.action == "com.truthysystems.wifi.SCHEDULE_NOTIFICATIONS") {
            // Trigger native notification scheduling logic here
            scheduleNotifications(context)
        }
    }

    private fun scheduleNotifications(context: Context) {
        // This is a placeholder for native scheduling logic
        // You would typically query your database (e.g., Isar via Flutter) or use a service
        // For now, we'll log and simulate scheduling
        android.util.Log.d("NotificationReceiver", "Scheduling all notifications")
        // Example: Schedule a test notification in 5 minutes
        val calendar = Calendar.getInstance()
        calendar.add(Calendar.MINUTE, 5)
        NotificationScheduler.scheduleExactNotification(context, calendar.timeInMillis)
    }
}

================
File: kotlin/com/truthysystems/wifi/NotificationSchedulerPlugin.kt
================
package com.truthysystems.wifi

import android.content.Context
import android.content.Intent
import io.flutter.plugin.common.MethodCall
import io.flutter.plugin.common.MethodChannel
import io.flutter.plugin.common.MethodChannel.MethodCallHandler
import io.flutter.plugin.common.MethodChannel.Result

class NotificationSchedulerPlugin : MethodCallHandler {
    private var channel: MethodChannel? = null
    private var context: Context? = null // Store the context for broadcasting

    fun initialize(context: Context) {
        this.context = context
        channel = MethodChannel(
            (context as? android.app.Activity)?.flutterEngine?.dartExecutor?.binaryMessenger
                ?: throw IllegalStateException("Flutter engine not available"),
            "com.truthysystems.wifi/notification_scheduler"
        )
        channel?.setMethodCallHandler(this)
    }

    override fun onMethodCall(call: MethodCall, result: Result) {
        when (call.method) {
            "scheduleAllNotifications" -> {
                android.util.Log.d("NotificationSchedulerPlugin", "Scheduling all notifications from Flutter")
                result.success(null)
                // Trigger native scheduling via NotificationReceiver using a broadcast
                val intent = Intent("com.truthysystems.wifi.SCHEDULE_NOTIFICATIONS")
                context?.sendBroadcast(intent)
            }
            else -> result.notImplemented()
        }
    }

    fun dispose() {
        channel?.setMethodCallHandler(null)
        channel = null
        context = null
    }
}

================
File: kotlin/com/truthysystems/wifi/SubscriptionWidgetProvider.kt
================
package com.truthysystems.wifi

import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProvider
import android.content.Context
import android.widget.RemoteViews
import org.json.JSONObject
import android.app.PendingIntent
import android.content.Intent
import android.os.Build
import android.content.ComponentName
import android.util.Log
import com.truthysystems.wifi.R
import java.text.SimpleDateFormat
import java.util.Date

class SubscriptionWidgetProvider : AppWidgetProvider() {
    companion object {
        private const val TAG = "SubscriptionWidgetProvider"
        private var expiringCustomers = listOf<JSONObject>()
        private var activeCustomersCount = 0
        private var totalRevenue = 0.0
        private var lastUpdated = ""

      fun updateData(context: Context, newExpiringCustomers: List<JSONObject>, newActiveCount: Int, newRevenue: Double) {
    Log.d(TAG, "Updating widget with: active=$newActiveCount, expiring=${newExpiringCustomers.size}, revenue=$newRevenue")
    expiringCustomers = newExpiringCustomers
    activeCustomersCount = newActiveCount
    totalRevenue = newRevenue
    lastUpdated = SimpleDateFormat("hh:mm a").format(Date())
    val appWidgetManager = AppWidgetManager.getInstance(context)
    val componentName = ComponentName(context, SubscriptionWidgetProvider::class.java)
    val appWidgetIds = appWidgetManager.getAppWidgetIds(componentName)
    if (appWidgetIds.isNotEmpty()) {
        onUpdateWidgets(context, appWidgetManager, appWidgetIds)
    } else {
        Log.w(TAG, "No active widget IDs found")
    }
}

      private fun onUpdateWidgets(context: Context, appWidgetManager: AppWidgetManager, appWidgetIds: IntArray) {
    for (appWidgetId in appWidgetIds) {
        updateAppWidget(context, appWidgetManager, appWidgetId)
    }
    appWidgetManager.notifyAppWidgetViewDataChanged(appWidgetIds, R.id.expiring_customers_container)
}

        private fun updateAppWidget(context: Context, appWidgetManager: AppWidgetManager, appWidgetId: Int) {
            val views = RemoteViews(context.packageName, R.layout.subscription_widget_layout)
            setupWidgetClick(context, views)
            updateStats(views)
            updateExpiringCustomersList(context, views)
            setupActionButtons(context, views)
            appWidgetManager.updateAppWidget(appWidgetId, views)
        }

        private fun setupWidgetClick(context: Context, views: RemoteViews) {
            val pendingIntentFlags = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            } else {
                PendingIntent.FLAG_UPDATE_CURRENT
            }
            val intent = context.packageManager.getLaunchIntentForPackage(context.packageName)
            intent?.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP)
            val pendingIntent = PendingIntent.getActivity(context, 0, intent, pendingIntentFlags)
            views.setOnClickPendingIntent(R.id.widget_layout_root, pendingIntent)
        }

        private fun updateStats(views: RemoteViews) {
            views.setTextViewText(R.id.active_customers_text, "Active: $activeCustomersCount")
            val expiringToday = expiringCustomers.count { it.getString("daysLeft").contains("today", true) }
            val expiringSoon = expiringCustomers.size - expiringToday
            views.setTextViewText(R.id.expiring_count_text, "Today: $expiringToday | Soon: $expiringSoon")
            views.setTextViewText(R.id.revenue_text, "Revenue: UGX ${totalRevenue.toInt()}")
            views.setTextViewText(R.id.last_updated_text, "Updated: $lastUpdated")
        }

        private fun updateExpiringCustomersList(context: Context, views: RemoteViews) {
            views.removeAllViews(R.id.expiring_customers_container)
            if (expiringCustomers.isEmpty()) {
                val placeholderView = RemoteViews(context.packageName, R.layout.subscription_list_item)
                placeholderView.setTextViewText(R.id.customer_name, "No expiring subscriptions")
                views.addView(R.id.expiring_customers_container, placeholderView)
            } else {
                expiringCustomers.take(3).forEach { customer ->
                    val itemView = RemoteViews(context.packageName, R.layout.subscription_list_item)
                    itemView.setTextViewText(R.id.customer_name, customer.getString("name"))
                    val daysLeft = customer.getString("daysLeft")
                    itemView.setTextViewText(R.id.days_left, daysLeft)
                    itemView.setTextColor(R.id.days_left, if (daysLeft.contains("today", true)) 0xFFFF0000.toInt() else 0xFFFFA500.toInt())
                    val intent = Intent(context, MainActivity::class.java).apply {
                        putExtra("customerId", customer.getString("id"))
                    }
                    val pendingIntent = PendingIntent.getActivity(
                        context, customer.hashCode(), intent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                    )
                    itemView.setOnClickPendingIntent(R.id.customer_name, pendingIntent)
                    views.addView(R.id.expiring_customers_container, itemView)
                }
            }
        }

        private fun setupActionButtons(context: Context, views: RemoteViews) {
            val addIntent = Intent(context, MainActivity::class.java).apply {
                putExtra("route", "/add-payment")
            }
            val addPendingIntent = PendingIntent.getActivity(
                context, 1, addIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )
            views.setOnClickPendingIntent(R.id.add_payment_button, addPendingIntent)
        }
    }

    override fun onUpdate(context: Context, appWidgetManager: AppWidgetManager, appWidgetIds: IntArray) {
        onUpdateWidgets(context, appWidgetManager, appWidgetIds)
    }
}

================
File: res/drawable/default_avatar.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M12,12c2.21,0 4,-1.79 4,-4s-1.79,-4 -4,-4 -4,1.79 -4,4 1.79,4 4,4zM12,14c-2.67,0 -8,1.34 -8,4v2h16v-2c0,-2.66 -5.33,-4 -8,-4z"/>
</vector>

================
File: res/drawable/ic_active_users.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M16,11c1.66,0 2.99,-1.34 2.99,-3S17.66,5 16,5c-1.66,0 -3,1.34 -3,3s1.34,3 3,3zM8,11c1.66,0 2.99,-1.34 2.99,-3S9.66,5 8,5C6.34,5 5,6.34 5,8s1.34,3 3,3zM8,13c-2.33,0 -7,1.17 -7,3.5L1,19h14v-2.5c0,-2.33 -4.67,-3.5 -7,-3.5zM16,13c-0.29,0 -0.62,0.02 -0.97,0.05 1.16,0.84 1.97,1.97 1.97,3.45L17,19h6v-2.5c0,-2.33 -4.67,-3.5 -7,-3.5z"/>
</vector>

================
File: res/drawable/ic_expiring_users.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M11.99,2C6.47,2 2,6.48 2,12s4.47,10 9.99,10C17.52,22 22,17.52 22,12S17.52,2 11.99,2zM12,20c-4.42,0 -8,-3.58 -8,-8s3.58,-8 8,-8 8,3.58 8,8 -3.58,8 -8,8zM12.5,7L11,7v6l5.25,3.15 0.75,-1.23 -4.5,-2.67z"/>
</vector>

================
File: res/drawable/launch_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- Gradient Background -->
    <item>
        <shape android:shape="rectangle">
            <gradient
                android:angle="135"
                android:startColor="#4285F4"
                android:centerColor="#34A853"
                android:endColor="#FBBC05"
                android:type="linear" />
        </shape>
    </item>

    <!-- Subtle Pattern Overlay -->
    <!-- <item>
        <bitmap
            android:src="@drawable/splash_pattern"
            android:tileMode="repeat"
            android:gravity="fill" />
    </item> -->

    <!-- Logo -->
    <!-- <item>
        <bitmap
            android:gravity="center"
            android:src="@mipmap/splash_logo"
            android:scaleType="centerInside"
            android:alpha="0.9" />
    </item> -->
</layer-list>

================
File: res/drawable/widget_background_with_shadow.xml
================
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- Shadow -->
    <item>
        <shape android:shape="rectangle">
            <solid android:color="#44000000"/>
            <corners android:radius="16dp"/>
            <padding
                android:bottom="2dp"
                android:left="2dp"
                android:right="2dp"
                android:top="2dp"/>
        </shape>
    </item>
    <!-- Background -->
    <item>
        <shape android:shape="rectangle">
            <solid android:color="#99000000"/>
            <corners android:radius="16dp"/>
            <stroke
                android:width="1dp"
                android:color="#33FFFFFF"/>
        </shape>
    </item>
</layer-list>

================
File: res/drawable/widget_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <solid android:color="#33000000"/>
    <corners android:radius="16dp"/>
    <stroke
        android:width="1dp"
        android:color="#33FFFFFF"/>
</shape>

================
File: res/drawable/widget_gradient_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <gradient
        android:angle="135"
        android:startColor="#3F51B5"
        android:endColor="#2196F3"
        android:type="linear"/>
    <corners android:radius="12dp"/>
</shape>

================
File: res/drawable/widget_list_item_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <solid android:color="#10FFFFFF"/>
    <corners android:radius="6dp"/>
</shape>

================
File: res/drawable/widget_stats_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <solid android:color="#20FFFFFF"/>
    <corners android:radius="8dp"/>
</shape>

================
File: res/drawable-v21/launch_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<!-- Modify this file to customize your launch splash screen -->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="?android:colorBackground" />

    <!-- You can insert your own image assets here -->
    <!-- <item>
        <bitmap
            android:gravity="center"
            android:src="@mipmap/launch_image" />
    </item> -->
</layer-list>

================
File: res/layout/subscription_list_item.xml
================
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="horizontal"
    android:padding="8dp"
    android:background="@drawable/widget_list_item_background"
    android:gravity="center_vertical">

    <ImageView
        android:id="@+id/customer_avatar"
        android:layout_width="40dp"
        android:layout_height="40dp"
        android:src="@drawable/default_avatar"
        android:layout_marginEnd="12dp"
        app:tint="#FFFFFF"/>

    <LinearLayout
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_weight="1"
        android:orientation="vertical">

        <TextView
            android:id="@+id/customer_name"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF"
            android:textStyle="bold"
            android:textSize="14sp"/>

        <TextView
            android:id="@+id/days_left"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#FFFFFF80"
            android:textSize="12sp"/>
    </LinearLayout>

    <TextView
        android:id="@+id/expiry_status"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textColor="#FFEB3B"
        android:textStyle="bold"
        android:textSize="12sp"/>
</LinearLayout>

================
File: res/layout/subscription_widget_layout.xml
================
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/widget_layout_root"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:padding="12dp"
    android:background="@drawable/widget_gradient_background"
    android:elevation="4dp"
    android:clipToOutline="true">
    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">
        <TextView
            android:id="@+id/widget_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="WiFi Subscriptions"
            android:textSize="16sp"
            android:textStyle="bold"
            android:textColor="#FFFFFF"
            android:layout_alignParentStart="true"/>
        <TextView
            android:id="@+id/last_updated_text"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="10sp"
            android:textColor="#FFFFFF80"
            android:layout_alignParentEnd="true"/>
    </RelativeLayout>
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:layout_marginTop="8dp"
        android:background="@drawable/widget_stats_background"
        android:padding="6dp">
        <TextView
            android:id="@+id/active_customers_text"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:drawableStart="@drawable/ic_active_users"
            android:drawablePadding="6dp"
            android:textColor="#FFFFFF"
            android:textSize="12sp"
            android:textStyle="bold"/>
        <TextView
            android:id="@+id/expiring_count_text"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:drawableStart="@drawable/ic_expiring_users"
            android:drawablePadding="6dp"
            android:textColor="#FFFFFF"
            android:textSize="12sp"
            android:textStyle="bold"/>
    </LinearLayout>
    <TextView
        android:id="@+id/revenue_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="6dp"
        android:textSize="12sp"
        android:textColor="#FFFFFF"
        android:drawableStart="@android:drawable/ic_menu_recent_history"
        android:drawablePadding="6dp"/>
    <LinearLayout
        android:id="@+id/expiring_customers_container"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:layout_marginTop="6dp"/>
    <Button
        android:id="@+id/add_payment_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Add Payment"
        android:textSize="12sp"
        android:layout_gravity="end"
        android:layout_marginTop="6dp"/>
</LinearLayout>

================
File: res/mipmap-anydpi-v26/ic_launcher.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
  <background android:drawable="@mipmap/ic_launcher_background"/>
  <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
  <monochrome android:drawable="@mipmap/ic_launcher_monochrome"/>
</adaptive-icon>

================
File: res/raw/keep.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources xmlns:tools="http://schemas.android.com/tools"
    tools:keep="@drawable/*,@raw/slow_spring_board" />

================
File: res/values/styles.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is off -->
    <style name="LaunchTheme" parent="Theme.AppCompat.DayNight">
        <!-- Show a splash screen on the activity. Automatically removed when
             the Flutter engine draws its first frame -->
        <item name="android:windowBackground">@drawable/launch_background</item>
    </style>
    <!-- Theme applied to the Android Window as soon as the process has started.
         This theme determines the color of the Android Window while your
         Flutter UI initializes, as well as behind your Flutter UI while its
         running.

         This Theme is only used starting with V2 of Flutter's Android embedding. -->
    <style name="NormalTheme" parent="@android:style/Theme.Light.NoTitleBar">
        <item name="android:windowBackground">?android:colorBackground</item>
    </style>
</resources>

================
File: res/values-night/styles.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is on -->
    <style name="LaunchTheme" parent="@android:style/Theme.Black.NoTitleBar">
        <!-- Show a splash screen on the activity. Automatically removed when
             the Flutter engine draws its first frame -->
        <item name="android:windowBackground">@drawable/launch_background</item>
    </style>
    <!-- Theme applied to the Android Window as soon as the process has started.
         This theme determines the color of the Android Window while your
         Flutter UI initializes, as well as behind your Flutter UI while its
         running.

         This Theme is only used starting with V2 of Flutter's Android embedding. -->
    <style name="NormalTheme" parent="@android:style/Theme.Black.NoTitleBar">
        <item name="android:windowBackground">?android:colorBackground</item>
    </style>
</resources>

================
File: res/xml/subscription_widget_info.xml
================
<?xml version="1.0" encoding="utf-8"?>
<appwidget-provider xmlns:android="http://schemas.android.com/apk/res/android"
    android:minWidth="250dp"
    android:minHeight="150dp"
    android:updatePeriodMillis="1800000"
    android:initialLayout="@layout/subscription_widget_layout"
    android:resizeMode="horizontal|vertical"
    android:widgetCategory="home_screen|keyguard"
    android:widgetFeatures="reconfigurable">
</appwidget-provider>

================
File: AndroidManifest.xml
================
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
 
    <uses-permission android:name="android.permission.SCHEDULE_ALARM"/>
    <uses-permission android:name="android.permission.SCHEDULE_EXACT_ALARM"/>
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE_SPECIAL_USE"/>
    <uses-permission android:name="android.permission.USE_EXACT_ALARM"/>
    <uses-permission android:name="android.permission.USE_FULL_SCREEN_INTENT"/>
    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>
    <uses-permission android:name="android.permission.WAKE_LOCK"/>
    <uses-permission android:name="android.permission.VIBRATE"/>
    <uses-permission android:name="com.google.android.c2dm.permission.RECEIVE"/>
    <uses-permission android:name="android.permission.USE_BIOMETRIC"/>
    <uses-permission android:name="android.permission.DISABLE_KEYGUARD" />
   
    <application
        android:label="Wifi Manager"
        android:name="${applicationName}"
        android:icon="@mipmap/ic_launcher"
        android:hardwareAccelerated="false"
        android:enableOnBackInvokedCallback="true">
        
        <!-- Move the AdMob App ID here, directly under <application> -->
        <meta-data
            android:name="com.google.android.gms.ads.APPLICATION_ID"
            android:value="ca-app-pub-8267064683737776~4117257296"/>

        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:taskAffinity=""
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <meta-data
                android:name="io.flutter.embedding.android.NormalTheme"
                android:resource="@style/NormalTheme" />
            <meta-data
                android:name="io.flutter.embedding.android.EnableVulkan"
                android:value="true" />
         
            <intent-filter>
                <action android:name="android.intent.action.BOOT_COMPLETED"/>
                <action android:name="android.intent.action.MY_PACKAGE_REPLACED"/>
            </intent-filter>
            <intent-filter>
                <action android:name="android.intent.action.BOOT_COMPLETED"/>
                <action android:name="android.intent.action.QUICKBOOT_POWERON"/>
                <action android:name="com.htc.intent.action.QUICKBOOT_POWERON"/>
            </intent-filter>
            <intent-filter>
                <action android:name="FLUTTER_NOTIFICATION_CLICK"/>
                <category android:name="android.intent.category.DEFAULT"/>
                <category android:name="android.intent.category.BROWSABLE"/>
            </intent-filter>
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>

        <!-- Other application-level configurations -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />
           <service
    android:name=".NotificationSchedulerPlugin"
    android:exported="false">
    <intent-filter>
        <action android:name="flutter.platform.PlatformService" />
    </intent-filter>
</service>
        <receiver android:exported="false" android:name="com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver" />
        <receiver android:exported="false" android:name="com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver"/> 
        <receiver 
            android:name=".SubscriptionWidgetProvider"
            android:exported="true"
            android:label="Subscription Widget">
            <intent-filter>
                <action android:name="android.appwidget.action.APPWIDGET_UPDATE" />
                <action android:name="android.appwidget.action.APPWIDGET_ENABLED" />
                <action android:name="android.appwidget.action.APPWIDGET_DISABLED" />
            </intent-filter>
            <meta-data
                android:name="android.appwidget.provider"
                android:resource="@xml/subscription_widget_info" />
        </receiver>
        <receiver
    android:name=".NotificationReceiver"
    android:exported="false">
    <intent-filter>
        <action android:name="com.truthysystems.wifi.NOTIFICATION_ACTION" />
    </intent-filter>
</receiver>
    </application>

    <queries>
        <intent>
            <action android:name="android.intent.action.PROCESS_TEXT"/>
            <data android:mimeType="text/plain"/>
        </intent>
    </queries>
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
</manifest>



================================================================
End of Codebase
================================================================
